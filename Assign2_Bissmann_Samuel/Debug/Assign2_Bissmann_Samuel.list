
Assign2_Bissmann_Samuel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007134  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  080072c4  080072c4  000172c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800742c  0800742c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800742c  0800742c  0001742c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007434  08007434  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007434  08007434  00017434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007438  08007438  00017438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800743c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008584  20000070  080074ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200085f4  080074ac  000285f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015a67  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003050  00000000  00000000  00035b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  00038ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d61  00000000  00000000  00039d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c28  00000000  00000000  0003aa81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000141d4  00000000  00000000  0005d6a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb39a  00000000  00000000  0007187d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f10  00000000  00000000  0013cc18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00141b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080072ac 	.word	0x080072ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080072ac 	.word	0x080072ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0

}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800057a:	b480      	push	{r7}
 800057c:	af00      	add	r7, sp, #0
return 0;
 800057e:	2300      	movs	r3, #0
}
 8000580:	4618      	mov	r0, r3
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
	...

0800058c <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int __io_putchar(int ch)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	int ret;
	while ((ret=HAL_UART_GetState(&huart2)) != HAL_UART_STATE_READY)
 8000594:	bf00      	nop
 8000596:	4811      	ldr	r0, [pc, #68]	; (80005dc <__io_putchar+0x50>)
 8000598:	f002 f87e 	bl	8002698 <HAL_UART_GetState>
 800059c:	4603      	mov	r3, r0
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	2b20      	cmp	r3, #32
 80005a4:	d1f7      	bne.n	8000596 <__io_putchar+0xa>
		;

	if (ch == '\n')
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2b0a      	cmp	r3, #10
 80005aa:	d107      	bne.n	80005bc <__io_putchar+0x30>
	{
		static uint8_t buf[2] = { '\r', '\n' };
		HAL_UART_Transmit(&huart2, buf, sizeof(buf), 1000);
 80005ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b0:	2202      	movs	r2, #2
 80005b2:	490b      	ldr	r1, [pc, #44]	; (80005e0 <__io_putchar+0x54>)
 80005b4:	4809      	ldr	r0, [pc, #36]	; (80005dc <__io_putchar+0x50>)
 80005b6:	f001 ffe5 	bl	8002584 <HAL_UART_Transmit>
 80005ba:	e00a      	b.n	80005d2 <__io_putchar+0x46>
	}
	else
	{
		static char buf;
		buf = ch;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <__io_putchar+0x58>)
 80005c2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)&buf, 1, 1000);
 80005c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c8:	2201      	movs	r2, #1
 80005ca:	4906      	ldr	r1, [pc, #24]	; (80005e4 <__io_putchar+0x58>)
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <__io_putchar+0x50>)
 80005ce:	f001 ffd9 	bl	8002584 <HAL_UART_Transmit>
	}
	return ch;
 80005d2:	687b      	ldr	r3, [r7, #4]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2000008c 	.word	0x2000008c
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000174 	.word	0x20000174

080005e8 <Ringbuffer_Put>:


bool Ringbuffer_Put(rb_elem elem)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	463b      	mov	r3, r7
 80005f0:	e883 0003 	stmia.w	r3, {r0, r1}
    if (xSemaphoreTake(rb.mutex, portMAX_DELAY) == pdTRUE) {
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <Ringbuffer_Put+0x8c>)
 80005f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80005f8:	f04f 31ff 	mov.w	r1, #4294967295
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 fbb9 	bl	8003d74 <xQueueSemaphoreTake>
 8000602:	4603      	mov	r3, r0
 8000604:	2b01      	cmp	r3, #1
 8000606:	d130      	bne.n	800066a <Ringbuffer_Put+0x82>
        // Calculate the index where the element should be inserted

    	if(uxSemaphoreGetCount(rb.items)<10)
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <Ringbuffer_Put+0x8c>)
 800060a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800060c:	4618      	mov	r0, r3
 800060e:	f003 fcbd 	bl	8003f8c <uxQueueMessagesWaiting>
 8000612:	4603      	mov	r3, r0
 8000614:	2b09      	cmp	r3, #9
 8000616:	d81c      	bhi.n	8000652 <Ringbuffer_Put+0x6a>
    	{
    		int insert_index = (RING_BUFFER_SIZE - uxSemaphoreGetCount(rb.items));
 8000618:	4b16      	ldr	r3, [pc, #88]	; (8000674 <Ringbuffer_Put+0x8c>)
 800061a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800061c:	4618      	mov	r0, r3
 800061e:	f003 fcb5 	bl	8003f8c <uxQueueMessagesWaiting>
 8000622:	4603      	mov	r3, r0
 8000624:	f1c3 030a 	rsb	r3, r3, #10
 8000628:	60fb      	str	r3, [r7, #12]

        // Add element to the buffer
        rb.buffer[insert_index] = elem;
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <Ringbuffer_Put+0x8c>)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	4413      	add	r3, r2
 8000632:	463a      	mov	r2, r7
 8000634:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000638:	e883 0003 	stmia.w	r3, {r0, r1}

        // Increment the count of items in the buffer
        xSemaphoreGive(rb.items);
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <Ringbuffer_Put+0x8c>)
 800063e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8000640:	2300      	movs	r3, #0
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	f003 f91b 	bl	8003880 <xQueueGenericSend>
        printf("YappyAPp");
 800064a:	480b      	ldr	r0, [pc, #44]	; (8000678 <Ringbuffer_Put+0x90>)
 800064c:	f005 ff56 	bl	80064fc <iprintf>
 8000650:	e002      	b.n	8000658 <Ringbuffer_Put+0x70>
    	}
    	else
    	printf("Buffer Full!");
 8000652:	480a      	ldr	r0, [pc, #40]	; (800067c <Ringbuffer_Put+0x94>)
 8000654:	f005 ff52 	bl	80064fc <iprintf>

        xSemaphoreGive(rb.mutex);
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <Ringbuffer_Put+0x8c>)
 800065a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800065c:	2300      	movs	r3, #0
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	f003 f90d 	bl	8003880 <xQueueGenericSend>
        return true;
 8000666:	2301      	movs	r3, #1
 8000668:	e000      	b.n	800066c <Ringbuffer_Put+0x84>
    }
    return false;
 800066a:	2300      	movs	r3, #0
}
 800066c:	4618      	mov	r0, r3
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2000011c 	.word	0x2000011c
 8000678:	080072e4 	.word	0x080072e4
 800067c:	080072f0 	.word	0x080072f0

08000680 <Ringbuffer_Get>:



bool Ringbuffer_Get(rb_elem *elem) {
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
    if (xSemaphoreTake(rb.mutex, portMAX_DELAY) == pdTRUE) {
 8000688:	4b20      	ldr	r3, [pc, #128]	; (800070c <Ringbuffer_Get+0x8c>)
 800068a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800068c:	f04f 31ff 	mov.w	r1, #4294967295
 8000690:	4618      	mov	r0, r3
 8000692:	f003 fb6f 	bl	8003d74 <xQueueSemaphoreTake>
 8000696:	4603      	mov	r3, r0
 8000698:	2b01      	cmp	r3, #1
 800069a:	d131      	bne.n	8000700 <Ringbuffer_Get+0x80>
        // Check if there are any items in the buffer
        if (uxSemaphoreGetCount(rb.items) > 0) {
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <Ringbuffer_Get+0x8c>)
 800069e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80006a0:	4618      	mov	r0, r3
 80006a2:	f003 fc73 	bl	8003f8c <uxQueueMessagesWaiting>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d020      	beq.n	80006ee <Ringbuffer_Get+0x6e>
            // Retrieve the oldest element from the buffer
            *elem = rb.buffer[RING_BUFFER_SIZE - uxSemaphoreGetCount(rb.items)];
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <Ringbuffer_Get+0x8c>)
 80006ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80006b0:	4618      	mov	r0, r3
 80006b2:	f003 fc6b 	bl	8003f8c <uxQueueMessagesWaiting>
 80006b6:	4603      	mov	r3, r0
 80006b8:	f1c3 030a 	rsb	r3, r3, #10
 80006bc:	6879      	ldr	r1, [r7, #4]
 80006be:	4a13      	ldr	r2, [pc, #76]	; (800070c <Ringbuffer_Get+0x8c>)
 80006c0:	460c      	mov	r4, r1
 80006c2:	00db      	lsls	r3, r3, #3
 80006c4:	4413      	add	r3, r2
 80006c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006ca:	e884 0003 	stmia.w	r4, {r0, r1}
            // Decrement the count of items in the buffer
            xSemaphoreTake(rb.items, portMAX_DELAY);
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <Ringbuffer_Get+0x8c>)
 80006d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80006d2:	f04f 31ff 	mov.w	r1, #4294967295
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 fb4c 	bl	8003d74 <xQueueSemaphoreTake>
            xSemaphoreGive(rb.mutex);
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <Ringbuffer_Get+0x8c>)
 80006de:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80006e0:	2300      	movs	r3, #0
 80006e2:	2200      	movs	r2, #0
 80006e4:	2100      	movs	r1, #0
 80006e6:	f003 f8cb 	bl	8003880 <xQueueGenericSend>
            return true;
 80006ea:	2301      	movs	r3, #1
 80006ec:	e009      	b.n	8000702 <Ringbuffer_Get+0x82>
        }
        else {
            // Buffer is empty
            xSemaphoreGive(rb.mutex);
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <Ringbuffer_Get+0x8c>)
 80006f0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80006f2:	2300      	movs	r3, #0
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	f003 f8c2 	bl	8003880 <xQueueGenericSend>
            return false;
 80006fc:	2300      	movs	r3, #0
 80006fe:	e000      	b.n	8000702 <Ringbuffer_Get+0x82>
        }
    }
    return false;
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	bd90      	pop	{r4, r7, pc}
 800070a:	bf00      	nop
 800070c:	2000011c 	.word	0x2000011c

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000716:	f000 fa9e 	bl	8000c56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071a:	f000 f859 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071e:	f000 f8cd 	bl	80008bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000722:	f000 f89b 	bl	800085c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000726:	f002 fc41 	bl	8002fac <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
rb.mutex=xSemaphoreCreateMutex();
 800072a:	2001      	movs	r0, #1
 800072c:	f003 f825 	bl	800377a <xQueueCreateMutex>
 8000730:	4603      	mov	r3, r0
 8000732:	4a1e      	ldr	r2, [pc, #120]	; (80007ac <main+0x9c>)
 8000734:	6513      	str	r3, [r2, #80]	; 0x50
rb.items=xSemaphoreCreateCounting(RING_BUFFER_SIZE,0);
 8000736:	2100      	movs	r1, #0
 8000738:	200a      	movs	r0, #10
 800073a:	f003 f86d 	bl	8003818 <xQueueCreateCountingSemaphore>
 800073e:	4603      	mov	r3, r0
 8000740:	4a1a      	ldr	r2, [pc, #104]	; (80007ac <main+0x9c>)
 8000742:	6553      	str	r3, [r2, #84]	; 0x54
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myCountingSem01 */
  myCountingSem01Handle = osSemaphoreNew(2, 2, &myCountingSem01_attributes);
 8000744:	4a1a      	ldr	r2, [pc, #104]	; (80007b0 <main+0xa0>)
 8000746:	2102      	movs	r1, #2
 8000748:	2002      	movs	r0, #2
 800074a:	f002 fd4e 	bl	80031ea <osSemaphoreNew>
 800074e:	4603      	mov	r3, r0
 8000750:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <main+0xa4>)
 8000752:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ConsumerTask */
  ConsumerTaskHandle = osThreadNew(ConsumerTask_Entry, NULL, &ConsumerTask_attributes);
 8000754:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <main+0xa8>)
 8000756:	2100      	movs	r1, #0
 8000758:	4818      	ldr	r0, [pc, #96]	; (80007bc <main+0xac>)
 800075a:	f002 fc71 	bl	8003040 <osThreadNew>
 800075e:	4603      	mov	r3, r0
 8000760:	4a17      	ldr	r2, [pc, #92]	; (80007c0 <main+0xb0>)
 8000762:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  for(int i=1;i<=NUM_PRODS;i++)
 8000764:	2301      	movs	r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	e01a      	b.n	80007a0 <main+0x90>
  {
	  osThreadId_t ProducerCreated=osThreadNew(ProducerTask_Entry, (void*)i, NULL);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2200      	movs	r2, #0
 800076e:	4619      	mov	r1, r3
 8000770:	4814      	ldr	r0, [pc, #80]	; (80007c4 <main+0xb4>)
 8000772:	f002 fc65 	bl	8003040 <osThreadNew>
 8000776:	6038      	str	r0, [r7, #0]

	 if(ProducerCreated==NULL)
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x78>
	 {
		 printf("creation of: %d failed \n",i);
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	4811      	ldr	r0, [pc, #68]	; (80007c8 <main+0xb8>)
 8000782:	f005 febb 	bl	80064fc <iprintf>
 8000786:	e008      	b.n	800079a <main+0x8a>

	 }
	 else
	 {
	printf("created: %d StackSize: %d\n",i,(int)osThreadGetStackSpace(ProducerCreated));
 8000788:	6838      	ldr	r0, [r7, #0]
 800078a:	f002 fcf6 	bl	800317a <osThreadGetStackSpace>
 800078e:	4603      	mov	r3, r0
 8000790:	461a      	mov	r2, r3
 8000792:	6879      	ldr	r1, [r7, #4]
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <main+0xbc>)
 8000796:	f005 feb1 	bl	80064fc <iprintf>
  for(int i=1;i<=NUM_PRODS;i++)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	3301      	adds	r3, #1
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b07      	cmp	r3, #7
 80007a4:	dde1      	ble.n	800076a <main+0x5a>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007a6:	f002 fc25 	bl	8002ff4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <main+0x9a>
 80007ac:	2000011c 	.word	0x2000011c
 80007b0:	080073a0 	.word	0x080073a0
 80007b4:	20000118 	.word	0x20000118
 80007b8:	0800737c 	.word	0x0800737c
 80007bc:	08000919 	.word	0x08000919
 80007c0:	20000114 	.word	0x20000114
 80007c4:	080008ed 	.word	0x080008ed
 80007c8:	08007300 	.word	0x08007300
 80007cc:	0800731c 	.word	0x0800731c

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b096      	sub	sp, #88	; 0x58
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	2244      	movs	r2, #68	; 0x44
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f005 fee1 	bl	80065a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	463b      	mov	r3, r7
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007f6:	f000 fd01 	bl	80011fc <HAL_PWREx_ControlVoltageScaling>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000800:	f000 f8a2 	bl	8000948 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000804:	2310      	movs	r3, #16
 8000806:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000810:	2360      	movs	r3, #96	; 0x60
 8000812:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000814:	2300      	movs	r3, #0
 8000816:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fd43 	bl	80012a8 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000828:	f000 f88e 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000840:	463b      	mov	r3, r7
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f001 f943 	bl	8001ad0 <HAL_RCC_ClockConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000850:	f000 f87a 	bl	8000948 <Error_Handler>
  }
}
 8000854:	bf00      	nop
 8000856:	3758      	adds	r7, #88	; 0x58
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 8000862:	4a15      	ldr	r2, [pc, #84]	; (80008b8 <MX_USART2_UART_Init+0x5c>)
 8000864:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_USART2_UART_Init+0x58>)
 80008a0:	f001 fe22 	bl	80024e8 <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008aa:	f000 f84d 	bl	8000948 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	2000008c 	.word	0x2000008c
 80008b8:	40004400 	.word	0x40004400

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_GPIO_Init+0x2c>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <MX_GPIO_Init+0x2c>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_GPIO_Init+0x2c>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000

080008ec <ProducerTask_Entry>:

/* USER CODE BEGIN 4 */

void ProducerTask_Entry(void *argument) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
    // Get the ID of the current thread
    osThreadId_t producerId = osThreadGetId();
 80008f4:	f002 fc36 	bl	8003164 <osThreadGetId>
 80008f8:	6178      	str	r0, [r7, #20]

    rb_elem data;
    data.data = (int)argument;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	60fb      	str	r3, [r7, #12]
    data.producer_task = producerId;
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	613b      	str	r3, [r7, #16]

    while (1) {
        // Add data to ring buffer
        Ringbuffer_Put(data);
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	e893 0003 	ldmia.w	r3, {r0, r1}
 800090a:	f7ff fe6d 	bl	80005e8 <Ringbuffer_Put>
        osDelay(1000); // Delay for 1 second
 800090e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000912:	f002 fc4f 	bl	80031b4 <osDelay>
        Ringbuffer_Put(data);
 8000916:	e7f4      	b.n	8000902 <ProducerTask_Entry+0x16>

08000918 <ConsumerTask_Entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ConsumerTask_Entry */
void ConsumerTask_Entry(void *argument)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	while (1) {
	        rb_elem data;

	        // Get data from the ring buffer
	        if (Ringbuffer_Get(&data)) {
 8000920:	f107 0308 	add.w	r3, r7, #8
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff feab 	bl	8000680 <Ringbuffer_Get>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d005      	beq.n	800093c <ConsumerTask_Entry+0x24>
	            // Print received data and producer task ID
	            printf("Received data: %2d from Producer Task: %5p\n", data.data, data.producer_task);
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	68fa      	ldr	r2, [r7, #12]
 8000934:	4619      	mov	r1, r3
 8000936:	4803      	ldr	r0, [pc, #12]	; (8000944 <ConsumerTask_Entry+0x2c>)
 8000938:	f005 fde0 	bl	80064fc <iprintf>
	        }

	        // Delay for a short period to avoid busy-waiting
	        osDelay(100);
 800093c:	2064      	movs	r0, #100	; 0x64
 800093e:	f002 fc39 	bl	80031b4 <osDelay>
	while (1) {
 8000942:	e7ed      	b.n	8000920 <ConsumerTask_Entry+0x8>
 8000944:	08007338 	.word	0x08007338

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	e7fe      	b.n	8000950 <Error_Handler+0x8>
	...

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <HAL_MspInit+0x4c>)
 800095c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <HAL_MspInit+0x4c>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6613      	str	r3, [r2, #96]	; 0x60
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <HAL_MspInit+0x4c>)
 8000968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <HAL_MspInit+0x4c>)
 8000974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <HAL_MspInit+0x4c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6593      	str	r3, [r2, #88]	; 0x58
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_MspInit+0x4c>)
 8000980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	210f      	movs	r1, #15
 800098e:	f06f 0001 	mvn.w	r0, #1
 8000992:	f000 fa92 	bl	8000eba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b09e      	sub	sp, #120	; 0x78
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	2254      	movs	r2, #84	; 0x54
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f005 fdee 	bl	80065a6 <memset>
  if(huart->Instance==USART2)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a1f      	ldr	r2, [pc, #124]	; (8000a4c <HAL_UART_MspInit+0xa8>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d136      	bne.n	8000a42 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009d8:	2300      	movs	r3, #0
 80009da:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009dc:	f107 0310 	add.w	r3, r7, #16
 80009e0:	4618      	mov	r0, r3
 80009e2:	f001 fa99 	bl	8001f18 <HAL_RCCEx_PeriphCLKConfig>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009ec:	f7ff ffac 	bl	8000948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f0:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <HAL_UART_MspInit+0xac>)
 80009f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f4:	4a16      	ldr	r2, [pc, #88]	; (8000a50 <HAL_UART_MspInit+0xac>)
 80009f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fa:	6593      	str	r3, [r2, #88]	; 0x58
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <HAL_UART_MspInit+0xac>)
 80009fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <HAL_UART_MspInit+0xac>)
 8000a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0c:	4a10      	ldr	r2, [pc, #64]	; (8000a50 <HAL_UART_MspInit+0xac>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_UART_MspInit+0xac>)
 8000a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a20:	230c      	movs	r3, #12
 8000a22:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a30:	2307      	movs	r3, #7
 8000a32:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3e:	f000 fa65 	bl	8000f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	3778      	adds	r7, #120	; 0x78
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40004400 	.word	0x40004400
 8000a50:	40021000 	.word	0x40021000

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a84:	f000 f93c 	bl	8000d00 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a88:	f004 fb24 	bl	80050d4 <xTaskGetSchedulerState>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d001      	beq.n	8000a96 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a92:	f005 fa09 	bl	8005ea8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b086      	sub	sp, #24
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	e00a      	b.n	8000ac2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aac:	f3af 8000 	nop.w
 8000ab0:	4601      	mov	r1, r0
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	1c5a      	adds	r2, r3, #1
 8000ab6:	60ba      	str	r2, [r7, #8]
 8000ab8:	b2ca      	uxtb	r2, r1
 8000aba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	dbf0      	blt.n	8000aac <_read+0x12>
  }

  return len;
 8000aca:	687b      	ldr	r3, [r7, #4]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	e009      	b.n	8000afa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	1c5a      	adds	r2, r3, #1
 8000aea:	60ba      	str	r2, [r7, #8]
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fd4c 	bl	800058c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	3301      	adds	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	697a      	ldr	r2, [r7, #20]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	dbf1      	blt.n	8000ae6 <_write+0x12>
  }
  return len;
 8000b02:	687b      	ldr	r3, [r7, #4]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <_close>:

int _close(int file)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b34:	605a      	str	r2, [r3, #4]
  return 0;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <_isatty>:

int _isatty(int file)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b4c:	2301      	movs	r3, #1
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b085      	sub	sp, #20
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b66:	2300      	movs	r3, #0
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b7c:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <_sbrk+0x5c>)
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <_sbrk+0x60>)
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d102      	bne.n	8000b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <_sbrk+0x64>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <_sbrk+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d207      	bcs.n	8000bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba4:	f005 fda4 	bl	80066f0 <__errno>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	220c      	movs	r2, #12
 8000bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	e009      	b.n	8000bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <_sbrk+0x64>)
 8000bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20010000 	.word	0x20010000
 8000bd4:	00000400 	.word	0x00000400
 8000bd8:	20000178 	.word	0x20000178
 8000bdc:	200085f8 	.word	0x200085f8

08000be0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <SystemInit+0x20>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <SystemInit+0x20>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c08:	f7ff ffea 	bl	8000be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c0e:	490d      	ldr	r1, [pc, #52]	; (8000c44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c10:	4a0d      	ldr	r2, [pc, #52]	; (8000c48 <LoopForever+0xe>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c24:	4c0a      	ldr	r4, [pc, #40]	; (8000c50 <LoopForever+0x16>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c32:	f005 fd63 	bl	80066fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c36:	f7ff fd6b 	bl	8000710 <main>

08000c3a <LoopForever>:

LoopForever:
    b LoopForever
 8000c3a:	e7fe      	b.n	8000c3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c3c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c48:	0800743c 	.word	0x0800743c
  ldr r2, =_sbss
 8000c4c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c50:	200085f4 	.word	0x200085f4

08000c54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC1_IRQHandler>

08000c56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 f91f 	bl	8000ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c66:	200f      	movs	r0, #15
 8000c68:	f000 f80e 	bl	8000c88 <HAL_InitTick>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	71fb      	strb	r3, [r7, #7]
 8000c76:	e001      	b.n	8000c7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c78:	f7ff fe6c 	bl	8000954 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c90:	2300      	movs	r3, #0
 8000c92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <HAL_InitTick+0x6c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d023      	beq.n	8000ce4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <HAL_InitTick+0x70>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <HAL_InitTick+0x6c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 f91d 	bl	8000ef2 <HAL_SYSTICK_Config>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d10f      	bne.n	8000cde <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0f      	cmp	r3, #15
 8000cc2:	d809      	bhi.n	8000cd8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f000 f8f5 	bl	8000eba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_InitTick+0x74>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	e007      	b.n	8000ce8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	73fb      	strb	r3, [r7, #15]
 8000cdc:	e004      	b.n	8000ce8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	e001      	b.n	8000ce8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000000c 	.word	0x2000000c
 8000cf8:	20000004 	.word	0x20000004
 8000cfc:	20000008 	.word	0x20000008

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	2000000c 	.word	0x2000000c
 8000d24:	2000017c 	.word	0x2000017c

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	2000017c 	.word	0x2000017c

08000d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f003 0307 	and.w	r3, r3, #7
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	; (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	; (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43d9      	mvns	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	4313      	orrs	r3, r2
         );
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3724      	adds	r7, #36	; 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
	...

08000e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e70:	d301      	bcc.n	8000e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00f      	b.n	8000e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <SysTick_Config+0x40>)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7e:	210f      	movs	r1, #15
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f7ff ff8e 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <SysTick_Config+0x40>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8e:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <SysTick_Config+0x40>)
 8000e90:	2207      	movs	r2, #7
 8000e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	e000e010 	.word	0xe000e010

08000ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff47 	bl	8000d40 <__NVIC_SetPriorityGrouping>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
 8000ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ecc:	f7ff ff5c 	bl	8000d88 <__NVIC_GetPriorityGrouping>
 8000ed0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	6978      	ldr	r0, [r7, #20]
 8000ed8:	f7ff ff8e 	bl	8000df8 <NVIC_EncodePriority>
 8000edc:	4602      	mov	r2, r0
 8000ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff5d 	bl	8000da4 <__NVIC_SetPriority>
}
 8000eea:	bf00      	nop
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b082      	sub	sp, #8
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ffb0 	bl	8000e60 <SysTick_Config>
 8000f00:	4603      	mov	r3, r0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
	...

08000f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b087      	sub	sp, #28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f1a:	e148      	b.n	80011ae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	2101      	movs	r1, #1
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	fa01 f303 	lsl.w	r3, r1, r3
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	f000 813a 	beq.w	80011a8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d005      	beq.n	8000f4c <HAL_GPIO_Init+0x40>
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d130      	bne.n	8000fae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	2203      	movs	r2, #3
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68da      	ldr	r2, [r3, #12]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f82:	2201      	movs	r2, #1
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	f003 0201 	and.w	r2, r3, #1
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	d017      	beq.n	8000fea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d123      	bne.n	800103e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	08da      	lsrs	r2, r3, #3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3208      	adds	r2, #8
 8000ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001002:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	220f      	movs	r2, #15
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	691a      	ldr	r2, [r3, #16]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	08da      	lsrs	r2, r3, #3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3208      	adds	r2, #8
 8001038:	6939      	ldr	r1, [r7, #16]
 800103a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0203 	and.w	r2, r3, #3
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800107a:	2b00      	cmp	r3, #0
 800107c:	f000 8094 	beq.w	80011a8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001080:	4b52      	ldr	r3, [pc, #328]	; (80011cc <HAL_GPIO_Init+0x2c0>)
 8001082:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001084:	4a51      	ldr	r2, [pc, #324]	; (80011cc <HAL_GPIO_Init+0x2c0>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6613      	str	r3, [r2, #96]	; 0x60
 800108c:	4b4f      	ldr	r3, [pc, #316]	; (80011cc <HAL_GPIO_Init+0x2c0>)
 800108e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001098:	4a4d      	ldr	r2, [pc, #308]	; (80011d0 <HAL_GPIO_Init+0x2c4>)
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	089b      	lsrs	r3, r3, #2
 800109e:	3302      	adds	r3, #2
 80010a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	220f      	movs	r2, #15
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010c2:	d00d      	beq.n	80010e0 <HAL_GPIO_Init+0x1d4>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a43      	ldr	r2, [pc, #268]	; (80011d4 <HAL_GPIO_Init+0x2c8>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d007      	beq.n	80010dc <HAL_GPIO_Init+0x1d0>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a42      	ldr	r2, [pc, #264]	; (80011d8 <HAL_GPIO_Init+0x2cc>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d101      	bne.n	80010d8 <HAL_GPIO_Init+0x1cc>
 80010d4:	2302      	movs	r3, #2
 80010d6:	e004      	b.n	80010e2 <HAL_GPIO_Init+0x1d6>
 80010d8:	2307      	movs	r3, #7
 80010da:	e002      	b.n	80010e2 <HAL_GPIO_Init+0x1d6>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <HAL_GPIO_Init+0x1d6>
 80010e0:	2300      	movs	r3, #0
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	f002 0203 	and.w	r2, r2, #3
 80010e8:	0092      	lsls	r2, r2, #2
 80010ea:	4093      	lsls	r3, r2
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010f2:	4937      	ldr	r1, [pc, #220]	; (80011d0 <HAL_GPIO_Init+0x2c4>)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001100:	4b36      	ldr	r3, [pc, #216]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001124:	4a2d      	ldr	r2, [pc, #180]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800112a:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800114e:	4a23      	ldr	r2, [pc, #140]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001154:	4b21      	ldr	r3, [pc, #132]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001178:	4a18      	ldr	r2, [pc, #96]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011a2:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <HAL_GPIO_Init+0x2d0>)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3301      	adds	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	fa22 f303 	lsr.w	r3, r2, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f47f aeaf 	bne.w	8000f1c <HAL_GPIO_Init+0x10>
  }
}
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40010000 	.word	0x40010000
 80011d4:	48000400 	.word	0x48000400
 80011d8:	48000800 	.word	0x48000800
 80011dc:	40010400 	.word	0x40010400

080011e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40007000 	.word	0x40007000

080011fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800120a:	d130      	bne.n	800126e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800120c:	4b23      	ldr	r3, [pc, #140]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001218:	d038      	beq.n	800128c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800121a:	4b20      	ldr	r3, [pc, #128]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001222:	4a1e      	ldr	r2, [pc, #120]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001224:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001228:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2232      	movs	r2, #50	; 0x32
 8001230:	fb02 f303 	mul.w	r3, r2, r3
 8001234:	4a1b      	ldr	r2, [pc, #108]	; (80012a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	0c9b      	lsrs	r3, r3, #18
 800123c:	3301      	adds	r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001240:	e002      	b.n	8001248 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	3b01      	subs	r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001254:	d102      	bne.n	800125c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1f2      	bne.n	8001242 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001268:	d110      	bne.n	800128c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e00f      	b.n	800128e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800127a:	d007      	beq.n	800128c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001284:	4a05      	ldr	r2, [pc, #20]	; (800129c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800128a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40007000 	.word	0x40007000
 80012a0:	20000004 	.word	0x20000004
 80012a4:	431bde83 	.word	0x431bde83

080012a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	f000 bc02 	b.w	8001ac0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012bc:	4b96      	ldr	r3, [pc, #600]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f003 030c 	and.w	r3, r3, #12
 80012c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012c6:	4b94      	ldr	r3, [pc, #592]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0310 	and.w	r3, r3, #16
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80e4 	beq.w	80014a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d007      	beq.n	80012f4 <HAL_RCC_OscConfig+0x4c>
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	2b0c      	cmp	r3, #12
 80012e8:	f040 808b 	bne.w	8001402 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	f040 8087 	bne.w	8001402 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012f4:	4b88      	ldr	r3, [pc, #544]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <HAL_RCC_OscConfig+0x64>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e3d9      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a1a      	ldr	r2, [r3, #32]
 8001310:	4b81      	ldr	r3, [pc, #516]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0308 	and.w	r3, r3, #8
 8001318:	2b00      	cmp	r3, #0
 800131a:	d004      	beq.n	8001326 <HAL_RCC_OscConfig+0x7e>
 800131c:	4b7e      	ldr	r3, [pc, #504]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001324:	e005      	b.n	8001332 <HAL_RCC_OscConfig+0x8a>
 8001326:	4b7c      	ldr	r3, [pc, #496]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001328:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001332:	4293      	cmp	r3, r2
 8001334:	d223      	bcs.n	800137e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	4618      	mov	r0, r3
 800133c:	f000 fd8c 	bl	8001e58 <RCC_SetFlashLatencyFromMSIRange>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e3ba      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800134a:	4b73      	ldr	r3, [pc, #460]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a72      	ldr	r2, [pc, #456]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001350:	f043 0308 	orr.w	r3, r3, #8
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	4b70      	ldr	r3, [pc, #448]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	496d      	ldr	r1, [pc, #436]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001364:	4313      	orrs	r3, r2
 8001366:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001368:	4b6b      	ldr	r3, [pc, #428]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	021b      	lsls	r3, r3, #8
 8001376:	4968      	ldr	r1, [pc, #416]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
 800137c:	e025      	b.n	80013ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800137e:	4b66      	ldr	r3, [pc, #408]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a65      	ldr	r2, [pc, #404]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001384:	f043 0308 	orr.w	r3, r3, #8
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	4b63      	ldr	r3, [pc, #396]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	4960      	ldr	r1, [pc, #384]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001398:	4313      	orrs	r3, r2
 800139a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800139c:	4b5e      	ldr	r3, [pc, #376]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	495b      	ldr	r1, [pc, #364]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d109      	bne.n	80013ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 fd4c 	bl	8001e58 <RCC_SetFlashLatencyFromMSIRange>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e37a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013ca:	f000 fc81 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 80013ce:	4602      	mov	r2, r0
 80013d0:	4b51      	ldr	r3, [pc, #324]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	091b      	lsrs	r3, r3, #4
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	4950      	ldr	r1, [pc, #320]	; (800151c <HAL_RCC_OscConfig+0x274>)
 80013dc:	5ccb      	ldrb	r3, [r1, r3]
 80013de:	f003 031f 	and.w	r3, r3, #31
 80013e2:	fa22 f303 	lsr.w	r3, r2, r3
 80013e6:	4a4e      	ldr	r2, [pc, #312]	; (8001520 <HAL_RCC_OscConfig+0x278>)
 80013e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013ea:	4b4e      	ldr	r3, [pc, #312]	; (8001524 <HAL_RCC_OscConfig+0x27c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fc4a 	bl	8000c88 <HAL_InitTick>
 80013f4:	4603      	mov	r3, r0
 80013f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d052      	beq.n	80014a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	e35e      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d032      	beq.n	8001470 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800140a:	4b43      	ldr	r3, [pc, #268]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a42      	ldr	r2, [pc, #264]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001416:	f7ff fc87 	bl	8000d28 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800141e:	f7ff fc83 	bl	8000d28 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e347      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001430:	4b39      	ldr	r3, [pc, #228]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800143c:	4b36      	ldr	r3, [pc, #216]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a35      	ldr	r2, [pc, #212]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001442:	f043 0308 	orr.w	r3, r3, #8
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b33      	ldr	r3, [pc, #204]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	4930      	ldr	r1, [pc, #192]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800145a:	4b2f      	ldr	r3, [pc, #188]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	492b      	ldr	r1, [pc, #172]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800146a:	4313      	orrs	r3, r2
 800146c:	604b      	str	r3, [r1, #4]
 800146e:	e01a      	b.n	80014a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001470:	4b29      	ldr	r3, [pc, #164]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a28      	ldr	r2, [pc, #160]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001476:	f023 0301 	bic.w	r3, r3, #1
 800147a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800147c:	f7ff fc54 	bl	8000d28 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001484:	f7ff fc50 	bl	8000d28 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e314      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001496:	4b20      	ldr	r3, [pc, #128]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x1dc>
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d073      	beq.n	800159a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	2b08      	cmp	r3, #8
 80014b6:	d005      	beq.n	80014c4 <HAL_RCC_OscConfig+0x21c>
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	2b0c      	cmp	r3, #12
 80014bc:	d10e      	bne.n	80014dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d10b      	bne.n	80014dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d063      	beq.n	8001598 <HAL_RCC_OscConfig+0x2f0>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d15f      	bne.n	8001598 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e2f1      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e4:	d106      	bne.n	80014f4 <HAL_RCC_OscConfig+0x24c>
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 80014ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e025      	b.n	8001540 <HAL_RCC_OscConfig+0x298>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014fc:	d114      	bne.n	8001528 <HAL_RCC_OscConfig+0x280>
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001504:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	4b03      	ldr	r3, [pc, #12]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a02      	ldr	r2, [pc, #8]	; (8001518 <HAL_RCC_OscConfig+0x270>)
 8001510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001514:	6013      	str	r3, [r2, #0]
 8001516:	e013      	b.n	8001540 <HAL_RCC_OscConfig+0x298>
 8001518:	40021000 	.word	0x40021000
 800151c:	080073b0 	.word	0x080073b0
 8001520:	20000004 	.word	0x20000004
 8001524:	20000008 	.word	0x20000008
 8001528:	4ba0      	ldr	r3, [pc, #640]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a9f      	ldr	r2, [pc, #636]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800152e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b9d      	ldr	r3, [pc, #628]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a9c      	ldr	r2, [pc, #624]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800153a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d013      	beq.n	8001570 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001548:	f7ff fbee 	bl	8000d28 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001550:	f7ff fbea 	bl	8000d28 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	; 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e2ae      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001562:	4b92      	ldr	r3, [pc, #584]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x2a8>
 800156e:	e014      	b.n	800159a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7ff fbda 	bl	8000d28 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff fbd6 	bl	8000d28 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	; 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e29a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800158a:	4b88      	ldr	r3, [pc, #544]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x2d0>
 8001596:	e000      	b.n	800159a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d060      	beq.n	8001668 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	2b04      	cmp	r3, #4
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_OscConfig+0x310>
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2b0c      	cmp	r3, #12
 80015b0:	d119      	bne.n	80015e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d116      	bne.n	80015e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015b8:	4b7c      	ldr	r3, [pc, #496]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_OscConfig+0x328>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e277      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d0:	4b76      	ldr	r3, [pc, #472]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	061b      	lsls	r3, r3, #24
 80015de:	4973      	ldr	r1, [pc, #460]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e4:	e040      	b.n	8001668 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d023      	beq.n	8001636 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ee:	4b6f      	ldr	r3, [pc, #444]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a6e      	ldr	r2, [pc, #440]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80015f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fa:	f7ff fb95 	bl	8000d28 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff fb91 	bl	8000d28 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e255      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001614:	4b65      	ldr	r3, [pc, #404]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001620:	4b62      	ldr	r3, [pc, #392]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	061b      	lsls	r3, r3, #24
 800162e:	495f      	ldr	r1, [pc, #380]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
 8001634:	e018      	b.n	8001668 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001636:	4b5d      	ldr	r3, [pc, #372]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a5c      	ldr	r2, [pc, #368]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800163c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff fb71 	bl	8000d28 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164a:	f7ff fb6d 	bl	8000d28 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e231      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800165c:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1f0      	bne.n	800164a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b00      	cmp	r3, #0
 8001672:	d03c      	beq.n	80016ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d01c      	beq.n	80016b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800167c:	4b4b      	ldr	r3, [pc, #300]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800167e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001682:	4a4a      	ldr	r2, [pc, #296]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168c:	f7ff fb4c 	bl	8000d28 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001694:	f7ff fb48 	bl	8000d28 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e20c      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016a6:	4b41      	ldr	r3, [pc, #260]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80016a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0ef      	beq.n	8001694 <HAL_RCC_OscConfig+0x3ec>
 80016b4:	e01b      	b.n	80016ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b6:	4b3d      	ldr	r3, [pc, #244]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80016b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016bc:	4a3b      	ldr	r2, [pc, #236]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c6:	f7ff fb2f 	bl	8000d28 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ce:	f7ff fb2b 	bl	8000d28 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e1ef      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016e0:	4b32      	ldr	r3, [pc, #200]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80016e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1ef      	bne.n	80016ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 80a6 	beq.w	8001848 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fc:	2300      	movs	r3, #0
 80016fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001700:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10d      	bne.n	8001728 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170c:	4b27      	ldr	r3, [pc, #156]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	4a26      	ldr	r2, [pc, #152]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001716:	6593      	str	r3, [r2, #88]	; 0x58
 8001718:	4b24      	ldr	r3, [pc, #144]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800171a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001724:	2301      	movs	r3, #1
 8001726:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001728:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <HAL_RCC_OscConfig+0x508>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001730:	2b00      	cmp	r3, #0
 8001732:	d118      	bne.n	8001766 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001734:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <HAL_RCC_OscConfig+0x508>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a1d      	ldr	r2, [pc, #116]	; (80017b0 <HAL_RCC_OscConfig+0x508>)
 800173a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001740:	f7ff faf2 	bl	8000d28 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001748:	f7ff faee 	bl	8000d28 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e1b2      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800175a:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_RCC_OscConfig+0x508>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f0      	beq.n	8001748 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d108      	bne.n	8001780 <HAL_RCC_OscConfig+0x4d8>
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001774:	4a0d      	ldr	r2, [pc, #52]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800177e:	e029      	b.n	80017d4 <HAL_RCC_OscConfig+0x52c>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b05      	cmp	r3, #5
 8001786:	d115      	bne.n	80017b4 <HAL_RCC_OscConfig+0x50c>
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800178a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178e:	4a07      	ldr	r2, [pc, #28]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179e:	4a03      	ldr	r2, [pc, #12]	; (80017ac <HAL_RCC_OscConfig+0x504>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017a8:	e014      	b.n	80017d4 <HAL_RCC_OscConfig+0x52c>
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40007000 	.word	0x40007000
 80017b4:	4b9a      	ldr	r3, [pc, #616]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 80017b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ba:	4a99      	ldr	r2, [pc, #612]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c4:	4b96      	ldr	r3, [pc, #600]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ca:	4a95      	ldr	r2, [pc, #596]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 80017cc:	f023 0304 	bic.w	r3, r3, #4
 80017d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d016      	beq.n	800180a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017dc:	f7ff faa4 	bl	8000d28 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e2:	e00a      	b.n	80017fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e4:	f7ff faa0 	bl	8000d28 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e162      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017fa:	4b89      	ldr	r3, [pc, #548]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 80017fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0ed      	beq.n	80017e4 <HAL_RCC_OscConfig+0x53c>
 8001808:	e015      	b.n	8001836 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180a:	f7ff fa8d 	bl	8000d28 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001810:	e00a      	b.n	8001828 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001812:	f7ff fa89 	bl	8000d28 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001820:	4293      	cmp	r3, r2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e14b      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001828:	4b7d      	ldr	r3, [pc, #500]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 800182a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1ed      	bne.n	8001812 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001836:	7ffb      	ldrb	r3, [r7, #31]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800183c:	4b78      	ldr	r3, [pc, #480]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001840:	4a77      	ldr	r2, [pc, #476]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 8001842:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001846:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0320 	and.w	r3, r3, #32
 8001850:	2b00      	cmp	r3, #0
 8001852:	d03c      	beq.n	80018ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	2b00      	cmp	r3, #0
 800185a:	d01c      	beq.n	8001896 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800185c:	4b70      	ldr	r3, [pc, #448]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 800185e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001862:	4a6f      	ldr	r2, [pc, #444]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800186c:	f7ff fa5c 	bl	8000d28 <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001874:	f7ff fa58 	bl	8000d28 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e11c      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001886:	4b66      	ldr	r3, [pc, #408]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 8001888:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0ef      	beq.n	8001874 <HAL_RCC_OscConfig+0x5cc>
 8001894:	e01b      	b.n	80018ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001896:	4b62      	ldr	r3, [pc, #392]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 8001898:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800189c:	4a60      	ldr	r2, [pc, #384]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 800189e:	f023 0301 	bic.w	r3, r3, #1
 80018a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a6:	f7ff fa3f 	bl	8000d28 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018ae:	f7ff fa3b 	bl	8000d28 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e0ff      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018c0:	4b57      	ldr	r3, [pc, #348]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 80018c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1ef      	bne.n	80018ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80f3 	beq.w	8001abe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	2b02      	cmp	r3, #2
 80018de:	f040 80c9 	bne.w	8001a74 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018e2:	4b4f      	ldr	r3, [pc, #316]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f003 0203 	and.w	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d12c      	bne.n	8001950 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	3b01      	subs	r3, #1
 8001902:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d123      	bne.n	8001950 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001912:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001914:	429a      	cmp	r2, r3
 8001916:	d11b      	bne.n	8001950 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001922:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d113      	bne.n	8001950 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001932:	085b      	lsrs	r3, r3, #1
 8001934:	3b01      	subs	r3, #1
 8001936:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d109      	bne.n	8001950 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	085b      	lsrs	r3, r3, #1
 8001948:	3b01      	subs	r3, #1
 800194a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800194c:	429a      	cmp	r2, r3
 800194e:	d06b      	beq.n	8001a28 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	2b0c      	cmp	r3, #12
 8001954:	d062      	beq.n	8001a1c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001956:	4b32      	ldr	r3, [pc, #200]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e0ac      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001966:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a2d      	ldr	r2, [pc, #180]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 800196c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001970:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001972:	f7ff f9d9 	bl	8000d28 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197a:	f7ff f9d5 	bl	8000d28 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e099      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f0      	bne.n	800197a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001998:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HAL_RCC_OscConfig+0x77c>)
 800199e:	4013      	ands	r3, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019a8:	3a01      	subs	r2, #1
 80019aa:	0112      	lsls	r2, r2, #4
 80019ac:	4311      	orrs	r1, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019b2:	0212      	lsls	r2, r2, #8
 80019b4:	4311      	orrs	r1, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019ba:	0852      	lsrs	r2, r2, #1
 80019bc:	3a01      	subs	r2, #1
 80019be:	0552      	lsls	r2, r2, #21
 80019c0:	4311      	orrs	r1, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019c6:	0852      	lsrs	r2, r2, #1
 80019c8:	3a01      	subs	r2, #1
 80019ca:	0652      	lsls	r2, r2, #25
 80019cc:	4311      	orrs	r1, r2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019d2:	06d2      	lsls	r2, r2, #27
 80019d4:	430a      	orrs	r2, r1
 80019d6:	4912      	ldr	r1, [pc, #72]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 80019e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4a0c      	ldr	r2, [pc, #48]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 80019ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019f4:	f7ff f998 	bl	8000d28 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fc:	f7ff f994 	bl	8000d28 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e058      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a0e:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <HAL_RCC_OscConfig+0x778>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a1a:	e050      	b.n	8001abe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e04f      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
 8001a20:	40021000 	.word	0x40021000
 8001a24:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a28:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <HAL_RCC_OscConfig+0x820>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d144      	bne.n	8001abe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <HAL_RCC_OscConfig+0x820>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a23      	ldr	r2, [pc, #140]	; (8001ac8 <HAL_RCC_OscConfig+0x820>)
 8001a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a40:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <HAL_RCC_OscConfig+0x820>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4a20      	ldr	r2, [pc, #128]	; (8001ac8 <HAL_RCC_OscConfig+0x820>)
 8001a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a4c:	f7ff f96c 	bl	8000d28 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff f968 	bl	8000d28 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e02c      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a66:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_RCC_OscConfig+0x820>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x7ac>
 8001a72:	e024      	b.n	8001abe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d01f      	beq.n	8001aba <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <HAL_RCC_OscConfig+0x820>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <HAL_RCC_OscConfig+0x820>)
 8001a80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff f94f 	bl	8000d28 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7ff f94b 	bl	8000d28 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e00f      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_RCC_OscConfig+0x820>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001aac:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_RCC_OscConfig+0x820>)
 8001aae:	68da      	ldr	r2, [r3, #12]
 8001ab0:	4905      	ldr	r1, [pc, #20]	; (8001ac8 <HAL_RCC_OscConfig+0x820>)
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_RCC_OscConfig+0x824>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60cb      	str	r3, [r1, #12]
 8001ab8:	e001      	b.n	8001abe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3720      	adds	r7, #32
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	feeefffc 	.word	0xfeeefffc

08001ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0e7      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b75      	ldr	r3, [pc, #468]	; (8001cbc <HAL_RCC_ClockConfig+0x1ec>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d910      	bls.n	8001b14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b72      	ldr	r3, [pc, #456]	; (8001cbc <HAL_RCC_ClockConfig+0x1ec>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 0207 	bic.w	r2, r3, #7
 8001afa:	4970      	ldr	r1, [pc, #448]	; (8001cbc <HAL_RCC_ClockConfig+0x1ec>)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b02:	4b6e      	ldr	r3, [pc, #440]	; (8001cbc <HAL_RCC_ClockConfig+0x1ec>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0cf      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d010      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	4b66      	ldr	r3, [pc, #408]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d908      	bls.n	8001b42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b30:	4b63      	ldr	r3, [pc, #396]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4960      	ldr	r1, [pc, #384]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d04c      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b56:	4b5a      	ldr	r3, [pc, #360]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d121      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e0a6      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b6e:	4b54      	ldr	r3, [pc, #336]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d115      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e09a      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b86:	4b4e      	ldr	r3, [pc, #312]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d109      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e08e      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b96:	4b4a      	ldr	r3, [pc, #296]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e086      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ba6:	4b46      	ldr	r3, [pc, #280]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f023 0203 	bic.w	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4943      	ldr	r1, [pc, #268]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bb8:	f7ff f8b6 	bl	8000d28 <HAL_GetTick>
 8001bbc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc0:	f7ff f8b2 	bl	8000d28 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e06e      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	4b3a      	ldr	r3, [pc, #232]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 020c 	and.w	r2, r3, #12
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d1eb      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d010      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	4b31      	ldr	r3, [pc, #196]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d208      	bcs.n	8001c16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c04:	4b2e      	ldr	r3, [pc, #184]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	492b      	ldr	r1, [pc, #172]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c16:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <HAL_RCC_ClockConfig+0x1ec>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d210      	bcs.n	8001c46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <HAL_RCC_ClockConfig+0x1ec>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 0207 	bic.w	r2, r3, #7
 8001c2c:	4923      	ldr	r1, [pc, #140]	; (8001cbc <HAL_RCC_ClockConfig+0x1ec>)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c34:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <HAL_RCC_ClockConfig+0x1ec>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d001      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e036      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0304 	and.w	r3, r3, #4
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d008      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c52:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	4918      	ldr	r1, [pc, #96]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d009      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c70:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4910      	ldr	r1, [pc, #64]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c84:	f000 f824 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	490b      	ldr	r1, [pc, #44]	; (8001cc4 <HAL_RCC_ClockConfig+0x1f4>)
 8001c96:	5ccb      	ldrb	r3, [r1, r3]
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca0:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ca2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_ClockConfig+0x1fc>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe ffed 	bl	8000c88 <HAL_InitTick>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cb2:	7afb      	ldrb	r3, [r7, #11]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40022000 	.word	0x40022000
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	080073b0 	.word	0x080073b0
 8001cc8:	20000004 	.word	0x20000004
 8001ccc:	20000008 	.word	0x20000008

08001cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cde:	4b3e      	ldr	r3, [pc, #248]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce8:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_GetSysClockFreq+0x34>
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	d121      	bne.n	8001d42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d11e      	bne.n	8001d42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d04:	4b34      	ldr	r3, [pc, #208]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d107      	bne.n	8001d20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d10:	4b31      	ldr	r3, [pc, #196]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d16:	0a1b      	lsrs	r3, r3, #8
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	e005      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d20:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	091b      	lsrs	r3, r3, #4
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d2c:	4a2b      	ldr	r2, [pc, #172]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10d      	bne.n	8001d58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d40:	e00a      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d102      	bne.n	8001d4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d48:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d4a:	61bb      	str	r3, [r7, #24]
 8001d4c:	e004      	b.n	8001d58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	2b0c      	cmp	r3, #12
 8001d5c:	d134      	bne.n	8001dc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d5e:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d003      	beq.n	8001d76 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d003      	beq.n	8001d7c <HAL_RCC_GetSysClockFreq+0xac>
 8001d74:	e005      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d78:	617b      	str	r3, [r7, #20]
      break;
 8001d7a:	e005      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d7c:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d7e:	617b      	str	r3, [r7, #20]
      break;
 8001d80:	e002      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	617b      	str	r3, [r7, #20]
      break;
 8001d86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	3301      	adds	r3, #1
 8001d94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	0a1b      	lsrs	r3, r3, #8
 8001d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	fb03 f202 	mul.w	r2, r3, r2
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	0e5b      	lsrs	r3, r3, #25
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	3301      	adds	r3, #1
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dc8:	69bb      	ldr	r3, [r7, #24]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	080073c8 	.word	0x080073c8
 8001de0:	00f42400 	.word	0x00f42400
 8001de4:	007a1200 	.word	0x007a1200

08001de8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dec:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000004 	.word	0x20000004

08001e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e04:	f7ff fff0 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	4904      	ldr	r1, [pc, #16]	; (8001e28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e16:	5ccb      	ldrb	r3, [r1, r3]
 8001e18:	f003 031f 	and.w	r3, r3, #31
 8001e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000
 8001e28:	080073c0 	.word	0x080073c0

08001e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e30:	f7ff ffda 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	0adb      	lsrs	r3, r3, #11
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4904      	ldr	r1, [pc, #16]	; (8001e54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000
 8001e54:	080073c0 	.word	0x080073c0

08001e58 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e60:	2300      	movs	r3, #0
 8001e62:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e64:	4b2a      	ldr	r3, [pc, #168]	; (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e70:	f7ff f9b6 	bl	80011e0 <HAL_PWREx_GetVoltageRange>
 8001e74:	6178      	str	r0, [r7, #20]
 8001e76:	e014      	b.n	8001ea2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e78:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7c:	4a24      	ldr	r2, [pc, #144]	; (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e82:	6593      	str	r3, [r2, #88]	; 0x58
 8001e84:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e90:	f7ff f9a6 	bl	80011e0 <HAL_PWREx_GetVoltageRange>
 8001e94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e96:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9a:	4a1d      	ldr	r2, [pc, #116]	; (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ea8:	d10b      	bne.n	8001ec2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b80      	cmp	r3, #128	; 0x80
 8001eae:	d919      	bls.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2ba0      	cmp	r3, #160	; 0xa0
 8001eb4:	d902      	bls.n	8001ebc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	e013      	b.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	e010      	b.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b80      	cmp	r3, #128	; 0x80
 8001ec6:	d902      	bls.n	8001ece <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ec8:	2303      	movs	r3, #3
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	e00a      	b.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b80      	cmp	r3, #128	; 0x80
 8001ed2:	d102      	bne.n	8001eda <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	e004      	b.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b70      	cmp	r3, #112	; 0x70
 8001ede:	d101      	bne.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f023 0207 	bic.w	r2, r3, #7
 8001eec:	4909      	ldr	r1, [pc, #36]	; (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ef4:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d001      	beq.n	8001f06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40022000 	.word	0x40022000

08001f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f20:	2300      	movs	r3, #0
 8001f22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f24:	2300      	movs	r3, #0
 8001f26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d031      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f3c:	d01a      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001f3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f42:	d814      	bhi.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d009      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f4c:	d10f      	bne.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001f4e:	4b5d      	ldr	r3, [pc, #372]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	4a5c      	ldr	r2, [pc, #368]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f58:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f5a:	e00c      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	2100      	movs	r1, #0
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 f9ce 	bl	8002304 <RCCEx_PLLSAI1_Config>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f6c:	e003      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	74fb      	strb	r3, [r7, #19]
      break;
 8001f72:	e000      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f76:	7cfb      	ldrb	r3, [r7, #19]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10b      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f7c:	4b51      	ldr	r3, [pc, #324]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8a:	494e      	ldr	r1, [pc, #312]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f92:	e001      	b.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f94:	7cfb      	ldrb	r3, [r7, #19]
 8001f96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 809e 	beq.w	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001faa:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00d      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc0:	4b40      	ldr	r3, [pc, #256]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc4:	4a3f      	ldr	r2, [pc, #252]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fca:	6593      	str	r3, [r2, #88]	; 0x58
 8001fcc:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fdc:	4b3a      	ldr	r3, [pc, #232]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a39      	ldr	r2, [pc, #228]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fe8:	f7fe fe9e 	bl	8000d28 <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fee:	e009      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff0:	f7fe fe9a 	bl	8000d28 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d902      	bls.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	74fb      	strb	r3, [r7, #19]
        break;
 8002002:	e005      	b.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002004:	4b30      	ldr	r3, [pc, #192]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0ef      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002010:	7cfb      	ldrb	r3, [r7, #19]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d15a      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002016:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002020:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01e      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	429a      	cmp	r2, r3
 8002030:	d019      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002032:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800203c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800203e:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002044:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800204a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002054:	4a1b      	ldr	r2, [pc, #108]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800205e:	4a19      	ldr	r2, [pc, #100]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d016      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7fe fe5a 	bl	8000d28 <HAL_GetTick>
 8002074:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002076:	e00b      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002078:	f7fe fe56 	bl	8000d28 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	; 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d902      	bls.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	74fb      	strb	r3, [r7, #19]
            break;
 800208e:	e006      	b.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0ec      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800209e:	7cfb      	ldrb	r3, [r7, #19]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10b      	bne.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b2:	4904      	ldr	r1, [pc, #16]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020ba:	e009      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020bc:	7cfb      	ldrb	r3, [r7, #19]
 80020be:	74bb      	strb	r3, [r7, #18]
 80020c0:	e006      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020cc:	7cfb      	ldrb	r3, [r7, #19]
 80020ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020d0:	7c7b      	ldrb	r3, [r7, #17]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d105      	bne.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d6:	4b8a      	ldr	r3, [pc, #552]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	4a89      	ldr	r2, [pc, #548]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00a      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ee:	4b84      	ldr	r3, [pc, #528]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f4:	f023 0203 	bic.w	r2, r3, #3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4980      	ldr	r1, [pc, #512]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00a      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002110:	4b7b      	ldr	r3, [pc, #492]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002116:	f023 020c 	bic.w	r2, r3, #12
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	4978      	ldr	r1, [pc, #480]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002120:	4313      	orrs	r3, r2
 8002122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002132:	4b73      	ldr	r3, [pc, #460]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002138:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	496f      	ldr	r1, [pc, #444]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002154:	4b6a      	ldr	r3, [pc, #424]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002162:	4967      	ldr	r1, [pc, #412]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002176:	4b62      	ldr	r3, [pc, #392]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002184:	495e      	ldr	r1, [pc, #376]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002198:	4b59      	ldr	r3, [pc, #356]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a6:	4956      	ldr	r1, [pc, #344]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021ba:	4b51      	ldr	r3, [pc, #324]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c8:	494d      	ldr	r1, [pc, #308]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d028      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021dc:	4b48      	ldr	r3, [pc, #288]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4945      	ldr	r1, [pc, #276]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021fa:	d106      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021fc:	4b40      	ldr	r3, [pc, #256]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a3f      	ldr	r2, [pc, #252]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002206:	60d3      	str	r3, [r2, #12]
 8002208:	e011      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002212:	d10c      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3304      	adds	r3, #4
 8002218:	2101      	movs	r1, #1
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f872 	bl	8002304 <RCCEx_PLLSAI1_Config>
 8002220:	4603      	mov	r3, r0
 8002222:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002224:	7cfb      	ldrb	r3, [r7, #19]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800222a:	7cfb      	ldrb	r3, [r7, #19]
 800222c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d028      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800223a:	4b31      	ldr	r3, [pc, #196]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800223c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002240:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	492d      	ldr	r1, [pc, #180]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002254:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002258:	d106      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800225a:	4b29      	ldr	r3, [pc, #164]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	4a28      	ldr	r2, [pc, #160]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002264:	60d3      	str	r3, [r2, #12]
 8002266:	e011      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002270:	d10c      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3304      	adds	r3, #4
 8002276:	2101      	movs	r1, #1
 8002278:	4618      	mov	r0, r3
 800227a:	f000 f843 	bl	8002304 <RCCEx_PLLSAI1_Config>
 800227e:	4603      	mov	r3, r0
 8002280:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002282:	7cfb      	ldrb	r3, [r7, #19]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d01c      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002298:	4b19      	ldr	r3, [pc, #100]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a6:	4916      	ldr	r1, [pc, #88]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022b6:	d10c      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3304      	adds	r3, #4
 80022bc:	2102      	movs	r1, #2
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f820 	bl	8002304 <RCCEx_PLLSAI1_Config>
 80022c4:	4603      	mov	r3, r0
 80022c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022c8:	7cfb      	ldrb	r3, [r7, #19]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80022ce:	7cfb      	ldrb	r3, [r7, #19]
 80022d0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00a      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022de:	4b08      	ldr	r3, [pc, #32]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ec:	4904      	ldr	r1, [pc, #16]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000

08002304 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002312:	4b74      	ldr	r3, [pc, #464]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d018      	beq.n	8002350 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800231e:	4b71      	ldr	r3, [pc, #452]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f003 0203 	and.w	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d10d      	bne.n	800234a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
       ||
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002336:	4b6b      	ldr	r3, [pc, #428]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	091b      	lsrs	r3, r3, #4
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
       ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d047      	beq.n	80023da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	e044      	b.n	80023da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d018      	beq.n	800238a <RCCEx_PLLSAI1_Config+0x86>
 8002358:	2b03      	cmp	r3, #3
 800235a:	d825      	bhi.n	80023a8 <RCCEx_PLLSAI1_Config+0xa4>
 800235c:	2b01      	cmp	r3, #1
 800235e:	d002      	beq.n	8002366 <RCCEx_PLLSAI1_Config+0x62>
 8002360:	2b02      	cmp	r3, #2
 8002362:	d009      	beq.n	8002378 <RCCEx_PLLSAI1_Config+0x74>
 8002364:	e020      	b.n	80023a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002366:	4b5f      	ldr	r3, [pc, #380]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d11d      	bne.n	80023ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002376:	e01a      	b.n	80023ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002378:	4b5a      	ldr	r3, [pc, #360]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002380:	2b00      	cmp	r3, #0
 8002382:	d116      	bne.n	80023b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002388:	e013      	b.n	80023b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800238a:	4b56      	ldr	r3, [pc, #344]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10f      	bne.n	80023b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002396:	4b53      	ldr	r3, [pc, #332]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d109      	bne.n	80023b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023a6:	e006      	b.n	80023b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	73fb      	strb	r3, [r7, #15]
      break;
 80023ac:	e004      	b.n	80023b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023ae:	bf00      	nop
 80023b0:	e002      	b.n	80023b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023b2:	bf00      	nop
 80023b4:	e000      	b.n	80023b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10d      	bne.n	80023da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023be:	4b49      	ldr	r3, [pc, #292]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	430b      	orrs	r3, r1
 80023d4:	4943      	ldr	r1, [pc, #268]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d17c      	bne.n	80024da <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023e0:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ec:	f7fe fc9c 	bl	8000d28 <HAL_GetTick>
 80023f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023f2:	e009      	b.n	8002408 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023f4:	f7fe fc98 	bl	8000d28 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d902      	bls.n	8002408 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	73fb      	strb	r3, [r7, #15]
        break;
 8002406:	e005      	b.n	8002414 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002408:	4b36      	ldr	r3, [pc, #216]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1ef      	bne.n	80023f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d15f      	bne.n	80024da <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d110      	bne.n	8002442 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002420:	4b30      	ldr	r3, [pc, #192]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002428:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6892      	ldr	r2, [r2, #8]
 8002430:	0211      	lsls	r1, r2, #8
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68d2      	ldr	r2, [r2, #12]
 8002436:	06d2      	lsls	r2, r2, #27
 8002438:	430a      	orrs	r2, r1
 800243a:	492a      	ldr	r1, [pc, #168]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800243c:	4313      	orrs	r3, r2
 800243e:	610b      	str	r3, [r1, #16]
 8002440:	e027      	b.n	8002492 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d112      	bne.n	800246e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002448:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002450:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6892      	ldr	r2, [r2, #8]
 8002458:	0211      	lsls	r1, r2, #8
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6912      	ldr	r2, [r2, #16]
 800245e:	0852      	lsrs	r2, r2, #1
 8002460:	3a01      	subs	r2, #1
 8002462:	0552      	lsls	r2, r2, #21
 8002464:	430a      	orrs	r2, r1
 8002466:	491f      	ldr	r1, [pc, #124]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002468:	4313      	orrs	r3, r2
 800246a:	610b      	str	r3, [r1, #16]
 800246c:	e011      	b.n	8002492 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800246e:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002476:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6892      	ldr	r2, [r2, #8]
 800247e:	0211      	lsls	r1, r2, #8
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6952      	ldr	r2, [r2, #20]
 8002484:	0852      	lsrs	r2, r2, #1
 8002486:	3a01      	subs	r2, #1
 8002488:	0652      	lsls	r2, r2, #25
 800248a:	430a      	orrs	r2, r1
 800248c:	4915      	ldr	r1, [pc, #84]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800248e:	4313      	orrs	r3, r2
 8002490:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a13      	ldr	r2, [pc, #76]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002498:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800249c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249e:	f7fe fc43 	bl	8000d28 <HAL_GetTick>
 80024a2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024a4:	e009      	b.n	80024ba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024a6:	f7fe fc3f 	bl	8000d28 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d902      	bls.n	80024ba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	73fb      	strb	r3, [r7, #15]
          break;
 80024b8:	e005      	b.n	80024c6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0ef      	beq.n	80024a6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d106      	bne.n	80024da <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000

080024e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e040      	b.n	800257c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe fa4a 	bl	80009a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2224      	movs	r2, #36	; 0x24
 8002514:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0201 	bic.w	r2, r2, #1
 8002524:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 faf2 	bl	8002b18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f8c3 	bl	80026c0 <UART_SetConfig>
 800253a:	4603      	mov	r3, r0
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e01b      	b.n	800257c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002552:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689a      	ldr	r2, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002562:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fb71 	bl	8002c5c <UART_CheckIdleState>
 800257a:	4603      	mov	r3, r0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	; 0x28
 8002588:	af02      	add	r7, sp, #8
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	4613      	mov	r3, r2
 8002592:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002598:	2b20      	cmp	r3, #32
 800259a:	d178      	bne.n	800268e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_UART_Transmit+0x24>
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e071      	b.n	8002690 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2221      	movs	r2, #33	; 0x21
 80025b8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025ba:	f7fe fbb5 	bl	8000d28 <HAL_GetTick>
 80025be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	88fa      	ldrh	r2, [r7, #6]
 80025c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	88fa      	ldrh	r2, [r7, #6]
 80025cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d8:	d108      	bne.n	80025ec <HAL_UART_Transmit+0x68>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d104      	bne.n	80025ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	e003      	b.n	80025f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025f4:	e030      	b.n	8002658 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2200      	movs	r2, #0
 80025fe:	2180      	movs	r1, #128	; 0x80
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f000 fbd3 	bl	8002dac <UART_WaitOnFlagUntilTimeout>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d004      	beq.n	8002616 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2220      	movs	r2, #32
 8002610:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e03c      	b.n	8002690 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10b      	bne.n	8002634 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	881a      	ldrh	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002628:	b292      	uxth	r2, r2
 800262a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	3302      	adds	r3, #2
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	e008      	b.n	8002646 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	781a      	ldrb	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	b292      	uxth	r2, r2
 800263e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	3301      	adds	r3, #1
 8002644:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800265e:	b29b      	uxth	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1c8      	bne.n	80025f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	2200      	movs	r2, #0
 800266c:	2140      	movs	r1, #64	; 0x40
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 fb9c 	bl	8002dac <UART_WaitOnFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d004      	beq.n	8002684 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e005      	b.n	8002690 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800268e:	2302      	movs	r3, #2
  }
}
 8002690:	4618      	mov	r0, r3
 8002692:	3720      	adds	r7, #32
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026a4:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ac:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	4313      	orrs	r3, r2
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c4:	b08a      	sub	sp, #40	; 0x28
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	431a      	orrs	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	431a      	orrs	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4bb4      	ldr	r3, [pc, #720]	; (80029c0 <UART_SetConfig+0x300>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	6812      	ldr	r2, [r2, #0]
 80026f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f8:	430b      	orrs	r3, r1
 80026fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4aa9      	ldr	r2, [pc, #676]	; (80029c4 <UART_SetConfig+0x304>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d004      	beq.n	800272c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002728:	4313      	orrs	r3, r2
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273c:	430a      	orrs	r2, r1
 800273e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4aa0      	ldr	r2, [pc, #640]	; (80029c8 <UART_SetConfig+0x308>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d126      	bne.n	8002798 <UART_SetConfig+0xd8>
 800274a:	4ba0      	ldr	r3, [pc, #640]	; (80029cc <UART_SetConfig+0x30c>)
 800274c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	2b03      	cmp	r3, #3
 8002756:	d81b      	bhi.n	8002790 <UART_SetConfig+0xd0>
 8002758:	a201      	add	r2, pc, #4	; (adr r2, 8002760 <UART_SetConfig+0xa0>)
 800275a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275e:	bf00      	nop
 8002760:	08002771 	.word	0x08002771
 8002764:	08002781 	.word	0x08002781
 8002768:	08002779 	.word	0x08002779
 800276c:	08002789 	.word	0x08002789
 8002770:	2301      	movs	r3, #1
 8002772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002776:	e080      	b.n	800287a <UART_SetConfig+0x1ba>
 8002778:	2302      	movs	r3, #2
 800277a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800277e:	e07c      	b.n	800287a <UART_SetConfig+0x1ba>
 8002780:	2304      	movs	r3, #4
 8002782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002786:	e078      	b.n	800287a <UART_SetConfig+0x1ba>
 8002788:	2308      	movs	r3, #8
 800278a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800278e:	e074      	b.n	800287a <UART_SetConfig+0x1ba>
 8002790:	2310      	movs	r3, #16
 8002792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002796:	e070      	b.n	800287a <UART_SetConfig+0x1ba>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a8c      	ldr	r2, [pc, #560]	; (80029d0 <UART_SetConfig+0x310>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d138      	bne.n	8002814 <UART_SetConfig+0x154>
 80027a2:	4b8a      	ldr	r3, [pc, #552]	; (80029cc <UART_SetConfig+0x30c>)
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b0c      	cmp	r3, #12
 80027ae:	d82d      	bhi.n	800280c <UART_SetConfig+0x14c>
 80027b0:	a201      	add	r2, pc, #4	; (adr r2, 80027b8 <UART_SetConfig+0xf8>)
 80027b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b6:	bf00      	nop
 80027b8:	080027ed 	.word	0x080027ed
 80027bc:	0800280d 	.word	0x0800280d
 80027c0:	0800280d 	.word	0x0800280d
 80027c4:	0800280d 	.word	0x0800280d
 80027c8:	080027fd 	.word	0x080027fd
 80027cc:	0800280d 	.word	0x0800280d
 80027d0:	0800280d 	.word	0x0800280d
 80027d4:	0800280d 	.word	0x0800280d
 80027d8:	080027f5 	.word	0x080027f5
 80027dc:	0800280d 	.word	0x0800280d
 80027e0:	0800280d 	.word	0x0800280d
 80027e4:	0800280d 	.word	0x0800280d
 80027e8:	08002805 	.word	0x08002805
 80027ec:	2300      	movs	r3, #0
 80027ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027f2:	e042      	b.n	800287a <UART_SetConfig+0x1ba>
 80027f4:	2302      	movs	r3, #2
 80027f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027fa:	e03e      	b.n	800287a <UART_SetConfig+0x1ba>
 80027fc:	2304      	movs	r3, #4
 80027fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002802:	e03a      	b.n	800287a <UART_SetConfig+0x1ba>
 8002804:	2308      	movs	r3, #8
 8002806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800280a:	e036      	b.n	800287a <UART_SetConfig+0x1ba>
 800280c:	2310      	movs	r3, #16
 800280e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002812:	e032      	b.n	800287a <UART_SetConfig+0x1ba>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a6a      	ldr	r2, [pc, #424]	; (80029c4 <UART_SetConfig+0x304>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d12a      	bne.n	8002874 <UART_SetConfig+0x1b4>
 800281e:	4b6b      	ldr	r3, [pc, #428]	; (80029cc <UART_SetConfig+0x30c>)
 8002820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002824:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002828:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800282c:	d01a      	beq.n	8002864 <UART_SetConfig+0x1a4>
 800282e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002832:	d81b      	bhi.n	800286c <UART_SetConfig+0x1ac>
 8002834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002838:	d00c      	beq.n	8002854 <UART_SetConfig+0x194>
 800283a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800283e:	d815      	bhi.n	800286c <UART_SetConfig+0x1ac>
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <UART_SetConfig+0x18c>
 8002844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002848:	d008      	beq.n	800285c <UART_SetConfig+0x19c>
 800284a:	e00f      	b.n	800286c <UART_SetConfig+0x1ac>
 800284c:	2300      	movs	r3, #0
 800284e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002852:	e012      	b.n	800287a <UART_SetConfig+0x1ba>
 8002854:	2302      	movs	r3, #2
 8002856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800285a:	e00e      	b.n	800287a <UART_SetConfig+0x1ba>
 800285c:	2304      	movs	r3, #4
 800285e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002862:	e00a      	b.n	800287a <UART_SetConfig+0x1ba>
 8002864:	2308      	movs	r3, #8
 8002866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800286a:	e006      	b.n	800287a <UART_SetConfig+0x1ba>
 800286c:	2310      	movs	r3, #16
 800286e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002872:	e002      	b.n	800287a <UART_SetConfig+0x1ba>
 8002874:	2310      	movs	r3, #16
 8002876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a51      	ldr	r2, [pc, #324]	; (80029c4 <UART_SetConfig+0x304>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d17a      	bne.n	800297a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002884:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002888:	2b08      	cmp	r3, #8
 800288a:	d824      	bhi.n	80028d6 <UART_SetConfig+0x216>
 800288c:	a201      	add	r2, pc, #4	; (adr r2, 8002894 <UART_SetConfig+0x1d4>)
 800288e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002892:	bf00      	nop
 8002894:	080028b9 	.word	0x080028b9
 8002898:	080028d7 	.word	0x080028d7
 800289c:	080028c1 	.word	0x080028c1
 80028a0:	080028d7 	.word	0x080028d7
 80028a4:	080028c7 	.word	0x080028c7
 80028a8:	080028d7 	.word	0x080028d7
 80028ac:	080028d7 	.word	0x080028d7
 80028b0:	080028d7 	.word	0x080028d7
 80028b4:	080028cf 	.word	0x080028cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028b8:	f7ff faa2 	bl	8001e00 <HAL_RCC_GetPCLK1Freq>
 80028bc:	61f8      	str	r0, [r7, #28]
        break;
 80028be:	e010      	b.n	80028e2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028c0:	4b44      	ldr	r3, [pc, #272]	; (80029d4 <UART_SetConfig+0x314>)
 80028c2:	61fb      	str	r3, [r7, #28]
        break;
 80028c4:	e00d      	b.n	80028e2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028c6:	f7ff fa03 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 80028ca:	61f8      	str	r0, [r7, #28]
        break;
 80028cc:	e009      	b.n	80028e2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028d2:	61fb      	str	r3, [r7, #28]
        break;
 80028d4:	e005      	b.n	80028e2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80028e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8107 	beq.w	8002af8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	4413      	add	r3, r2
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d305      	bcc.n	8002906 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	429a      	cmp	r2, r3
 8002904:	d903      	bls.n	800290e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800290c:	e0f4      	b.n	8002af8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	2200      	movs	r2, #0
 8002912:	461c      	mov	r4, r3
 8002914:	4615      	mov	r5, r2
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	022b      	lsls	r3, r5, #8
 8002920:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002924:	0222      	lsls	r2, r4, #8
 8002926:	68f9      	ldr	r1, [r7, #12]
 8002928:	6849      	ldr	r1, [r1, #4]
 800292a:	0849      	lsrs	r1, r1, #1
 800292c:	2000      	movs	r0, #0
 800292e:	4688      	mov	r8, r1
 8002930:	4681      	mov	r9, r0
 8002932:	eb12 0a08 	adds.w	sl, r2, r8
 8002936:	eb43 0b09 	adc.w	fp, r3, r9
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002948:	4650      	mov	r0, sl
 800294a:	4659      	mov	r1, fp
 800294c:	f7fd fc90 	bl	8000270 <__aeabi_uldivmod>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4613      	mov	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800295e:	d308      	bcc.n	8002972 <UART_SetConfig+0x2b2>
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002966:	d204      	bcs.n	8002972 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	60da      	str	r2, [r3, #12]
 8002970:	e0c2      	b.n	8002af8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002978:	e0be      	b.n	8002af8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002982:	d16a      	bne.n	8002a5a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002984:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002988:	2b08      	cmp	r3, #8
 800298a:	d834      	bhi.n	80029f6 <UART_SetConfig+0x336>
 800298c:	a201      	add	r2, pc, #4	; (adr r2, 8002994 <UART_SetConfig+0x2d4>)
 800298e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002992:	bf00      	nop
 8002994:	080029b9 	.word	0x080029b9
 8002998:	080029d9 	.word	0x080029d9
 800299c:	080029e1 	.word	0x080029e1
 80029a0:	080029f7 	.word	0x080029f7
 80029a4:	080029e7 	.word	0x080029e7
 80029a8:	080029f7 	.word	0x080029f7
 80029ac:	080029f7 	.word	0x080029f7
 80029b0:	080029f7 	.word	0x080029f7
 80029b4:	080029ef 	.word	0x080029ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029b8:	f7ff fa22 	bl	8001e00 <HAL_RCC_GetPCLK1Freq>
 80029bc:	61f8      	str	r0, [r7, #28]
        break;
 80029be:	e020      	b.n	8002a02 <UART_SetConfig+0x342>
 80029c0:	efff69f3 	.word	0xefff69f3
 80029c4:	40008000 	.word	0x40008000
 80029c8:	40013800 	.word	0x40013800
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40004400 	.word	0x40004400
 80029d4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029d8:	f7ff fa28 	bl	8001e2c <HAL_RCC_GetPCLK2Freq>
 80029dc:	61f8      	str	r0, [r7, #28]
        break;
 80029de:	e010      	b.n	8002a02 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029e0:	4b4c      	ldr	r3, [pc, #304]	; (8002b14 <UART_SetConfig+0x454>)
 80029e2:	61fb      	str	r3, [r7, #28]
        break;
 80029e4:	e00d      	b.n	8002a02 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029e6:	f7ff f973 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 80029ea:	61f8      	str	r0, [r7, #28]
        break;
 80029ec:	e009      	b.n	8002a02 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029f2:	61fb      	str	r3, [r7, #28]
        break;
 80029f4:	e005      	b.n	8002a02 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002a00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d077      	beq.n	8002af8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	005a      	lsls	r2, r3, #1
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	085b      	lsrs	r3, r3, #1
 8002a12:	441a      	add	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b0f      	cmp	r3, #15
 8002a22:	d916      	bls.n	8002a52 <UART_SetConfig+0x392>
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2a:	d212      	bcs.n	8002a52 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	f023 030f 	bic.w	r3, r3, #15
 8002a34:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	085b      	lsrs	r3, r3, #1
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	8afb      	ldrh	r3, [r7, #22]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	8afa      	ldrh	r2, [r7, #22]
 8002a4e:	60da      	str	r2, [r3, #12]
 8002a50:	e052      	b.n	8002af8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002a58:	e04e      	b.n	8002af8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d827      	bhi.n	8002ab2 <UART_SetConfig+0x3f2>
 8002a62:	a201      	add	r2, pc, #4	; (adr r2, 8002a68 <UART_SetConfig+0x3a8>)
 8002a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a68:	08002a8d 	.word	0x08002a8d
 8002a6c:	08002a95 	.word	0x08002a95
 8002a70:	08002a9d 	.word	0x08002a9d
 8002a74:	08002ab3 	.word	0x08002ab3
 8002a78:	08002aa3 	.word	0x08002aa3
 8002a7c:	08002ab3 	.word	0x08002ab3
 8002a80:	08002ab3 	.word	0x08002ab3
 8002a84:	08002ab3 	.word	0x08002ab3
 8002a88:	08002aab 	.word	0x08002aab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a8c:	f7ff f9b8 	bl	8001e00 <HAL_RCC_GetPCLK1Freq>
 8002a90:	61f8      	str	r0, [r7, #28]
        break;
 8002a92:	e014      	b.n	8002abe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a94:	f7ff f9ca 	bl	8001e2c <HAL_RCC_GetPCLK2Freq>
 8002a98:	61f8      	str	r0, [r7, #28]
        break;
 8002a9a:	e010      	b.n	8002abe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <UART_SetConfig+0x454>)
 8002a9e:	61fb      	str	r3, [r7, #28]
        break;
 8002aa0:	e00d      	b.n	8002abe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aa2:	f7ff f915 	bl	8001cd0 <HAL_RCC_GetSysClockFreq>
 8002aa6:	61f8      	str	r0, [r7, #28]
        break;
 8002aa8:	e009      	b.n	8002abe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aae:	61fb      	str	r3, [r7, #28]
        break;
 8002ab0:	e005      	b.n	8002abe <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002abc:	bf00      	nop
    }

    if (pclk != 0U)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d019      	beq.n	8002af8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	085a      	lsrs	r2, r3, #1
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	441a      	add	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2b0f      	cmp	r3, #15
 8002adc:	d909      	bls.n	8002af2 <UART_SetConfig+0x432>
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae4:	d205      	bcs.n	8002af2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	60da      	str	r2, [r3, #12]
 8002af0:	e002      	b.n	8002af8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002b04:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3728      	adds	r7, #40	; 0x28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b12:	bf00      	nop
 8002b14:	00f42400 	.word	0x00f42400

08002b18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00a      	beq.n	8002b42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00a      	beq.n	8002b64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00a      	beq.n	8002b86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00a      	beq.n	8002ba8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00a      	beq.n	8002bca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d01a      	beq.n	8002c2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c16:	d10a      	bne.n	8002c2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	605a      	str	r2, [r3, #4]
  }
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b098      	sub	sp, #96	; 0x60
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c6c:	f7fe f85c 	bl	8000d28 <HAL_GetTick>
 8002c70:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d12e      	bne.n	8002cde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f88c 	bl	8002dac <UART_WaitOnFlagUntilTimeout>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d021      	beq.n	8002cde <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca2:	e853 3f00 	ldrex	r3, [r3]
 8002ca6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cae:	653b      	str	r3, [r7, #80]	; 0x50
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cb8:	647b      	str	r3, [r7, #68]	; 0x44
 8002cba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cbc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cc0:	e841 2300 	strex	r3, r2, [r1]
 8002cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1e6      	bne.n	8002c9a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e062      	b.n	8002da4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d149      	bne.n	8002d80 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f856 	bl	8002dac <UART_WaitOnFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d03c      	beq.n	8002d80 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	e853 3f00 	ldrex	r3, [r3]
 8002d12:	623b      	str	r3, [r7, #32]
   return(result);
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d24:	633b      	str	r3, [r7, #48]	; 0x30
 8002d26:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d2c:	e841 2300 	strex	r3, r2, [r1]
 8002d30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e6      	bne.n	8002d06 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3308      	adds	r3, #8
 8002d3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	e853 3f00 	ldrex	r3, [r3]
 8002d46:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
 8002d4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3308      	adds	r3, #8
 8002d56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d58:	61fa      	str	r2, [r7, #28]
 8002d5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d5c:	69b9      	ldr	r1, [r7, #24]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	e841 2300 	strex	r3, r2, [r1]
 8002d64:	617b      	str	r3, [r7, #20]
   return(result);
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1e5      	bne.n	8002d38 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2220      	movs	r2, #32
 8002d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e011      	b.n	8002da4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3758      	adds	r7, #88	; 0x58
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	603b      	str	r3, [r7, #0]
 8002db8:	4613      	mov	r3, r2
 8002dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dbc:	e049      	b.n	8002e52 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d045      	beq.n	8002e52 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc6:	f7fd ffaf 	bl	8000d28 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d302      	bcc.n	8002ddc <UART_WaitOnFlagUntilTimeout+0x30>
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e048      	b.n	8002e72 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d031      	beq.n	8002e52 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d110      	bne.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2208      	movs	r2, #8
 8002e02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f838 	bl	8002e7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2208      	movs	r2, #8
 8002e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e029      	b.n	8002e72 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e2c:	d111      	bne.n	8002e52 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f81e 	bl	8002e7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e00f      	b.n	8002e72 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69da      	ldr	r2, [r3, #28]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	bf0c      	ite	eq
 8002e62:	2301      	moveq	r3, #1
 8002e64:	2300      	movne	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d0a6      	beq.n	8002dbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b095      	sub	sp, #84	; 0x54
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e8a:	e853 3f00 	ldrex	r3, [r3]
 8002e8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ea2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ea6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ea8:	e841 2300 	strex	r3, r2, [r1]
 8002eac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1e6      	bne.n	8002e82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	3308      	adds	r3, #8
 8002eba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	e853 3f00 	ldrex	r3, [r3]
 8002ec2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f023 0301 	bic.w	r3, r3, #1
 8002eca:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3308      	adds	r3, #8
 8002ed2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ed4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ed6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002edc:	e841 2300 	strex	r3, r2, [r1]
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e5      	bne.n	8002eb4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d118      	bne.n	8002f22 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	e853 3f00 	ldrex	r3, [r3]
 8002efc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f023 0310 	bic.w	r3, r3, #16
 8002f04:	647b      	str	r3, [r7, #68]	; 0x44
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f0e:	61bb      	str	r3, [r7, #24]
 8002f10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f12:	6979      	ldr	r1, [r7, #20]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1e6      	bne.n	8002ef0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2220      	movs	r2, #32
 8002f26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002f36:	bf00      	nop
 8002f38:	3754      	adds	r7, #84	; 0x54
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <__NVIC_SetPriority>:
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	6039      	str	r1, [r7, #0]
 8002f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	db0a      	blt.n	8002f6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	490c      	ldr	r1, [pc, #48]	; (8002f90 <__NVIC_SetPriority+0x4c>)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	0112      	lsls	r2, r2, #4
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	440b      	add	r3, r1
 8002f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f6c:	e00a      	b.n	8002f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	b2da      	uxtb	r2, r3
 8002f72:	4908      	ldr	r1, [pc, #32]	; (8002f94 <__NVIC_SetPriority+0x50>)
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	3b04      	subs	r3, #4
 8002f7c:	0112      	lsls	r2, r2, #4
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	440b      	add	r3, r1
 8002f82:	761a      	strb	r2, [r3, #24]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr
 8002f90:	e000e100 	.word	0xe000e100
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	f06f 0004 	mvn.w	r0, #4
 8002fa2:	f7ff ffcf 	bl	8002f44 <__NVIC_SetPriority>
#endif
}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fb2:	f3ef 8305 	mrs	r3, IPSR
 8002fb6:	603b      	str	r3, [r7, #0]
  return(result);
 8002fb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002fbe:	f06f 0305 	mvn.w	r3, #5
 8002fc2:	607b      	str	r3, [r7, #4]
 8002fc4:	e00c      	b.n	8002fe0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <osKernelInitialize+0x44>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d105      	bne.n	8002fda <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002fce:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <osKernelInitialize+0x44>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	e002      	b.n	8002fe0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002fda:	f04f 33ff 	mov.w	r3, #4294967295
 8002fde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002fe0:	687b      	ldr	r3, [r7, #4]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	20000180 	.word	0x20000180

08002ff4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ffa:	f3ef 8305 	mrs	r3, IPSR
 8002ffe:	603b      	str	r3, [r7, #0]
  return(result);
 8003000:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003006:	f06f 0305 	mvn.w	r3, #5
 800300a:	607b      	str	r3, [r7, #4]
 800300c:	e010      	b.n	8003030 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800300e:	4b0b      	ldr	r3, [pc, #44]	; (800303c <osKernelStart+0x48>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d109      	bne.n	800302a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003016:	f7ff ffbf 	bl	8002f98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800301a:	4b08      	ldr	r3, [pc, #32]	; (800303c <osKernelStart+0x48>)
 800301c:	2202      	movs	r2, #2
 800301e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003020:	f001 fb96 	bl	8004750 <vTaskStartScheduler>
      stat = osOK;
 8003024:	2300      	movs	r3, #0
 8003026:	607b      	str	r3, [r7, #4]
 8003028:	e002      	b.n	8003030 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800302a:	f04f 33ff 	mov.w	r3, #4294967295
 800302e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003030:	687b      	ldr	r3, [r7, #4]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000180 	.word	0x20000180

08003040 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003040:	b580      	push	{r7, lr}
 8003042:	b08e      	sub	sp, #56	; 0x38
 8003044:	af04      	add	r7, sp, #16
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800304c:	2300      	movs	r3, #0
 800304e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003050:	f3ef 8305 	mrs	r3, IPSR
 8003054:	617b      	str	r3, [r7, #20]
  return(result);
 8003056:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003058:	2b00      	cmp	r3, #0
 800305a:	d17e      	bne.n	800315a <osThreadNew+0x11a>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d07b      	beq.n	800315a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003066:	2318      	movs	r3, #24
 8003068:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800306a:	2300      	movs	r3, #0
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800306e:	f04f 33ff 	mov.w	r3, #4294967295
 8003072:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d045      	beq.n	8003106 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <osThreadNew+0x48>
        name = attr->name;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <osThreadNew+0x6e>
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	2b38      	cmp	r3, #56	; 0x38
 80030a0:	d805      	bhi.n	80030ae <osThreadNew+0x6e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <osThreadNew+0x72>
        return (NULL);
 80030ae:	2300      	movs	r3, #0
 80030b0:	e054      	b.n	800315c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	089b      	lsrs	r3, r3, #2
 80030c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00e      	beq.n	80030e8 <osThreadNew+0xa8>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2bab      	cmp	r3, #171	; 0xab
 80030d0:	d90a      	bls.n	80030e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d006      	beq.n	80030e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d002      	beq.n	80030e8 <osThreadNew+0xa8>
        mem = 1;
 80030e2:	2301      	movs	r3, #1
 80030e4:	61bb      	str	r3, [r7, #24]
 80030e6:	e010      	b.n	800310a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10c      	bne.n	800310a <osThreadNew+0xca>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d108      	bne.n	800310a <osThreadNew+0xca>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d104      	bne.n	800310a <osThreadNew+0xca>
          mem = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	61bb      	str	r3, [r7, #24]
 8003104:	e001      	b.n	800310a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003106:	2300      	movs	r3, #0
 8003108:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d110      	bne.n	8003132 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003118:	9202      	str	r2, [sp, #8]
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	6a3a      	ldr	r2, [r7, #32]
 8003124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f001 f922 	bl	8004370 <xTaskCreateStatic>
 800312c:	4603      	mov	r3, r0
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	e013      	b.n	800315a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d110      	bne.n	800315a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	b29a      	uxth	r2, r3
 800313c:	f107 0310 	add.w	r3, r7, #16
 8003140:	9301      	str	r3, [sp, #4]
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f001 f96d 	bl	800442a <xTaskCreate>
 8003150:	4603      	mov	r3, r0
 8003152:	2b01      	cmp	r3, #1
 8003154:	d001      	beq.n	800315a <osThreadNew+0x11a>
            hTask = NULL;
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800315a:	693b      	ldr	r3, [r7, #16]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3728      	adds	r7, #40	; 0x28
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800316a:	f001 ffa3 	bl	80050b4 <xTaskGetCurrentTaskHandle>
 800316e:	6078      	str	r0, [r7, #4]

  return (id);
 8003170:	687b      	ldr	r3, [r7, #4]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 800317a:	b580      	push	{r7, lr}
 800317c:	b086      	sub	sp, #24
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003186:	f3ef 8305 	mrs	r3, IPSR
 800318a:	60fb      	str	r3, [r7, #12]
  return(result);
 800318c:	68fb      	ldr	r3, [r7, #12]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 800318e:	2b00      	cmp	r3, #0
 8003190:	d102      	bne.n	8003198 <osThreadGetStackSpace+0x1e>
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d102      	bne.n	800319e <osThreadGetStackSpace+0x24>
    sz = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	e005      	b.n	80031aa <osThreadGetStackSpace+0x30>
  } else {
    sz = (uint32_t)(uxTaskGetStackHighWaterMark(hTask) * sizeof(StackType_t));
 800319e:	6938      	ldr	r0, [r7, #16]
 80031a0:	f001 ff18 	bl	8004fd4 <uxTaskGetStackHighWaterMark>
 80031a4:	4603      	mov	r3, r0
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	617b      	str	r3, [r7, #20]
  }

  return (sz);
 80031aa:	697b      	ldr	r3, [r7, #20]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031bc:	f3ef 8305 	mrs	r3, IPSR
 80031c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80031c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <osDelay+0x1c>
    stat = osErrorISR;
 80031c8:	f06f 0305 	mvn.w	r3, #5
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	e007      	b.n	80031e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f001 fa84 	bl	80046e8 <vTaskDelay>
    }
  }

  return (stat);
 80031e0:	68fb      	ldr	r3, [r7, #12]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b08a      	sub	sp, #40	; 0x28
 80031ee:	af02      	add	r7, sp, #8
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80031f6:	2300      	movs	r3, #0
 80031f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031fa:	f3ef 8305 	mrs	r3, IPSR
 80031fe:	613b      	str	r3, [r7, #16]
  return(result);
 8003200:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003202:	2b00      	cmp	r3, #0
 8003204:	d175      	bne.n	80032f2 <osSemaphoreNew+0x108>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d072      	beq.n	80032f2 <osSemaphoreNew+0x108>
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	429a      	cmp	r2, r3
 8003212:	d86e      	bhi.n	80032f2 <osSemaphoreNew+0x108>
    mem = -1;
 8003214:	f04f 33ff 	mov.w	r3, #4294967295
 8003218:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d015      	beq.n	800324c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d006      	beq.n	8003236 <osSemaphoreNew+0x4c>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	2b4f      	cmp	r3, #79	; 0x4f
 800322e:	d902      	bls.n	8003236 <osSemaphoreNew+0x4c>
        mem = 1;
 8003230:	2301      	movs	r3, #1
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	e00c      	b.n	8003250 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d108      	bne.n	8003250 <osSemaphoreNew+0x66>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d104      	bne.n	8003250 <osSemaphoreNew+0x66>
          mem = 0;
 8003246:	2300      	movs	r3, #0
 8003248:	61bb      	str	r3, [r7, #24]
 800324a:	e001      	b.n	8003250 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800324c:	2300      	movs	r3, #0
 800324e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003256:	d04c      	beq.n	80032f2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d128      	bne.n	80032b0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d10a      	bne.n	800327a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	2203      	movs	r2, #3
 800326a:	9200      	str	r2, [sp, #0]
 800326c:	2200      	movs	r2, #0
 800326e:	2100      	movs	r1, #0
 8003270:	2001      	movs	r0, #1
 8003272:	f000 f993 	bl	800359c <xQueueGenericCreateStatic>
 8003276:	61f8      	str	r0, [r7, #28]
 8003278:	e005      	b.n	8003286 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800327a:	2203      	movs	r2, #3
 800327c:	2100      	movs	r1, #0
 800327e:	2001      	movs	r0, #1
 8003280:	f000 fa04 	bl	800368c <xQueueGenericCreate>
 8003284:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d022      	beq.n	80032d2 <osSemaphoreNew+0xe8>
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d01f      	beq.n	80032d2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003292:	2300      	movs	r3, #0
 8003294:	2200      	movs	r2, #0
 8003296:	2100      	movs	r1, #0
 8003298:	69f8      	ldr	r0, [r7, #28]
 800329a:	f000 faf1 	bl	8003880 <xQueueGenericSend>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d016      	beq.n	80032d2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80032a4:	69f8      	ldr	r0, [r7, #28]
 80032a6:	f000 fe8f 	bl	8003fc8 <vQueueDelete>
            hSemaphore = NULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	e010      	b.n	80032d2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d108      	bne.n	80032c8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	461a      	mov	r2, r3
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 fa73 	bl	80037aa <xQueueCreateCountingSemaphoreStatic>
 80032c4:	61f8      	str	r0, [r7, #28]
 80032c6:	e004      	b.n	80032d2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 faa4 	bl	8003818 <xQueueCreateCountingSemaphore>
 80032d0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00c      	beq.n	80032f2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	e001      	b.n	80032ea <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80032ea:	6979      	ldr	r1, [r7, #20]
 80032ec:	69f8      	ldr	r0, [r7, #28]
 80032ee:	f000 ffb7 	bl	8004260 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80032f2:	69fb      	ldr	r3, [r7, #28]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3720      	adds	r7, #32
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4a07      	ldr	r2, [pc, #28]	; (8003328 <vApplicationGetIdleTaskMemory+0x2c>)
 800330c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	4a06      	ldr	r2, [pc, #24]	; (800332c <vApplicationGetIdleTaskMemory+0x30>)
 8003312:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2280      	movs	r2, #128	; 0x80
 8003318:	601a      	str	r2, [r3, #0]
}
 800331a:	bf00      	nop
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	20000184 	.word	0x20000184
 800332c:	20000230 	.word	0x20000230

08003330 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4a07      	ldr	r2, [pc, #28]	; (800335c <vApplicationGetTimerTaskMemory+0x2c>)
 8003340:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	4a06      	ldr	r2, [pc, #24]	; (8003360 <vApplicationGetTimerTaskMemory+0x30>)
 8003346:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800334e:	601a      	str	r2, [r3, #0]
}
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	20000430 	.word	0x20000430
 8003360:	200004dc 	.word	0x200004dc

08003364 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f103 0208 	add.w	r2, r3, #8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f04f 32ff 	mov.w	r2, #4294967295
 800337c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f103 0208 	add.w	r2, r3, #8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f103 0208 	add.w	r2, r3, #8
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033be:	b480      	push	{r7}
 80033c0:	b085      	sub	sp, #20
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	601a      	str	r2, [r3, #0]
}
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003406:	b480      	push	{r7}
 8003408:	b085      	sub	sp, #20
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341c:	d103      	bne.n	8003426 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	e00c      	b.n	8003440 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3308      	adds	r3, #8
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	e002      	b.n	8003434 <vListInsert+0x2e>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	429a      	cmp	r2, r3
 800343e:	d2f6      	bcs.n	800342e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	601a      	str	r2, [r3, #0]
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6892      	ldr	r2, [r2, #8]
 800348e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6852      	ldr	r2, [r2, #4]
 8003498:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d103      	bne.n	80034ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	1e5a      	subs	r2, r3, #1
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10a      	bne.n	80034f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e4:	f383 8811 	msr	BASEPRI, r3
 80034e8:	f3bf 8f6f 	isb	sy
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034f2:	bf00      	nop
 80034f4:	e7fe      	b.n	80034f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80034f6:	f002 fc45 	bl	8005d84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003502:	68f9      	ldr	r1, [r7, #12]
 8003504:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003506:	fb01 f303 	mul.w	r3, r1, r3
 800350a:	441a      	add	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003526:	3b01      	subs	r3, #1
 8003528:	68f9      	ldr	r1, [r7, #12]
 800352a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800352c:	fb01 f303 	mul.w	r3, r1, r3
 8003530:	441a      	add	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	22ff      	movs	r2, #255	; 0xff
 800353a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	22ff      	movs	r2, #255	; 0xff
 8003542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d114      	bne.n	8003576 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d01a      	beq.n	800358a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	3310      	adds	r3, #16
 8003558:	4618      	mov	r0, r3
 800355a:	f001 fbb1 	bl	8004cc0 <xTaskRemoveFromEventList>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d012      	beq.n	800358a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003564:	4b0c      	ldr	r3, [pc, #48]	; (8003598 <xQueueGenericReset+0xcc>)
 8003566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	e009      	b.n	800358a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3310      	adds	r3, #16
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff fef2 	bl	8003364 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	3324      	adds	r3, #36	; 0x24
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff feed 	bl	8003364 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800358a:	f002 fc2b 	bl	8005de4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800358e:	2301      	movs	r3, #1
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	e000ed04 	.word	0xe000ed04

0800359c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08e      	sub	sp, #56	; 0x38
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10a      	bne.n	80035c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80035b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80035c2:	bf00      	nop
 80035c4:	e7fe      	b.n	80035c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10a      	bne.n	80035e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80035cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d0:	f383 8811 	msr	BASEPRI, r3
 80035d4:	f3bf 8f6f 	isb	sy
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035de:	bf00      	nop
 80035e0:	e7fe      	b.n	80035e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <xQueueGenericCreateStatic+0x52>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <xQueueGenericCreateStatic+0x56>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <xQueueGenericCreateStatic+0x58>
 80035f2:	2300      	movs	r3, #0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10a      	bne.n	800360e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	623b      	str	r3, [r7, #32]
}
 800360a:	bf00      	nop
 800360c:	e7fe      	b.n	800360c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d102      	bne.n	800361a <xQueueGenericCreateStatic+0x7e>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <xQueueGenericCreateStatic+0x82>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <xQueueGenericCreateStatic+0x84>
 800361e:	2300      	movs	r3, #0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003628:	f383 8811 	msr	BASEPRI, r3
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	f3bf 8f4f 	dsb	sy
 8003634:	61fb      	str	r3, [r7, #28]
}
 8003636:	bf00      	nop
 8003638:	e7fe      	b.n	8003638 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800363a:	2350      	movs	r3, #80	; 0x50
 800363c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2b50      	cmp	r3, #80	; 0x50
 8003642:	d00a      	beq.n	800365a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	61bb      	str	r3, [r7, #24]
}
 8003656:	bf00      	nop
 8003658:	e7fe      	b.n	8003658 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800365a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00d      	beq.n	8003682 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800366e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	4613      	mov	r3, r2
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	68b9      	ldr	r1, [r7, #8]
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f83f 	bl	8003700 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003684:	4618      	mov	r0, r3
 8003686:	3730      	adds	r7, #48	; 0x30
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	; 0x28
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	4613      	mov	r3, r2
 8003698:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10a      	bne.n	80036b6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80036a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a4:	f383 8811 	msr	BASEPRI, r3
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	f3bf 8f4f 	dsb	sy
 80036b0:	613b      	str	r3, [r7, #16]
}
 80036b2:	bf00      	nop
 80036b4:	e7fe      	b.n	80036b4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	fb02 f303 	mul.w	r3, r2, r3
 80036be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	3350      	adds	r3, #80	; 0x50
 80036c4:	4618      	mov	r0, r3
 80036c6:	f002 fc7f 	bl	8005fc8 <pvPortMalloc>
 80036ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d011      	beq.n	80036f6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	3350      	adds	r3, #80	; 0x50
 80036da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80036e4:	79fa      	ldrb	r2, [r7, #7]
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	4613      	mov	r3, r2
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f805 	bl	8003700 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036f6:	69bb      	ldr	r3, [r7, #24]
	}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3720      	adds	r7, #32
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d103      	bne.n	800371c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	601a      	str	r2, [r3, #0]
 800371a:	e002      	b.n	8003722 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800372e:	2101      	movs	r1, #1
 8003730:	69b8      	ldr	r0, [r7, #24]
 8003732:	f7ff fecb 	bl	80034cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800373e:	bf00      	nop
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00e      	beq.n	8003772 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003766:	2300      	movs	r3, #0
 8003768:	2200      	movs	r2, #0
 800376a:	2100      	movs	r1, #0
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f887 	bl	8003880 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800377a:	b580      	push	{r7, lr}
 800377c:	b086      	sub	sp, #24
 800377e:	af00      	add	r7, sp, #0
 8003780:	4603      	mov	r3, r0
 8003782:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003784:	2301      	movs	r3, #1
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	2300      	movs	r3, #0
 800378a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800378c:	79fb      	ldrb	r3, [r7, #7]
 800378e:	461a      	mov	r2, r3
 8003790:	6939      	ldr	r1, [r7, #16]
 8003792:	6978      	ldr	r0, [r7, #20]
 8003794:	f7ff ff7a 	bl	800368c <xQueueGenericCreate>
 8003798:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f7ff ffd3 	bl	8003746 <prvInitialiseMutex>

		return xNewQueue;
 80037a0:	68fb      	ldr	r3, [r7, #12]
	}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b08a      	sub	sp, #40	; 0x28
 80037ae:	af02      	add	r7, sp, #8
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10a      	bne.n	80037d2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80037bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c0:	f383 8811 	msr	BASEPRI, r3
 80037c4:	f3bf 8f6f 	isb	sy
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	61bb      	str	r3, [r7, #24]
}
 80037ce:	bf00      	nop
 80037d0:	e7fe      	b.n	80037d0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80037d2:	68ba      	ldr	r2, [r7, #8]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d90a      	bls.n	80037f0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80037da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037de:	f383 8811 	msr	BASEPRI, r3
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	617b      	str	r3, [r7, #20]
}
 80037ec:	bf00      	nop
 80037ee:	e7fe      	b.n	80037ee <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80037f0:	2302      	movs	r3, #2
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	2100      	movs	r1, #0
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f7ff fece 	bl	800359c <xQueueGenericCreateStatic>
 8003800:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800380e:	69fb      	ldr	r3, [r7, #28]
	}
 8003810:	4618      	mov	r0, r3
 8003812:	3720      	adds	r7, #32
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10a      	bne.n	800383e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	613b      	str	r3, [r7, #16]
}
 800383a:	bf00      	nop
 800383c:	e7fe      	b.n	800383c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	429a      	cmp	r2, r3
 8003844:	d90a      	bls.n	800385c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384a:	f383 8811 	msr	BASEPRI, r3
 800384e:	f3bf 8f6f 	isb	sy
 8003852:	f3bf 8f4f 	dsb	sy
 8003856:	60fb      	str	r3, [r7, #12]
}
 8003858:	bf00      	nop
 800385a:	e7fe      	b.n	800385a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800385c:	2202      	movs	r2, #2
 800385e:	2100      	movs	r1, #0
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff ff13 	bl	800368c <xQueueGenericCreate>
 8003866:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003874:	697b      	ldr	r3, [r7, #20]
	}
 8003876:	4618      	mov	r0, r3
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08e      	sub	sp, #56	; 0x38
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800388e:	2300      	movs	r3, #0
 8003890:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10a      	bne.n	80038b2 <xQueueGenericSend+0x32>
	__asm volatile
 800389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038ae:	bf00      	nop
 80038b0:	e7fe      	b.n	80038b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d103      	bne.n	80038c0 <xQueueGenericSend+0x40>
 80038b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <xQueueGenericSend+0x44>
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <xQueueGenericSend+0x46>
 80038c4:	2300      	movs	r3, #0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10a      	bne.n	80038e0 <xQueueGenericSend+0x60>
	__asm volatile
 80038ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038dc:	bf00      	nop
 80038de:	e7fe      	b.n	80038de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d103      	bne.n	80038ee <xQueueGenericSend+0x6e>
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d101      	bne.n	80038f2 <xQueueGenericSend+0x72>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <xQueueGenericSend+0x74>
 80038f2:	2300      	movs	r3, #0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10a      	bne.n	800390e <xQueueGenericSend+0x8e>
	__asm volatile
 80038f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	623b      	str	r3, [r7, #32]
}
 800390a:	bf00      	nop
 800390c:	e7fe      	b.n	800390c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800390e:	f001 fbe1 	bl	80050d4 <xTaskGetSchedulerState>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d102      	bne.n	800391e <xQueueGenericSend+0x9e>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <xQueueGenericSend+0xa2>
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <xQueueGenericSend+0xa4>
 8003922:	2300      	movs	r3, #0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10a      	bne.n	800393e <xQueueGenericSend+0xbe>
	__asm volatile
 8003928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	61fb      	str	r3, [r7, #28]
}
 800393a:	bf00      	nop
 800393c:	e7fe      	b.n	800393c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800393e:	f002 fa21 	bl	8005d84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	429a      	cmp	r2, r3
 800394c:	d302      	bcc.n	8003954 <xQueueGenericSend+0xd4>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b02      	cmp	r3, #2
 8003952:	d129      	bne.n	80039a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	68b9      	ldr	r1, [r7, #8]
 8003958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800395a:	f000 fb70 	bl	800403e <prvCopyDataToQueue>
 800395e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	2b00      	cmp	r3, #0
 8003966:	d010      	beq.n	800398a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396a:	3324      	adds	r3, #36	; 0x24
 800396c:	4618      	mov	r0, r3
 800396e:	f001 f9a7 	bl	8004cc0 <xTaskRemoveFromEventList>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d013      	beq.n	80039a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003978:	4b3f      	ldr	r3, [pc, #252]	; (8003a78 <xQueueGenericSend+0x1f8>)
 800397a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	e00a      	b.n	80039a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800398a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398c:	2b00      	cmp	r3, #0
 800398e:	d007      	beq.n	80039a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003990:	4b39      	ldr	r3, [pc, #228]	; (8003a78 <xQueueGenericSend+0x1f8>)
 8003992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039a0:	f002 fa20 	bl	8005de4 <vPortExitCritical>
				return pdPASS;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e063      	b.n	8003a70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d103      	bne.n	80039b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039ae:	f002 fa19 	bl	8005de4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e05c      	b.n	8003a70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d106      	bne.n	80039ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039bc:	f107 0314 	add.w	r3, r7, #20
 80039c0:	4618      	mov	r0, r3
 80039c2:	f001 f9e1 	bl	8004d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039c6:	2301      	movs	r3, #1
 80039c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039ca:	f002 fa0b 	bl	8005de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039ce:	f000 ff31 	bl	8004834 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039d2:	f002 f9d7 	bl	8005d84 <vPortEnterCritical>
 80039d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039dc:	b25b      	sxtb	r3, r3
 80039de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e2:	d103      	bne.n	80039ec <xQueueGenericSend+0x16c>
 80039e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039f2:	b25b      	sxtb	r3, r3
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f8:	d103      	bne.n	8003a02 <xQueueGenericSend+0x182>
 80039fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a02:	f002 f9ef 	bl	8005de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a06:	1d3a      	adds	r2, r7, #4
 8003a08:	f107 0314 	add.w	r3, r7, #20
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f001 f9d0 	bl	8004db4 <xTaskCheckForTimeOut>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d124      	bne.n	8003a64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a1c:	f000 fc07 	bl	800422e <prvIsQueueFull>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d018      	beq.n	8003a58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	3310      	adds	r3, #16
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f001 f8f6 	bl	8004c20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a36:	f000 fb92 	bl	800415e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a3a:	f000 ff09 	bl	8004850 <xTaskResumeAll>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f47f af7c 	bne.w	800393e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003a46:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <xQueueGenericSend+0x1f8>)
 8003a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	e772      	b.n	800393e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a5a:	f000 fb80 	bl	800415e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a5e:	f000 fef7 	bl	8004850 <xTaskResumeAll>
 8003a62:	e76c      	b.n	800393e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a66:	f000 fb7a 	bl	800415e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a6a:	f000 fef1 	bl	8004850 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3738      	adds	r7, #56	; 0x38
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	e000ed04 	.word	0xe000ed04

08003a7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b090      	sub	sp, #64	; 0x40
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10a      	bne.n	8003aaa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003aa6:	bf00      	nop
 8003aa8:	e7fe      	b.n	8003aa8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d103      	bne.n	8003ab8 <xQueueGenericSendFromISR+0x3c>
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <xQueueGenericSendFromISR+0x40>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e000      	b.n	8003abe <xQueueGenericSendFromISR+0x42>
 8003abc:	2300      	movs	r3, #0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10a      	bne.n	8003ad8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac6:	f383 8811 	msr	BASEPRI, r3
 8003aca:	f3bf 8f6f 	isb	sy
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ad4:	bf00      	nop
 8003ad6:	e7fe      	b.n	8003ad6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d103      	bne.n	8003ae6 <xQueueGenericSendFromISR+0x6a>
 8003ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <xQueueGenericSendFromISR+0x6e>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <xQueueGenericSendFromISR+0x70>
 8003aea:	2300      	movs	r3, #0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	623b      	str	r3, [r7, #32]
}
 8003b02:	bf00      	nop
 8003b04:	e7fe      	b.n	8003b04 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b06:	f002 fa1f 	bl	8005f48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b0a:	f3ef 8211 	mrs	r2, BASEPRI
 8003b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b12:	f383 8811 	msr	BASEPRI, r3
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	61fa      	str	r2, [r7, #28]
 8003b20:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b22:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b24:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d302      	bcc.n	8003b38 <xQueueGenericSendFromISR+0xbc>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d12f      	bne.n	8003b98 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	68b9      	ldr	r1, [r7, #8]
 8003b4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003b4e:	f000 fa76 	bl	800403e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5a:	d112      	bne.n	8003b82 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d016      	beq.n	8003b92 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b66:	3324      	adds	r3, #36	; 0x24
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f001 f8a9 	bl	8004cc0 <xTaskRemoveFromEventList>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00e      	beq.n	8003b92 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00b      	beq.n	8003b92 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	e007      	b.n	8003b92 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b86:	3301      	adds	r3, #1
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	b25a      	sxtb	r2, r3
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b92:	2301      	movs	r3, #1
 8003b94:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003b96:	e001      	b.n	8003b9c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ba6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3740      	adds	r7, #64	; 0x40
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08c      	sub	sp, #48	; 0x30
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10a      	bne.n	8003be4 <xQueueReceive+0x30>
	__asm volatile
 8003bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	623b      	str	r3, [r7, #32]
}
 8003be0:	bf00      	nop
 8003be2:	e7fe      	b.n	8003be2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d103      	bne.n	8003bf2 <xQueueReceive+0x3e>
 8003bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <xQueueReceive+0x42>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <xQueueReceive+0x44>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10a      	bne.n	8003c12 <xQueueReceive+0x5e>
	__asm volatile
 8003bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	61fb      	str	r3, [r7, #28]
}
 8003c0e:	bf00      	nop
 8003c10:	e7fe      	b.n	8003c10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c12:	f001 fa5f 	bl	80050d4 <xTaskGetSchedulerState>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d102      	bne.n	8003c22 <xQueueReceive+0x6e>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <xQueueReceive+0x72>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <xQueueReceive+0x74>
 8003c26:	2300      	movs	r3, #0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10a      	bne.n	8003c42 <xQueueReceive+0x8e>
	__asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	61bb      	str	r3, [r7, #24]
}
 8003c3e:	bf00      	nop
 8003c40:	e7fe      	b.n	8003c40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c42:	f002 f89f 	bl	8005d84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d01f      	beq.n	8003c92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c56:	f000 fa5c 	bl	8004112 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	1e5a      	subs	r2, r3, #1
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00f      	beq.n	8003c8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6c:	3310      	adds	r3, #16
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f001 f826 	bl	8004cc0 <xTaskRemoveFromEventList>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d007      	beq.n	8003c8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c7a:	4b3d      	ldr	r3, [pc, #244]	; (8003d70 <xQueueReceive+0x1bc>)
 8003c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c8a:	f002 f8ab 	bl	8005de4 <vPortExitCritical>
				return pdPASS;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e069      	b.n	8003d66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d103      	bne.n	8003ca0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c98:	f002 f8a4 	bl	8005de4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	e062      	b.n	8003d66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ca6:	f107 0310 	add.w	r3, r7, #16
 8003caa:	4618      	mov	r0, r3
 8003cac:	f001 f86c 	bl	8004d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cb4:	f002 f896 	bl	8005de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cb8:	f000 fdbc 	bl	8004834 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cbc:	f002 f862 	bl	8005d84 <vPortEnterCritical>
 8003cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cc6:	b25b      	sxtb	r3, r3
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ccc:	d103      	bne.n	8003cd6 <xQueueReceive+0x122>
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cdc:	b25b      	sxtb	r3, r3
 8003cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce2:	d103      	bne.n	8003cec <xQueueReceive+0x138>
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cec:	f002 f87a 	bl	8005de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cf0:	1d3a      	adds	r2, r7, #4
 8003cf2:	f107 0310 	add.w	r3, r7, #16
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f001 f85b 	bl	8004db4 <xTaskCheckForTimeOut>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d123      	bne.n	8003d4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d06:	f000 fa7c 	bl	8004202 <prvIsQueueEmpty>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d017      	beq.n	8003d40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d12:	3324      	adds	r3, #36	; 0x24
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	4611      	mov	r1, r2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 ff81 	bl	8004c20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d20:	f000 fa1d 	bl	800415e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d24:	f000 fd94 	bl	8004850 <xTaskResumeAll>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d189      	bne.n	8003c42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d2e:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <xQueueReceive+0x1bc>)
 8003d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	e780      	b.n	8003c42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d42:	f000 fa0c 	bl	800415e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d46:	f000 fd83 	bl	8004850 <xTaskResumeAll>
 8003d4a:	e77a      	b.n	8003c42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d4e:	f000 fa06 	bl	800415e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d52:	f000 fd7d 	bl	8004850 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d58:	f000 fa53 	bl	8004202 <prvIsQueueEmpty>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f43f af6f 	beq.w	8003c42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3730      	adds	r7, #48	; 0x30
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	e000ed04 	.word	0xe000ed04

08003d74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08e      	sub	sp, #56	; 0x38
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10a      	bne.n	8003da6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	623b      	str	r3, [r7, #32]
}
 8003da2:	bf00      	nop
 8003da4:	e7fe      	b.n	8003da4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	61fb      	str	r3, [r7, #28]
}
 8003dc0:	bf00      	nop
 8003dc2:	e7fe      	b.n	8003dc2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dc4:	f001 f986 	bl	80050d4 <xTaskGetSchedulerState>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d102      	bne.n	8003dd4 <xQueueSemaphoreTake+0x60>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <xQueueSemaphoreTake+0x64>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <xQueueSemaphoreTake+0x66>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10a      	bne.n	8003df4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	61bb      	str	r3, [r7, #24]
}
 8003df0:	bf00      	nop
 8003df2:	e7fe      	b.n	8003df2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003df4:	f001 ffc6 	bl	8005d84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d024      	beq.n	8003e4e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e06:	1e5a      	subs	r2, r3, #1
 8003e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d104      	bne.n	8003e1e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003e14:	f001 fad4 	bl	80053c0 <pvTaskIncrementMutexHeldCount>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00f      	beq.n	8003e46 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e28:	3310      	adds	r3, #16
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 ff48 	bl	8004cc0 <xTaskRemoveFromEventList>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d007      	beq.n	8003e46 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e36:	4b54      	ldr	r3, [pc, #336]	; (8003f88 <xQueueSemaphoreTake+0x214>)
 8003e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e46:	f001 ffcd 	bl	8005de4 <vPortExitCritical>
				return pdPASS;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e097      	b.n	8003f7e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d111      	bne.n	8003e78 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	617b      	str	r3, [r7, #20]
}
 8003e6c:	bf00      	nop
 8003e6e:	e7fe      	b.n	8003e6e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003e70:	f001 ffb8 	bl	8005de4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e082      	b.n	8003f7e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e7e:	f107 030c 	add.w	r3, r7, #12
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 ff80 	bl	8004d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e8c:	f001 ffaa 	bl	8005de4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e90:	f000 fcd0 	bl	8004834 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e94:	f001 ff76 	bl	8005d84 <vPortEnterCritical>
 8003e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e9e:	b25b      	sxtb	r3, r3
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea4:	d103      	bne.n	8003eae <xQueueSemaphoreTake+0x13a>
 8003ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eb4:	b25b      	sxtb	r3, r3
 8003eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eba:	d103      	bne.n	8003ec4 <xQueueSemaphoreTake+0x150>
 8003ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ec4:	f001 ff8e 	bl	8005de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ec8:	463a      	mov	r2, r7
 8003eca:	f107 030c 	add.w	r3, r7, #12
 8003ece:	4611      	mov	r1, r2
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 ff6f 	bl	8004db4 <xTaskCheckForTimeOut>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d132      	bne.n	8003f42 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003edc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ede:	f000 f990 	bl	8004202 <prvIsQueueEmpty>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d026      	beq.n	8003f36 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d109      	bne.n	8003f04 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003ef0:	f001 ff48 	bl	8005d84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f001 f909 	bl	8005110 <xTaskPriorityInherit>
 8003efe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003f00:	f001 ff70 	bl	8005de4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f06:	3324      	adds	r3, #36	; 0x24
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fe87 	bl	8004c20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f14:	f000 f923 	bl	800415e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f18:	f000 fc9a 	bl	8004850 <xTaskResumeAll>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f47f af68 	bne.w	8003df4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003f24:	4b18      	ldr	r3, [pc, #96]	; (8003f88 <xQueueSemaphoreTake+0x214>)
 8003f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	e75e      	b.n	8003df4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003f36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f38:	f000 f911 	bl	800415e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f3c:	f000 fc88 	bl	8004850 <xTaskResumeAll>
 8003f40:	e758      	b.n	8003df4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003f42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f44:	f000 f90b 	bl	800415e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f48:	f000 fc82 	bl	8004850 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f4e:	f000 f958 	bl	8004202 <prvIsQueueEmpty>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f43f af4d 	beq.w	8003df4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00d      	beq.n	8003f7c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003f60:	f001 ff10 	bl	8005d84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003f64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f66:	f000 f852 	bl	800400e <prvGetDisinheritPriorityAfterTimeout>
 8003f6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f72:	4618      	mov	r0, r3
 8003f74:	f001 f9a2 	bl	80052bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003f78:	f001 ff34 	bl	8005de4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3738      	adds	r7, #56	; 0x38
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	e000ed04 	.word	0xe000ed04

08003f8c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10a      	bne.n	8003fb0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8003f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	60bb      	str	r3, [r7, #8]
}
 8003fac:	bf00      	nop
 8003fae:	e7fe      	b.n	8003fae <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8003fb0:	f001 fee8 	bl	8005d84 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003fba:	f001 ff13 	bl	8005de4 <vPortExitCritical>

	return uxReturn;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10a      	bne.n	8003ff0 <vQueueDelete+0x28>
	__asm volatile
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	60bb      	str	r3, [r7, #8]
}
 8003fec:	bf00      	nop
 8003fee:	e7fe      	b.n	8003fee <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 f95f 	bl	80042b4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d102      	bne.n	8004006 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f002 f8ad 	bl	8006160 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004006:	bf00      	nop
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800400e:	b480      	push	{r7}
 8004010:	b085      	sub	sp, #20
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2b00      	cmp	r3, #0
 800401c:	d006      	beq.n	800402c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	e001      	b.n	8004030 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800402c:	2300      	movs	r3, #0
 800402e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004030:	68fb      	ldr	r3, [r7, #12]
	}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b086      	sub	sp, #24
 8004042:	af00      	add	r7, sp, #0
 8004044:	60f8      	str	r0, [r7, #12]
 8004046:	60b9      	str	r1, [r7, #8]
 8004048:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10d      	bne.n	8004078 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d14d      	bne.n	8004100 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	4618      	mov	r0, r3
 800406a:	f001 f8b9 	bl	80051e0 <xTaskPriorityDisinherit>
 800406e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	609a      	str	r2, [r3, #8]
 8004076:	e043      	b.n	8004100 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d119      	bne.n	80040b2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6858      	ldr	r0, [r3, #4]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	461a      	mov	r2, r3
 8004088:	68b9      	ldr	r1, [r7, #8]
 800408a:	f002 fb5d 	bl	8006748 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	441a      	add	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d32b      	bcc.n	8004100 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	605a      	str	r2, [r3, #4]
 80040b0:	e026      	b.n	8004100 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	68d8      	ldr	r0, [r3, #12]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	461a      	mov	r2, r3
 80040bc:	68b9      	ldr	r1, [r7, #8]
 80040be:	f002 fb43 	bl	8006748 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	425b      	negs	r3, r3
 80040cc:	441a      	add	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d207      	bcs.n	80040ee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	425b      	negs	r3, r3
 80040e8:	441a      	add	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d105      	bne.n	8004100 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	3b01      	subs	r3, #1
 80040fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004108:	697b      	ldr	r3, [r7, #20]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b082      	sub	sp, #8
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004120:	2b00      	cmp	r3, #0
 8004122:	d018      	beq.n	8004156 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	441a      	add	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	429a      	cmp	r2, r3
 800413c:	d303      	bcc.n	8004146 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68d9      	ldr	r1, [r3, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	461a      	mov	r2, r3
 8004150:	6838      	ldr	r0, [r7, #0]
 8004152:	f002 faf9 	bl	8006748 <memcpy>
	}
}
 8004156:	bf00      	nop
 8004158:	3708      	adds	r7, #8
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b084      	sub	sp, #16
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004166:	f001 fe0d 	bl	8005d84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004170:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004172:	e011      	b.n	8004198 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	2b00      	cmp	r3, #0
 800417a:	d012      	beq.n	80041a2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3324      	adds	r3, #36	; 0x24
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fd9d 	bl	8004cc0 <xTaskRemoveFromEventList>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800418c:	f000 fe74 	bl	8004e78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	3b01      	subs	r3, #1
 8004194:	b2db      	uxtb	r3, r3
 8004196:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800419c:	2b00      	cmp	r3, #0
 800419e:	dce9      	bgt.n	8004174 <prvUnlockQueue+0x16>
 80041a0:	e000      	b.n	80041a4 <prvUnlockQueue+0x46>
					break;
 80041a2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	22ff      	movs	r2, #255	; 0xff
 80041a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80041ac:	f001 fe1a 	bl	8005de4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80041b0:	f001 fde8 	bl	8005d84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041ba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041bc:	e011      	b.n	80041e2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d012      	beq.n	80041ec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3310      	adds	r3, #16
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fd78 	bl	8004cc0 <xTaskRemoveFromEventList>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041d6:	f000 fe4f 	bl	8004e78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041da:	7bbb      	ldrb	r3, [r7, #14]
 80041dc:	3b01      	subs	r3, #1
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	dce9      	bgt.n	80041be <prvUnlockQueue+0x60>
 80041ea:	e000      	b.n	80041ee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041ec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	22ff      	movs	r2, #255	; 0xff
 80041f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80041f6:	f001 fdf5 	bl	8005de4 <vPortExitCritical>
}
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b084      	sub	sp, #16
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800420a:	f001 fdbb 	bl	8005d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004212:	2b00      	cmp	r3, #0
 8004214:	d102      	bne.n	800421c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004216:	2301      	movs	r3, #1
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	e001      	b.n	8004220 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800421c:	2300      	movs	r3, #0
 800421e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004220:	f001 fde0 	bl	8005de4 <vPortExitCritical>

	return xReturn;
 8004224:	68fb      	ldr	r3, [r7, #12]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b084      	sub	sp, #16
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004236:	f001 fda5 	bl	8005d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004242:	429a      	cmp	r2, r3
 8004244:	d102      	bne.n	800424c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004246:	2301      	movs	r3, #1
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	e001      	b.n	8004250 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004250:	f001 fdc8 	bl	8005de4 <vPortExitCritical>

	return xReturn;
 8004254:	68fb      	ldr	r3, [r7, #12]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	e014      	b.n	800429a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004270:	4a0f      	ldr	r2, [pc, #60]	; (80042b0 <vQueueAddToRegistry+0x50>)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10b      	bne.n	8004294 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800427c:	490c      	ldr	r1, [pc, #48]	; (80042b0 <vQueueAddToRegistry+0x50>)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004286:	4a0a      	ldr	r2, [pc, #40]	; (80042b0 <vQueueAddToRegistry+0x50>)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	4413      	add	r3, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004292:	e006      	b.n	80042a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3301      	adds	r3, #1
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b07      	cmp	r3, #7
 800429e:	d9e7      	bls.n	8004270 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80042a0:	bf00      	nop
 80042a2:	bf00      	nop
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	200008dc 	.word	0x200008dc

080042b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	e016      	b.n	80042f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80042c2:	4a10      	ldr	r2, [pc, #64]	; (8004304 <vQueueUnregisterQueue+0x50>)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	4413      	add	r3, r2
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d10b      	bne.n	80042ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80042d2:	4a0c      	ldr	r2, [pc, #48]	; (8004304 <vQueueUnregisterQueue+0x50>)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2100      	movs	r1, #0
 80042d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80042dc:	4a09      	ldr	r2, [pc, #36]	; (8004304 <vQueueUnregisterQueue+0x50>)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	4413      	add	r3, r2
 80042e4:	2200      	movs	r2, #0
 80042e6:	605a      	str	r2, [r3, #4]
				break;
 80042e8:	e006      	b.n	80042f8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3301      	adds	r3, #1
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b07      	cmp	r3, #7
 80042f4:	d9e5      	bls.n	80042c2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80042f6:	bf00      	nop
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	200008dc 	.word	0x200008dc

08004308 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004318:	f001 fd34 	bl	8005d84 <vPortEnterCritical>
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004322:	b25b      	sxtb	r3, r3
 8004324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004328:	d103      	bne.n	8004332 <vQueueWaitForMessageRestricted+0x2a>
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004338:	b25b      	sxtb	r3, r3
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433e:	d103      	bne.n	8004348 <vQueueWaitForMessageRestricted+0x40>
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004348:	f001 fd4c 	bl	8005de4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	2b00      	cmp	r3, #0
 8004352:	d106      	bne.n	8004362 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	3324      	adds	r3, #36	; 0x24
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	68b9      	ldr	r1, [r7, #8]
 800435c:	4618      	mov	r0, r3
 800435e:	f000 fc83 	bl	8004c68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004362:	6978      	ldr	r0, [r7, #20]
 8004364:	f7ff fefb 	bl	800415e <prvUnlockQueue>
	}
 8004368:	bf00      	nop
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08e      	sub	sp, #56	; 0x38
 8004374:	af04      	add	r7, sp, #16
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800437e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10a      	bne.n	800439a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	623b      	str	r3, [r7, #32]
}
 8004396:	bf00      	nop
 8004398:	e7fe      	b.n	8004398 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10a      	bne.n	80043b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	61fb      	str	r3, [r7, #28]
}
 80043b2:	bf00      	nop
 80043b4:	e7fe      	b.n	80043b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043b6:	23ac      	movs	r3, #172	; 0xac
 80043b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2bac      	cmp	r3, #172	; 0xac
 80043be:	d00a      	beq.n	80043d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	61bb      	str	r3, [r7, #24]
}
 80043d2:	bf00      	nop
 80043d4:	e7fe      	b.n	80043d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d01e      	beq.n	800441c <xTaskCreateStatic+0xac>
 80043de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01b      	beq.n	800441c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f0:	2202      	movs	r2, #2
 80043f2:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043f6:	2300      	movs	r3, #0
 80043f8:	9303      	str	r3, [sp, #12]
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	9302      	str	r3, [sp, #8]
 80043fe:	f107 0314 	add.w	r3, r7, #20
 8004402:	9301      	str	r3, [sp, #4]
 8004404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f850 	bl	80044b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004414:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004416:	f000 f8f7 	bl	8004608 <prvAddNewTaskToReadyList>
 800441a:	e001      	b.n	8004420 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004420:	697b      	ldr	r3, [r7, #20]
	}
 8004422:	4618      	mov	r0, r3
 8004424:	3728      	adds	r7, #40	; 0x28
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800442a:	b580      	push	{r7, lr}
 800442c:	b08c      	sub	sp, #48	; 0x30
 800442e:	af04      	add	r7, sp, #16
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	603b      	str	r3, [r7, #0]
 8004436:	4613      	mov	r3, r2
 8004438:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800443a:	88fb      	ldrh	r3, [r7, #6]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4618      	mov	r0, r3
 8004440:	f001 fdc2 	bl	8005fc8 <pvPortMalloc>
 8004444:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00e      	beq.n	800446a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800444c:	20ac      	movs	r0, #172	; 0xac
 800444e:	f001 fdbb 	bl	8005fc8 <pvPortMalloc>
 8004452:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
 8004460:	e005      	b.n	800446e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004462:	6978      	ldr	r0, [r7, #20]
 8004464:	f001 fe7c 	bl	8006160 <vPortFree>
 8004468:	e001      	b.n	800446e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d017      	beq.n	80044a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800447c:	88fa      	ldrh	r2, [r7, #6]
 800447e:	2300      	movs	r3, #0
 8004480:	9303      	str	r3, [sp, #12]
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	9302      	str	r3, [sp, #8]
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 f80e 	bl	80044b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004498:	69f8      	ldr	r0, [r7, #28]
 800449a:	f000 f8b5 	bl	8004608 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800449e:	2301      	movs	r3, #1
 80044a0:	61bb      	str	r3, [r7, #24]
 80044a2:	e002      	b.n	80044aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044a4:	f04f 33ff 	mov.w	r3, #4294967295
 80044a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044aa:	69bb      	ldr	r3, [r7, #24]
	}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3720      	adds	r7, #32
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	461a      	mov	r2, r3
 80044cc:	21a5      	movs	r1, #165	; 0xa5
 80044ce:	f002 f86a 	bl	80065a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044dc:	3b01      	subs	r3, #1
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	f023 0307 	bic.w	r3, r3, #7
 80044ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <prvInitialiseNewTask+0x58>
	__asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	617b      	str	r3, [r7, #20]
}
 8004508:	bf00      	nop
 800450a:	e7fe      	b.n	800450a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d01f      	beq.n	8004552 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004512:	2300      	movs	r3, #0
 8004514:	61fb      	str	r3, [r7, #28]
 8004516:	e012      	b.n	800453e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	4413      	add	r3, r2
 800451e:	7819      	ldrb	r1, [r3, #0]
 8004520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	4413      	add	r3, r2
 8004526:	3334      	adds	r3, #52	; 0x34
 8004528:	460a      	mov	r2, r1
 800452a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	4413      	add	r3, r2
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d006      	beq.n	8004546 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	3301      	adds	r3, #1
 800453c:	61fb      	str	r3, [r7, #28]
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	2b0f      	cmp	r3, #15
 8004542:	d9e9      	bls.n	8004518 <prvInitialiseNewTask+0x64>
 8004544:	e000      	b.n	8004548 <prvInitialiseNewTask+0x94>
			{
				break;
 8004546:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004550:	e003      	b.n	800455a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	2b37      	cmp	r3, #55	; 0x37
 800455e:	d901      	bls.n	8004564 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004560:	2337      	movs	r3, #55	; 0x37
 8004562:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004568:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800456e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	2200      	movs	r2, #0
 8004574:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004578:	3304      	adds	r3, #4
 800457a:	4618      	mov	r0, r3
 800457c:	f7fe ff12 	bl	80033a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	3318      	adds	r3, #24
 8004584:	4618      	mov	r0, r3
 8004586:	f7fe ff0d 	bl	80033a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004592:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800459e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	2200      	movs	r2, #0
 80045a4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80045b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b8:	3358      	adds	r3, #88	; 0x58
 80045ba:	224c      	movs	r2, #76	; 0x4c
 80045bc:	2100      	movs	r1, #0
 80045be:	4618      	mov	r0, r3
 80045c0:	f001 fff1 	bl	80065a6 <memset>
 80045c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c6:	4a0d      	ldr	r2, [pc, #52]	; (80045fc <prvInitialiseNewTask+0x148>)
 80045c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80045ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045cc:	4a0c      	ldr	r2, [pc, #48]	; (8004600 <prvInitialiseNewTask+0x14c>)
 80045ce:	661a      	str	r2, [r3, #96]	; 0x60
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	4a0c      	ldr	r2, [pc, #48]	; (8004604 <prvInitialiseNewTask+0x150>)
 80045d4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	68f9      	ldr	r1, [r7, #12]
 80045da:	69b8      	ldr	r0, [r7, #24]
 80045dc:	f001 faa6 	bl	8005b2c <pxPortInitialiseStack>
 80045e0:	4602      	mov	r2, r0
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045f2:	bf00      	nop
 80045f4:	3720      	adds	r7, #32
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	200084a8 	.word	0x200084a8
 8004600:	20008510 	.word	0x20008510
 8004604:	20008578 	.word	0x20008578

08004608 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004610:	f001 fbb8 	bl	8005d84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004614:	4b2d      	ldr	r3, [pc, #180]	; (80046cc <prvAddNewTaskToReadyList+0xc4>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3301      	adds	r3, #1
 800461a:	4a2c      	ldr	r2, [pc, #176]	; (80046cc <prvAddNewTaskToReadyList+0xc4>)
 800461c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800461e:	4b2c      	ldr	r3, [pc, #176]	; (80046d0 <prvAddNewTaskToReadyList+0xc8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d109      	bne.n	800463a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004626:	4a2a      	ldr	r2, [pc, #168]	; (80046d0 <prvAddNewTaskToReadyList+0xc8>)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800462c:	4b27      	ldr	r3, [pc, #156]	; (80046cc <prvAddNewTaskToReadyList+0xc4>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d110      	bne.n	8004656 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004634:	f000 fc44 	bl	8004ec0 <prvInitialiseTaskLists>
 8004638:	e00d      	b.n	8004656 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800463a:	4b26      	ldr	r3, [pc, #152]	; (80046d4 <prvAddNewTaskToReadyList+0xcc>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d109      	bne.n	8004656 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004642:	4b23      	ldr	r3, [pc, #140]	; (80046d0 <prvAddNewTaskToReadyList+0xc8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	429a      	cmp	r2, r3
 800464e:	d802      	bhi.n	8004656 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004650:	4a1f      	ldr	r2, [pc, #124]	; (80046d0 <prvAddNewTaskToReadyList+0xc8>)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004656:	4b20      	ldr	r3, [pc, #128]	; (80046d8 <prvAddNewTaskToReadyList+0xd0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3301      	adds	r3, #1
 800465c:	4a1e      	ldr	r2, [pc, #120]	; (80046d8 <prvAddNewTaskToReadyList+0xd0>)
 800465e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004660:	4b1d      	ldr	r3, [pc, #116]	; (80046d8 <prvAddNewTaskToReadyList+0xd0>)
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466c:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <prvAddNewTaskToReadyList+0xd4>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d903      	bls.n	800467c <prvAddNewTaskToReadyList+0x74>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	4a18      	ldr	r2, [pc, #96]	; (80046dc <prvAddNewTaskToReadyList+0xd4>)
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4a15      	ldr	r2, [pc, #84]	; (80046e0 <prvAddNewTaskToReadyList+0xd8>)
 800468a:	441a      	add	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3304      	adds	r3, #4
 8004690:	4619      	mov	r1, r3
 8004692:	4610      	mov	r0, r2
 8004694:	f7fe fe93 	bl	80033be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004698:	f001 fba4 	bl	8005de4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800469c:	4b0d      	ldr	r3, [pc, #52]	; (80046d4 <prvAddNewTaskToReadyList+0xcc>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00e      	beq.n	80046c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046a4:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <prvAddNewTaskToReadyList+0xc8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d207      	bcs.n	80046c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046b2:	4b0c      	ldr	r3, [pc, #48]	; (80046e4 <prvAddNewTaskToReadyList+0xdc>)
 80046b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046c2:	bf00      	nop
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20000df0 	.word	0x20000df0
 80046d0:	2000091c 	.word	0x2000091c
 80046d4:	20000dfc 	.word	0x20000dfc
 80046d8:	20000e0c 	.word	0x20000e0c
 80046dc:	20000df8 	.word	0x20000df8
 80046e0:	20000920 	.word	0x20000920
 80046e4:	e000ed04 	.word	0xe000ed04

080046e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d017      	beq.n	800472a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046fa:	4b13      	ldr	r3, [pc, #76]	; (8004748 <vTaskDelay+0x60>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <vTaskDelay+0x30>
	__asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	60bb      	str	r3, [r7, #8]
}
 8004714:	bf00      	nop
 8004716:	e7fe      	b.n	8004716 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004718:	f000 f88c 	bl	8004834 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800471c:	2100      	movs	r1, #0
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fe62 	bl	80053e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004724:	f000 f894 	bl	8004850 <xTaskResumeAll>
 8004728:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d107      	bne.n	8004740 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004730:	4b06      	ldr	r3, [pc, #24]	; (800474c <vTaskDelay+0x64>)
 8004732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004740:	bf00      	nop
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	20000e18 	.word	0x20000e18
 800474c:	e000ed04 	.word	0xe000ed04

08004750 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08a      	sub	sp, #40	; 0x28
 8004754:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800475a:	2300      	movs	r3, #0
 800475c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800475e:	463a      	mov	r2, r7
 8004760:	1d39      	adds	r1, r7, #4
 8004762:	f107 0308 	add.w	r3, r7, #8
 8004766:	4618      	mov	r0, r3
 8004768:	f7fe fdc8 	bl	80032fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800476c:	6839      	ldr	r1, [r7, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	9202      	str	r2, [sp, #8]
 8004774:	9301      	str	r3, [sp, #4]
 8004776:	2300      	movs	r3, #0
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	2300      	movs	r3, #0
 800477c:	460a      	mov	r2, r1
 800477e:	4925      	ldr	r1, [pc, #148]	; (8004814 <vTaskStartScheduler+0xc4>)
 8004780:	4825      	ldr	r0, [pc, #148]	; (8004818 <vTaskStartScheduler+0xc8>)
 8004782:	f7ff fdf5 	bl	8004370 <xTaskCreateStatic>
 8004786:	4603      	mov	r3, r0
 8004788:	4a24      	ldr	r2, [pc, #144]	; (800481c <vTaskStartScheduler+0xcc>)
 800478a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800478c:	4b23      	ldr	r3, [pc, #140]	; (800481c <vTaskStartScheduler+0xcc>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004794:	2301      	movs	r3, #1
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	e001      	b.n	800479e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d102      	bne.n	80047aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80047a4:	f000 fe74 	bl	8005490 <xTimerCreateTimerTask>
 80047a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d11d      	bne.n	80047ec <vTaskStartScheduler+0x9c>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	613b      	str	r3, [r7, #16]
}
 80047c2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80047c4:	4b16      	ldr	r3, [pc, #88]	; (8004820 <vTaskStartScheduler+0xd0>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3358      	adds	r3, #88	; 0x58
 80047ca:	4a16      	ldr	r2, [pc, #88]	; (8004824 <vTaskStartScheduler+0xd4>)
 80047cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047ce:	4b16      	ldr	r3, [pc, #88]	; (8004828 <vTaskStartScheduler+0xd8>)
 80047d0:	f04f 32ff 	mov.w	r2, #4294967295
 80047d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047d6:	4b15      	ldr	r3, [pc, #84]	; (800482c <vTaskStartScheduler+0xdc>)
 80047d8:	2201      	movs	r2, #1
 80047da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047dc:	4b14      	ldr	r3, [pc, #80]	; (8004830 <vTaskStartScheduler+0xe0>)
 80047de:	2200      	movs	r2, #0
 80047e0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80047e2:	f7fb fec3 	bl	800056c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047e6:	f001 fa2b 	bl	8005c40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047ea:	e00e      	b.n	800480a <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f2:	d10a      	bne.n	800480a <vTaskStartScheduler+0xba>
	__asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	60fb      	str	r3, [r7, #12]
}
 8004806:	bf00      	nop
 8004808:	e7fe      	b.n	8004808 <vTaskStartScheduler+0xb8>
}
 800480a:	bf00      	nop
 800480c:	3718      	adds	r7, #24
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	08007364 	.word	0x08007364
 8004818:	08004e91 	.word	0x08004e91
 800481c:	20000e14 	.word	0x20000e14
 8004820:	2000091c 	.word	0x2000091c
 8004824:	2000006c 	.word	0x2000006c
 8004828:	20000e10 	.word	0x20000e10
 800482c:	20000dfc 	.word	0x20000dfc
 8004830:	20000df4 	.word	0x20000df4

08004834 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004838:	4b04      	ldr	r3, [pc, #16]	; (800484c <vTaskSuspendAll+0x18>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3301      	adds	r3, #1
 800483e:	4a03      	ldr	r2, [pc, #12]	; (800484c <vTaskSuspendAll+0x18>)
 8004840:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004842:	bf00      	nop
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	20000e18 	.word	0x20000e18

08004850 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800485a:	2300      	movs	r3, #0
 800485c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800485e:	4b42      	ldr	r3, [pc, #264]	; (8004968 <xTaskResumeAll+0x118>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10a      	bne.n	800487c <xTaskResumeAll+0x2c>
	__asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	603b      	str	r3, [r7, #0]
}
 8004878:	bf00      	nop
 800487a:	e7fe      	b.n	800487a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800487c:	f001 fa82 	bl	8005d84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004880:	4b39      	ldr	r3, [pc, #228]	; (8004968 <xTaskResumeAll+0x118>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3b01      	subs	r3, #1
 8004886:	4a38      	ldr	r2, [pc, #224]	; (8004968 <xTaskResumeAll+0x118>)
 8004888:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800488a:	4b37      	ldr	r3, [pc, #220]	; (8004968 <xTaskResumeAll+0x118>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d162      	bne.n	8004958 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004892:	4b36      	ldr	r3, [pc, #216]	; (800496c <xTaskResumeAll+0x11c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d05e      	beq.n	8004958 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800489a:	e02f      	b.n	80048fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800489c:	4b34      	ldr	r3, [pc, #208]	; (8004970 <xTaskResumeAll+0x120>)
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3318      	adds	r3, #24
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fe fde5 	bl	8003478 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3304      	adds	r3, #4
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fe fde0 	bl	8003478 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048bc:	4b2d      	ldr	r3, [pc, #180]	; (8004974 <xTaskResumeAll+0x124>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d903      	bls.n	80048cc <xTaskResumeAll+0x7c>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	4a2a      	ldr	r2, [pc, #168]	; (8004974 <xTaskResumeAll+0x124>)
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4a27      	ldr	r2, [pc, #156]	; (8004978 <xTaskResumeAll+0x128>)
 80048da:	441a      	add	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3304      	adds	r3, #4
 80048e0:	4619      	mov	r1, r3
 80048e2:	4610      	mov	r0, r2
 80048e4:	f7fe fd6b 	bl	80033be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ec:	4b23      	ldr	r3, [pc, #140]	; (800497c <xTaskResumeAll+0x12c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d302      	bcc.n	80048fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80048f6:	4b22      	ldr	r3, [pc, #136]	; (8004980 <xTaskResumeAll+0x130>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048fc:	4b1c      	ldr	r3, [pc, #112]	; (8004970 <xTaskResumeAll+0x120>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1cb      	bne.n	800489c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800490a:	f000 fbb3 	bl	8005074 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800490e:	4b1d      	ldr	r3, [pc, #116]	; (8004984 <xTaskResumeAll+0x134>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d010      	beq.n	800493c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800491a:	f000 f847 	bl	80049ac <xTaskIncrementTick>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d002      	beq.n	800492a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004924:	4b16      	ldr	r3, [pc, #88]	; (8004980 <xTaskResumeAll+0x130>)
 8004926:	2201      	movs	r2, #1
 8004928:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3b01      	subs	r3, #1
 800492e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f1      	bne.n	800491a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004936:	4b13      	ldr	r3, [pc, #76]	; (8004984 <xTaskResumeAll+0x134>)
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800493c:	4b10      	ldr	r3, [pc, #64]	; (8004980 <xTaskResumeAll+0x130>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d009      	beq.n	8004958 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004944:	2301      	movs	r3, #1
 8004946:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004948:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <xTaskResumeAll+0x138>)
 800494a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004958:	f001 fa44 	bl	8005de4 <vPortExitCritical>

	return xAlreadyYielded;
 800495c:	68bb      	ldr	r3, [r7, #8]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20000e18 	.word	0x20000e18
 800496c:	20000df0 	.word	0x20000df0
 8004970:	20000db0 	.word	0x20000db0
 8004974:	20000df8 	.word	0x20000df8
 8004978:	20000920 	.word	0x20000920
 800497c:	2000091c 	.word	0x2000091c
 8004980:	20000e04 	.word	0x20000e04
 8004984:	20000e00 	.word	0x20000e00
 8004988:	e000ed04 	.word	0xe000ed04

0800498c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004992:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <xTaskGetTickCount+0x1c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004998:	687b      	ldr	r3, [r7, #4]
}
 800499a:	4618      	mov	r0, r3
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	20000df4 	.word	0x20000df4

080049ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049b6:	4b4f      	ldr	r3, [pc, #316]	; (8004af4 <xTaskIncrementTick+0x148>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f040 808f 	bne.w	8004ade <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049c0:	4b4d      	ldr	r3, [pc, #308]	; (8004af8 <xTaskIncrementTick+0x14c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3301      	adds	r3, #1
 80049c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049c8:	4a4b      	ldr	r2, [pc, #300]	; (8004af8 <xTaskIncrementTick+0x14c>)
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d120      	bne.n	8004a16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80049d4:	4b49      	ldr	r3, [pc, #292]	; (8004afc <xTaskIncrementTick+0x150>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80049de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	603b      	str	r3, [r7, #0]
}
 80049f0:	bf00      	nop
 80049f2:	e7fe      	b.n	80049f2 <xTaskIncrementTick+0x46>
 80049f4:	4b41      	ldr	r3, [pc, #260]	; (8004afc <xTaskIncrementTick+0x150>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	4b41      	ldr	r3, [pc, #260]	; (8004b00 <xTaskIncrementTick+0x154>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a3f      	ldr	r2, [pc, #252]	; (8004afc <xTaskIncrementTick+0x150>)
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	4a3f      	ldr	r2, [pc, #252]	; (8004b00 <xTaskIncrementTick+0x154>)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6013      	str	r3, [r2, #0]
 8004a08:	4b3e      	ldr	r3, [pc, #248]	; (8004b04 <xTaskIncrementTick+0x158>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	4a3d      	ldr	r2, [pc, #244]	; (8004b04 <xTaskIncrementTick+0x158>)
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	f000 fb2f 	bl	8005074 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a16:	4b3c      	ldr	r3, [pc, #240]	; (8004b08 <xTaskIncrementTick+0x15c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d349      	bcc.n	8004ab4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a20:	4b36      	ldr	r3, [pc, #216]	; (8004afc <xTaskIncrementTick+0x150>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d104      	bne.n	8004a34 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a2a:	4b37      	ldr	r3, [pc, #220]	; (8004b08 <xTaskIncrementTick+0x15c>)
 8004a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a30:	601a      	str	r2, [r3, #0]
					break;
 8004a32:	e03f      	b.n	8004ab4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a34:	4b31      	ldr	r3, [pc, #196]	; (8004afc <xTaskIncrementTick+0x150>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d203      	bcs.n	8004a54 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a4c:	4a2e      	ldr	r2, [pc, #184]	; (8004b08 <xTaskIncrementTick+0x15c>)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a52:	e02f      	b.n	8004ab4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	3304      	adds	r3, #4
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7fe fd0d 	bl	8003478 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d004      	beq.n	8004a70 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	3318      	adds	r3, #24
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fe fd04 	bl	8003478 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a74:	4b25      	ldr	r3, [pc, #148]	; (8004b0c <xTaskIncrementTick+0x160>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d903      	bls.n	8004a84 <xTaskIncrementTick+0xd8>
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	4a22      	ldr	r2, [pc, #136]	; (8004b0c <xTaskIncrementTick+0x160>)
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4a1f      	ldr	r2, [pc, #124]	; (8004b10 <xTaskIncrementTick+0x164>)
 8004a92:	441a      	add	r2, r3
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	3304      	adds	r3, #4
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	f7fe fc8f 	bl	80033be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa4:	4b1b      	ldr	r3, [pc, #108]	; (8004b14 <xTaskIncrementTick+0x168>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d3b8      	bcc.n	8004a20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ab2:	e7b5      	b.n	8004a20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ab4:	4b17      	ldr	r3, [pc, #92]	; (8004b14 <xTaskIncrementTick+0x168>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aba:	4915      	ldr	r1, [pc, #84]	; (8004b10 <xTaskIncrementTick+0x164>)
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d901      	bls.n	8004ad0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004acc:	2301      	movs	r3, #1
 8004ace:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ad0:	4b11      	ldr	r3, [pc, #68]	; (8004b18 <xTaskIncrementTick+0x16c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d007      	beq.n	8004ae8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	e004      	b.n	8004ae8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004ade:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <xTaskIncrementTick+0x170>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	4a0d      	ldr	r2, [pc, #52]	; (8004b1c <xTaskIncrementTick+0x170>)
 8004ae6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004ae8:	697b      	ldr	r3, [r7, #20]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000e18 	.word	0x20000e18
 8004af8:	20000df4 	.word	0x20000df4
 8004afc:	20000da8 	.word	0x20000da8
 8004b00:	20000dac 	.word	0x20000dac
 8004b04:	20000e08 	.word	0x20000e08
 8004b08:	20000e10 	.word	0x20000e10
 8004b0c:	20000df8 	.word	0x20000df8
 8004b10:	20000920 	.word	0x20000920
 8004b14:	2000091c 	.word	0x2000091c
 8004b18:	20000e04 	.word	0x20000e04
 8004b1c:	20000e00 	.word	0x20000e00

08004b20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b26:	4b36      	ldr	r3, [pc, #216]	; (8004c00 <vTaskSwitchContext+0xe0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b2e:	4b35      	ldr	r3, [pc, #212]	; (8004c04 <vTaskSwitchContext+0xe4>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b34:	e05f      	b.n	8004bf6 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8004b36:	4b33      	ldr	r3, [pc, #204]	; (8004c04 <vTaskSwitchContext+0xe4>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004b3c:	f7fb fd1d 	bl	800057a <getRunTimeCounterValue>
 8004b40:	4603      	mov	r3, r0
 8004b42:	4a31      	ldr	r2, [pc, #196]	; (8004c08 <vTaskSwitchContext+0xe8>)
 8004b44:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004b46:	4b30      	ldr	r3, [pc, #192]	; (8004c08 <vTaskSwitchContext+0xe8>)
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	4b30      	ldr	r3, [pc, #192]	; (8004c0c <vTaskSwitchContext+0xec>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d909      	bls.n	8004b66 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004b52:	4b2f      	ldr	r3, [pc, #188]	; (8004c10 <vTaskSwitchContext+0xf0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004b58:	4a2b      	ldr	r2, [pc, #172]	; (8004c08 <vTaskSwitchContext+0xe8>)
 8004b5a:	6810      	ldr	r0, [r2, #0]
 8004b5c:	4a2b      	ldr	r2, [pc, #172]	; (8004c0c <vTaskSwitchContext+0xec>)
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	1a82      	subs	r2, r0, r2
 8004b62:	440a      	add	r2, r1
 8004b64:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8004b66:	4b28      	ldr	r3, [pc, #160]	; (8004c08 <vTaskSwitchContext+0xe8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a28      	ldr	r2, [pc, #160]	; (8004c0c <vTaskSwitchContext+0xec>)
 8004b6c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b6e:	4b29      	ldr	r3, [pc, #164]	; (8004c14 <vTaskSwitchContext+0xf4>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	60fb      	str	r3, [r7, #12]
 8004b74:	e010      	b.n	8004b98 <vTaskSwitchContext+0x78>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10a      	bne.n	8004b92 <vTaskSwitchContext+0x72>
	__asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	607b      	str	r3, [r7, #4]
}
 8004b8e:	bf00      	nop
 8004b90:	e7fe      	b.n	8004b90 <vTaskSwitchContext+0x70>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	491f      	ldr	r1, [pc, #124]	; (8004c18 <vTaskSwitchContext+0xf8>)
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0e4      	beq.n	8004b76 <vTaskSwitchContext+0x56>
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4a18      	ldr	r2, [pc, #96]	; (8004c18 <vTaskSwitchContext+0xf8>)
 8004bb8:	4413      	add	r3, r2
 8004bba:	60bb      	str	r3, [r7, #8]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	605a      	str	r2, [r3, #4]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	3308      	adds	r3, #8
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d104      	bne.n	8004bdc <vTaskSwitchContext+0xbc>
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	605a      	str	r2, [r3, #4]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	4a0b      	ldr	r2, [pc, #44]	; (8004c10 <vTaskSwitchContext+0xf0>)
 8004be4:	6013      	str	r3, [r2, #0]
 8004be6:	4a0b      	ldr	r2, [pc, #44]	; (8004c14 <vTaskSwitchContext+0xf4>)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004bec:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <vTaskSwitchContext+0xf0>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3358      	adds	r3, #88	; 0x58
 8004bf2:	4a0a      	ldr	r2, [pc, #40]	; (8004c1c <vTaskSwitchContext+0xfc>)
 8004bf4:	6013      	str	r3, [r2, #0]
}
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20000e18 	.word	0x20000e18
 8004c04:	20000e04 	.word	0x20000e04
 8004c08:	20000e20 	.word	0x20000e20
 8004c0c:	20000e1c 	.word	0x20000e1c
 8004c10:	2000091c 	.word	0x2000091c
 8004c14:	20000df8 	.word	0x20000df8
 8004c18:	20000920 	.word	0x20000920
 8004c1c:	2000006c 	.word	0x2000006c

08004c20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10a      	bne.n	8004c46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	60fb      	str	r3, [r7, #12]
}
 8004c42:	bf00      	nop
 8004c44:	e7fe      	b.n	8004c44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c46:	4b07      	ldr	r3, [pc, #28]	; (8004c64 <vTaskPlaceOnEventList+0x44>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3318      	adds	r3, #24
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fe fbd9 	bl	8003406 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c54:	2101      	movs	r1, #1
 8004c56:	6838      	ldr	r0, [r7, #0]
 8004c58:	f000 fbc6 	bl	80053e8 <prvAddCurrentTaskToDelayedList>
}
 8004c5c:	bf00      	nop
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	2000091c 	.word	0x2000091c

08004c68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10a      	bne.n	8004c90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	617b      	str	r3, [r7, #20]
}
 8004c8c:	bf00      	nop
 8004c8e:	e7fe      	b.n	8004c8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c90:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <vTaskPlaceOnEventListRestricted+0x54>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3318      	adds	r3, #24
 8004c96:	4619      	mov	r1, r3
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f7fe fb90 	bl	80033be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	68b8      	ldr	r0, [r7, #8]
 8004cae:	f000 fb9b 	bl	80053e8 <prvAddCurrentTaskToDelayedList>
	}
 8004cb2:	bf00      	nop
 8004cb4:	3718      	adds	r7, #24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	2000091c 	.word	0x2000091c

08004cc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10a      	bne.n	8004cec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	60fb      	str	r3, [r7, #12]
}
 8004ce8:	bf00      	nop
 8004cea:	e7fe      	b.n	8004cea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	3318      	adds	r3, #24
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fe fbc1 	bl	8003478 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cf6:	4b1e      	ldr	r3, [pc, #120]	; (8004d70 <xTaskRemoveFromEventList+0xb0>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d11d      	bne.n	8004d3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	3304      	adds	r3, #4
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe fbb8 	bl	8003478 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0c:	4b19      	ldr	r3, [pc, #100]	; (8004d74 <xTaskRemoveFromEventList+0xb4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d903      	bls.n	8004d1c <xTaskRemoveFromEventList+0x5c>
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	4a16      	ldr	r2, [pc, #88]	; (8004d74 <xTaskRemoveFromEventList+0xb4>)
 8004d1a:	6013      	str	r3, [r2, #0]
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d20:	4613      	mov	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4a13      	ldr	r2, [pc, #76]	; (8004d78 <xTaskRemoveFromEventList+0xb8>)
 8004d2a:	441a      	add	r2, r3
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	4619      	mov	r1, r3
 8004d32:	4610      	mov	r0, r2
 8004d34:	f7fe fb43 	bl	80033be <vListInsertEnd>
 8004d38:	e005      	b.n	8004d46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	3318      	adds	r3, #24
 8004d3e:	4619      	mov	r1, r3
 8004d40:	480e      	ldr	r0, [pc, #56]	; (8004d7c <xTaskRemoveFromEventList+0xbc>)
 8004d42:	f7fe fb3c 	bl	80033be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4a:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <xTaskRemoveFromEventList+0xc0>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d905      	bls.n	8004d60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d54:	2301      	movs	r3, #1
 8004d56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d58:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <xTaskRemoveFromEventList+0xc4>)
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	e001      	b.n	8004d64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004d60:	2300      	movs	r3, #0
 8004d62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004d64:	697b      	ldr	r3, [r7, #20]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000e18 	.word	0x20000e18
 8004d74:	20000df8 	.word	0x20000df8
 8004d78:	20000920 	.word	0x20000920
 8004d7c:	20000db0 	.word	0x20000db0
 8004d80:	2000091c 	.word	0x2000091c
 8004d84:	20000e04 	.word	0x20000e04

08004d88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d90:	4b06      	ldr	r3, [pc, #24]	; (8004dac <vTaskInternalSetTimeOutState+0x24>)
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <vTaskInternalSetTimeOutState+0x28>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	605a      	str	r2, [r3, #4]
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	20000e08 	.word	0x20000e08
 8004db0:	20000df4 	.word	0x20000df4

08004db4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b088      	sub	sp, #32
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10a      	bne.n	8004dda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	613b      	str	r3, [r7, #16]
}
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10a      	bne.n	8004df6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	60fb      	str	r3, [r7, #12]
}
 8004df2:	bf00      	nop
 8004df4:	e7fe      	b.n	8004df4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004df6:	f000 ffc5 	bl	8005d84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004dfa:	4b1d      	ldr	r3, [pc, #116]	; (8004e70 <xTaskCheckForTimeOut+0xbc>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e12:	d102      	bne.n	8004e1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61fb      	str	r3, [r7, #28]
 8004e18:	e023      	b.n	8004e62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	4b15      	ldr	r3, [pc, #84]	; (8004e74 <xTaskCheckForTimeOut+0xc0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d007      	beq.n	8004e36 <xTaskCheckForTimeOut+0x82>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d302      	bcc.n	8004e36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e30:	2301      	movs	r3, #1
 8004e32:	61fb      	str	r3, [r7, #28]
 8004e34:	e015      	b.n	8004e62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d20b      	bcs.n	8004e58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	1ad2      	subs	r2, r2, r3
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff ff9b 	bl	8004d88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61fb      	str	r3, [r7, #28]
 8004e56:	e004      	b.n	8004e62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004e62:	f000 ffbf 	bl	8005de4 <vPortExitCritical>

	return xReturn;
 8004e66:	69fb      	ldr	r3, [r7, #28]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3720      	adds	r7, #32
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20000df4 	.word	0x20000df4
 8004e74:	20000e08 	.word	0x20000e08

08004e78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e7c:	4b03      	ldr	r3, [pc, #12]	; (8004e8c <vTaskMissedYield+0x14>)
 8004e7e:	2201      	movs	r2, #1
 8004e80:	601a      	str	r2, [r3, #0]
}
 8004e82:	bf00      	nop
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	20000e04 	.word	0x20000e04

08004e90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e98:	f000 f852 	bl	8004f40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e9c:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <prvIdleTask+0x28>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d9f9      	bls.n	8004e98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ea4:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <prvIdleTask+0x2c>)
 8004ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004eb4:	e7f0      	b.n	8004e98 <prvIdleTask+0x8>
 8004eb6:	bf00      	nop
 8004eb8:	20000920 	.word	0x20000920
 8004ebc:	e000ed04 	.word	0xe000ed04

08004ec0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	607b      	str	r3, [r7, #4]
 8004eca:	e00c      	b.n	8004ee6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4a12      	ldr	r2, [pc, #72]	; (8004f20 <prvInitialiseTaskLists+0x60>)
 8004ed8:	4413      	add	r3, r2
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fe fa42 	bl	8003364 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	607b      	str	r3, [r7, #4]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b37      	cmp	r3, #55	; 0x37
 8004eea:	d9ef      	bls.n	8004ecc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004eec:	480d      	ldr	r0, [pc, #52]	; (8004f24 <prvInitialiseTaskLists+0x64>)
 8004eee:	f7fe fa39 	bl	8003364 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ef2:	480d      	ldr	r0, [pc, #52]	; (8004f28 <prvInitialiseTaskLists+0x68>)
 8004ef4:	f7fe fa36 	bl	8003364 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ef8:	480c      	ldr	r0, [pc, #48]	; (8004f2c <prvInitialiseTaskLists+0x6c>)
 8004efa:	f7fe fa33 	bl	8003364 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004efe:	480c      	ldr	r0, [pc, #48]	; (8004f30 <prvInitialiseTaskLists+0x70>)
 8004f00:	f7fe fa30 	bl	8003364 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f04:	480b      	ldr	r0, [pc, #44]	; (8004f34 <prvInitialiseTaskLists+0x74>)
 8004f06:	f7fe fa2d 	bl	8003364 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <prvInitialiseTaskLists+0x78>)
 8004f0c:	4a05      	ldr	r2, [pc, #20]	; (8004f24 <prvInitialiseTaskLists+0x64>)
 8004f0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f10:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <prvInitialiseTaskLists+0x7c>)
 8004f12:	4a05      	ldr	r2, [pc, #20]	; (8004f28 <prvInitialiseTaskLists+0x68>)
 8004f14:	601a      	str	r2, [r3, #0]
}
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000920 	.word	0x20000920
 8004f24:	20000d80 	.word	0x20000d80
 8004f28:	20000d94 	.word	0x20000d94
 8004f2c:	20000db0 	.word	0x20000db0
 8004f30:	20000dc4 	.word	0x20000dc4
 8004f34:	20000ddc 	.word	0x20000ddc
 8004f38:	20000da8 	.word	0x20000da8
 8004f3c:	20000dac 	.word	0x20000dac

08004f40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f46:	e019      	b.n	8004f7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f48:	f000 ff1c 	bl	8005d84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f4c:	4b10      	ldr	r3, [pc, #64]	; (8004f90 <prvCheckTasksWaitingTermination+0x50>)
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3304      	adds	r3, #4
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fe fa8d 	bl	8003478 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004f5e:	4b0d      	ldr	r3, [pc, #52]	; (8004f94 <prvCheckTasksWaitingTermination+0x54>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	4a0b      	ldr	r2, [pc, #44]	; (8004f94 <prvCheckTasksWaitingTermination+0x54>)
 8004f66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004f68:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <prvCheckTasksWaitingTermination+0x58>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	4a0a      	ldr	r2, [pc, #40]	; (8004f98 <prvCheckTasksWaitingTermination+0x58>)
 8004f70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f72:	f000 ff37 	bl	8005de4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f848 	bl	800500c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f7c:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <prvCheckTasksWaitingTermination+0x58>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e1      	bne.n	8004f48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000dc4 	.word	0x20000dc4
 8004f94:	20000df0 	.word	0x20000df0
 8004f98:	20000dd8 	.word	0x20000dd8

08004f9c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004fa8:	e005      	b.n	8004fb6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3301      	adds	r3, #1
 8004fae:	607b      	str	r3, [r7, #4]
			ulCount++;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2ba5      	cmp	r3, #165	; 0xa5
 8004fbc:	d0f5      	beq.n	8004faa <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	089b      	lsrs	r3, r3, #2
 8004fc2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	b29b      	uxth	r3, r3
	}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d102      	bne.n	8004fe8 <uxTaskGetStackHighWaterMark+0x14>
 8004fe2:	4b09      	ldr	r3, [pc, #36]	; (8005008 <uxTaskGetStackHighWaterMark+0x34>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	e000      	b.n	8004fea <uxTaskGetStackHighWaterMark+0x16>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff0:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8004ff2:	6938      	ldr	r0, [r7, #16]
 8004ff4:	f7ff ffd2 	bl	8004f9c <prvTaskCheckFreeStackSpace>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
	}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3718      	adds	r7, #24
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	2000091c 	.word	0x2000091c

0800500c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3358      	adds	r3, #88	; 0x58
 8005018:	4618      	mov	r0, r3
 800501a:	f001 fadd 	bl	80065d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8005024:	2b00      	cmp	r3, #0
 8005026:	d108      	bne.n	800503a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502c:	4618      	mov	r0, r3
 800502e:	f001 f897 	bl	8006160 <vPortFree>
				vPortFree( pxTCB );
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f001 f894 	bl	8006160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005038:	e018      	b.n	800506c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8005040:	2b01      	cmp	r3, #1
 8005042:	d103      	bne.n	800504c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f001 f88b 	bl	8006160 <vPortFree>
	}
 800504a:	e00f      	b.n	800506c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8005052:	2b02      	cmp	r3, #2
 8005054:	d00a      	beq.n	800506c <prvDeleteTCB+0x60>
	__asm volatile
 8005056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	60fb      	str	r3, [r7, #12]
}
 8005068:	bf00      	nop
 800506a:	e7fe      	b.n	800506a <prvDeleteTCB+0x5e>
	}
 800506c:	bf00      	nop
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800507a:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <prvResetNextTaskUnblockTime+0x38>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d104      	bne.n	800508e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005084:	4b0a      	ldr	r3, [pc, #40]	; (80050b0 <prvResetNextTaskUnblockTime+0x3c>)
 8005086:	f04f 32ff 	mov.w	r2, #4294967295
 800508a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800508c:	e008      	b.n	80050a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800508e:	4b07      	ldr	r3, [pc, #28]	; (80050ac <prvResetNextTaskUnblockTime+0x38>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	4a04      	ldr	r2, [pc, #16]	; (80050b0 <prvResetNextTaskUnblockTime+0x3c>)
 800509e:	6013      	str	r3, [r2, #0]
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	20000da8 	.word	0x20000da8
 80050b0:	20000e10 	.word	0x20000e10

080050b4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80050ba:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <xTaskGetCurrentTaskHandle+0x1c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	607b      	str	r3, [r7, #4]

		return xReturn;
 80050c0:	687b      	ldr	r3, [r7, #4]
	}
 80050c2:	4618      	mov	r0, r3
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	2000091c 	.word	0x2000091c

080050d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80050da:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <xTaskGetSchedulerState+0x34>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d102      	bne.n	80050e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80050e2:	2301      	movs	r3, #1
 80050e4:	607b      	str	r3, [r7, #4]
 80050e6:	e008      	b.n	80050fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050e8:	4b08      	ldr	r3, [pc, #32]	; (800510c <xTaskGetSchedulerState+0x38>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d102      	bne.n	80050f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80050f0:	2302      	movs	r3, #2
 80050f2:	607b      	str	r3, [r7, #4]
 80050f4:	e001      	b.n	80050fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80050f6:	2300      	movs	r3, #0
 80050f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80050fa:	687b      	ldr	r3, [r7, #4]
	}
 80050fc:	4618      	mov	r0, r3
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	20000dfc 	.word	0x20000dfc
 800510c:	20000e18 	.word	0x20000e18

08005110 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800511c:	2300      	movs	r3, #0
 800511e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d051      	beq.n	80051ca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512a:	4b2a      	ldr	r3, [pc, #168]	; (80051d4 <xTaskPriorityInherit+0xc4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	429a      	cmp	r2, r3
 8005132:	d241      	bcs.n	80051b8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	2b00      	cmp	r3, #0
 800513a:	db06      	blt.n	800514a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800513c:	4b25      	ldr	r3, [pc, #148]	; (80051d4 <xTaskPriorityInherit+0xc4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005142:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	6959      	ldr	r1, [r3, #20]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005152:	4613      	mov	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4413      	add	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4a1f      	ldr	r2, [pc, #124]	; (80051d8 <xTaskPriorityInherit+0xc8>)
 800515c:	4413      	add	r3, r2
 800515e:	4299      	cmp	r1, r3
 8005160:	d122      	bne.n	80051a8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	3304      	adds	r3, #4
 8005166:	4618      	mov	r0, r3
 8005168:	f7fe f986 	bl	8003478 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800516c:	4b19      	ldr	r3, [pc, #100]	; (80051d4 <xTaskPriorityInherit+0xc4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517a:	4b18      	ldr	r3, [pc, #96]	; (80051dc <xTaskPriorityInherit+0xcc>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d903      	bls.n	800518a <xTaskPriorityInherit+0x7a>
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	4a15      	ldr	r2, [pc, #84]	; (80051dc <xTaskPriorityInherit+0xcc>)
 8005188:	6013      	str	r3, [r2, #0]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4a10      	ldr	r2, [pc, #64]	; (80051d8 <xTaskPriorityInherit+0xc8>)
 8005198:	441a      	add	r2, r3
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	3304      	adds	r3, #4
 800519e:	4619      	mov	r1, r3
 80051a0:	4610      	mov	r0, r2
 80051a2:	f7fe f90c 	bl	80033be <vListInsertEnd>
 80051a6:	e004      	b.n	80051b2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80051a8:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <xTaskPriorityInherit+0xc4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80051b2:	2301      	movs	r3, #1
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	e008      	b.n	80051ca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051bc:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <xTaskPriorityInherit+0xc4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d201      	bcs.n	80051ca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80051c6:	2301      	movs	r3, #1
 80051c8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051ca:	68fb      	ldr	r3, [r7, #12]
	}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	2000091c 	.word	0x2000091c
 80051d8:	20000920 	.word	0x20000920
 80051dc:	20000df8 	.word	0x20000df8

080051e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80051ec:	2300      	movs	r3, #0
 80051ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d056      	beq.n	80052a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80051f6:	4b2e      	ldr	r3, [pc, #184]	; (80052b0 <xTaskPriorityDisinherit+0xd0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d00a      	beq.n	8005216 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	60fb      	str	r3, [r7, #12]
}
 8005212:	bf00      	nop
 8005214:	e7fe      	b.n	8005214 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	60bb      	str	r3, [r7, #8]
}
 8005230:	bf00      	nop
 8005232:	e7fe      	b.n	8005232 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005238:	1e5a      	subs	r2, r3, #1
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005246:	429a      	cmp	r2, r3
 8005248:	d02c      	beq.n	80052a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800524e:	2b00      	cmp	r3, #0
 8005250:	d128      	bne.n	80052a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	3304      	adds	r3, #4
 8005256:	4618      	mov	r0, r3
 8005258:	f7fe f90e 	bl	8003478 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005274:	4b0f      	ldr	r3, [pc, #60]	; (80052b4 <xTaskPriorityDisinherit+0xd4>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d903      	bls.n	8005284 <xTaskPriorityDisinherit+0xa4>
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005280:	4a0c      	ldr	r2, [pc, #48]	; (80052b4 <xTaskPriorityDisinherit+0xd4>)
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005288:	4613      	mov	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4a09      	ldr	r2, [pc, #36]	; (80052b8 <xTaskPriorityDisinherit+0xd8>)
 8005292:	441a      	add	r2, r3
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	3304      	adds	r3, #4
 8005298:	4619      	mov	r1, r3
 800529a:	4610      	mov	r0, r2
 800529c:	f7fe f88f 	bl	80033be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052a0:	2301      	movs	r3, #1
 80052a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052a4:	697b      	ldr	r3, [r7, #20]
	}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	2000091c 	.word	0x2000091c
 80052b4:	20000df8 	.word	0x20000df8
 80052b8:	20000920 	.word	0x20000920

080052bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80052ca:	2301      	movs	r3, #1
 80052cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d06a      	beq.n	80053aa <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10a      	bne.n	80052f2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	60fb      	str	r3, [r7, #12]
}
 80052ee:	bf00      	nop
 80052f0:	e7fe      	b.n	80052f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d902      	bls.n	8005302 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	61fb      	str	r3, [r7, #28]
 8005300:	e002      	b.n	8005308 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005306:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	429a      	cmp	r2, r3
 8005310:	d04b      	beq.n	80053aa <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	429a      	cmp	r2, r3
 800531a:	d146      	bne.n	80053aa <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800531c:	4b25      	ldr	r3, [pc, #148]	; (80053b4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	429a      	cmp	r2, r3
 8005324:	d10a      	bne.n	800533c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	60bb      	str	r3, [r7, #8]
}
 8005338:	bf00      	nop
 800533a:	e7fe      	b.n	800533a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	2b00      	cmp	r3, #0
 800534e:	db04      	blt.n	800535a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	6959      	ldr	r1, [r3, #20]
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4613      	mov	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4a13      	ldr	r2, [pc, #76]	; (80053b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800536a:	4413      	add	r3, r2
 800536c:	4299      	cmp	r1, r3
 800536e:	d11c      	bne.n	80053aa <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	3304      	adds	r3, #4
 8005374:	4618      	mov	r0, r3
 8005376:	f7fe f87f 	bl	8003478 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800537e:	4b0f      	ldr	r3, [pc, #60]	; (80053bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	429a      	cmp	r2, r3
 8005384:	d903      	bls.n	800538e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	4a0c      	ldr	r2, [pc, #48]	; (80053bc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005392:	4613      	mov	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4a07      	ldr	r2, [pc, #28]	; (80053b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800539c:	441a      	add	r2, r3
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	3304      	adds	r3, #4
 80053a2:	4619      	mov	r1, r3
 80053a4:	4610      	mov	r0, r2
 80053a6:	f7fe f80a 	bl	80033be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053aa:	bf00      	nop
 80053ac:	3720      	adds	r7, #32
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	2000091c 	.word	0x2000091c
 80053b8:	20000920 	.word	0x20000920
 80053bc:	20000df8 	.word	0x20000df8

080053c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80053c4:	4b07      	ldr	r3, [pc, #28]	; (80053e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d004      	beq.n	80053d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80053cc:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053d2:	3201      	adds	r2, #1
 80053d4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80053d6:	4b03      	ldr	r3, [pc, #12]	; (80053e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80053d8:	681b      	ldr	r3, [r3, #0]
	}
 80053da:	4618      	mov	r0, r3
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	2000091c 	.word	0x2000091c

080053e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053f2:	4b21      	ldr	r3, [pc, #132]	; (8005478 <prvAddCurrentTaskToDelayedList+0x90>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053f8:	4b20      	ldr	r3, [pc, #128]	; (800547c <prvAddCurrentTaskToDelayedList+0x94>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3304      	adds	r3, #4
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fe f83a 	bl	8003478 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800540a:	d10a      	bne.n	8005422 <prvAddCurrentTaskToDelayedList+0x3a>
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d007      	beq.n	8005422 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005412:	4b1a      	ldr	r3, [pc, #104]	; (800547c <prvAddCurrentTaskToDelayedList+0x94>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3304      	adds	r3, #4
 8005418:	4619      	mov	r1, r3
 800541a:	4819      	ldr	r0, [pc, #100]	; (8005480 <prvAddCurrentTaskToDelayedList+0x98>)
 800541c:	f7fd ffcf 	bl	80033be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005420:	e026      	b.n	8005470 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4413      	add	r3, r2
 8005428:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800542a:	4b14      	ldr	r3, [pc, #80]	; (800547c <prvAddCurrentTaskToDelayedList+0x94>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	429a      	cmp	r2, r3
 8005438:	d209      	bcs.n	800544e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800543a:	4b12      	ldr	r3, [pc, #72]	; (8005484 <prvAddCurrentTaskToDelayedList+0x9c>)
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	4b0f      	ldr	r3, [pc, #60]	; (800547c <prvAddCurrentTaskToDelayedList+0x94>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3304      	adds	r3, #4
 8005444:	4619      	mov	r1, r3
 8005446:	4610      	mov	r0, r2
 8005448:	f7fd ffdd 	bl	8003406 <vListInsert>
}
 800544c:	e010      	b.n	8005470 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800544e:	4b0e      	ldr	r3, [pc, #56]	; (8005488 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	4b0a      	ldr	r3, [pc, #40]	; (800547c <prvAddCurrentTaskToDelayedList+0x94>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	3304      	adds	r3, #4
 8005458:	4619      	mov	r1, r3
 800545a:	4610      	mov	r0, r2
 800545c:	f7fd ffd3 	bl	8003406 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005460:	4b0a      	ldr	r3, [pc, #40]	; (800548c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	429a      	cmp	r2, r3
 8005468:	d202      	bcs.n	8005470 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800546a:	4a08      	ldr	r2, [pc, #32]	; (800548c <prvAddCurrentTaskToDelayedList+0xa4>)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	6013      	str	r3, [r2, #0]
}
 8005470:	bf00      	nop
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	20000df4 	.word	0x20000df4
 800547c:	2000091c 	.word	0x2000091c
 8005480:	20000ddc 	.word	0x20000ddc
 8005484:	20000dac 	.word	0x20000dac
 8005488:	20000da8 	.word	0x20000da8
 800548c:	20000e10 	.word	0x20000e10

08005490 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08a      	sub	sp, #40	; 0x28
 8005494:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005496:	2300      	movs	r3, #0
 8005498:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800549a:	f000 fb07 	bl	8005aac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800549e:	4b1c      	ldr	r3, [pc, #112]	; (8005510 <xTimerCreateTimerTask+0x80>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d021      	beq.n	80054ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80054a6:	2300      	movs	r3, #0
 80054a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80054aa:	2300      	movs	r3, #0
 80054ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80054ae:	1d3a      	adds	r2, r7, #4
 80054b0:	f107 0108 	add.w	r1, r7, #8
 80054b4:	f107 030c 	add.w	r3, r7, #12
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7fd ff39 	bl	8003330 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	9202      	str	r2, [sp, #8]
 80054c6:	9301      	str	r3, [sp, #4]
 80054c8:	2302      	movs	r3, #2
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	2300      	movs	r3, #0
 80054ce:	460a      	mov	r2, r1
 80054d0:	4910      	ldr	r1, [pc, #64]	; (8005514 <xTimerCreateTimerTask+0x84>)
 80054d2:	4811      	ldr	r0, [pc, #68]	; (8005518 <xTimerCreateTimerTask+0x88>)
 80054d4:	f7fe ff4c 	bl	8004370 <xTaskCreateStatic>
 80054d8:	4603      	mov	r3, r0
 80054da:	4a10      	ldr	r2, [pc, #64]	; (800551c <xTimerCreateTimerTask+0x8c>)
 80054dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80054de:	4b0f      	ldr	r3, [pc, #60]	; (800551c <xTimerCreateTimerTask+0x8c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80054e6:	2301      	movs	r3, #1
 80054e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	613b      	str	r3, [r7, #16]
}
 8005502:	bf00      	nop
 8005504:	e7fe      	b.n	8005504 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005506:	697b      	ldr	r3, [r7, #20]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	20000e54 	.word	0x20000e54
 8005514:	0800736c 	.word	0x0800736c
 8005518:	08005655 	.word	0x08005655
 800551c:	20000e58 	.word	0x20000e58

08005520 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08a      	sub	sp, #40	; 0x28
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800552e:	2300      	movs	r3, #0
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10a      	bne.n	800554e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553c:	f383 8811 	msr	BASEPRI, r3
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	623b      	str	r3, [r7, #32]
}
 800554a:	bf00      	nop
 800554c:	e7fe      	b.n	800554c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800554e:	4b1a      	ldr	r3, [pc, #104]	; (80055b8 <xTimerGenericCommand+0x98>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d02a      	beq.n	80055ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	2b05      	cmp	r3, #5
 8005566:	dc18      	bgt.n	800559a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005568:	f7ff fdb4 	bl	80050d4 <xTaskGetSchedulerState>
 800556c:	4603      	mov	r3, r0
 800556e:	2b02      	cmp	r3, #2
 8005570:	d109      	bne.n	8005586 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005572:	4b11      	ldr	r3, [pc, #68]	; (80055b8 <xTimerGenericCommand+0x98>)
 8005574:	6818      	ldr	r0, [r3, #0]
 8005576:	f107 0110 	add.w	r1, r7, #16
 800557a:	2300      	movs	r3, #0
 800557c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800557e:	f7fe f97f 	bl	8003880 <xQueueGenericSend>
 8005582:	6278      	str	r0, [r7, #36]	; 0x24
 8005584:	e012      	b.n	80055ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005586:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <xTimerGenericCommand+0x98>)
 8005588:	6818      	ldr	r0, [r3, #0]
 800558a:	f107 0110 	add.w	r1, r7, #16
 800558e:	2300      	movs	r3, #0
 8005590:	2200      	movs	r2, #0
 8005592:	f7fe f975 	bl	8003880 <xQueueGenericSend>
 8005596:	6278      	str	r0, [r7, #36]	; 0x24
 8005598:	e008      	b.n	80055ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800559a:	4b07      	ldr	r3, [pc, #28]	; (80055b8 <xTimerGenericCommand+0x98>)
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	f107 0110 	add.w	r1, r7, #16
 80055a2:	2300      	movs	r3, #0
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	f7fe fa69 	bl	8003a7c <xQueueGenericSendFromISR>
 80055aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3728      	adds	r7, #40	; 0x28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000e54 	.word	0x20000e54

080055bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b088      	sub	sp, #32
 80055c0:	af02      	add	r7, sp, #8
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c6:	4b22      	ldr	r3, [pc, #136]	; (8005650 <prvProcessExpiredTimer+0x94>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	3304      	adds	r3, #4
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7fd ff4f 	bl	8003478 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d022      	beq.n	800562e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	699a      	ldr	r2, [r3, #24]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	18d1      	adds	r1, r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	6978      	ldr	r0, [r7, #20]
 80055f6:	f000 f8d1 	bl	800579c <prvInsertTimerInActiveList>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01f      	beq.n	8005640 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005600:	2300      	movs	r3, #0
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	2300      	movs	r3, #0
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	2100      	movs	r1, #0
 800560a:	6978      	ldr	r0, [r7, #20]
 800560c:	f7ff ff88 	bl	8005520 <xTimerGenericCommand>
 8005610:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d113      	bne.n	8005640 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	60fb      	str	r3, [r7, #12]
}
 800562a:	bf00      	nop
 800562c:	e7fe      	b.n	800562c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005634:	f023 0301 	bic.w	r3, r3, #1
 8005638:	b2da      	uxtb	r2, r3
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	6978      	ldr	r0, [r7, #20]
 8005646:	4798      	blx	r3
}
 8005648:	bf00      	nop
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	20000e4c 	.word	0x20000e4c

08005654 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800565c:	f107 0308 	add.w	r3, r7, #8
 8005660:	4618      	mov	r0, r3
 8005662:	f000 f857 	bl	8005714 <prvGetNextExpireTime>
 8005666:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4619      	mov	r1, r3
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f000 f803 	bl	8005678 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005672:	f000 f8d5 	bl	8005820 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005676:	e7f1      	b.n	800565c <prvTimerTask+0x8>

08005678 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005682:	f7ff f8d7 	bl	8004834 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005686:	f107 0308 	add.w	r3, r7, #8
 800568a:	4618      	mov	r0, r3
 800568c:	f000 f866 	bl	800575c <prvSampleTimeNow>
 8005690:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d130      	bne.n	80056fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10a      	bne.n	80056b4 <prvProcessTimerOrBlockTask+0x3c>
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d806      	bhi.n	80056b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80056a6:	f7ff f8d3 	bl	8004850 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80056aa:	68f9      	ldr	r1, [r7, #12]
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff ff85 	bl	80055bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80056b2:	e024      	b.n	80056fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d008      	beq.n	80056cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056ba:	4b13      	ldr	r3, [pc, #76]	; (8005708 <prvProcessTimerOrBlockTask+0x90>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <prvProcessTimerOrBlockTask+0x50>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e000      	b.n	80056ca <prvProcessTimerOrBlockTask+0x52>
 80056c8:	2300      	movs	r3, #0
 80056ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80056cc:	4b0f      	ldr	r3, [pc, #60]	; (800570c <prvProcessTimerOrBlockTask+0x94>)
 80056ce:	6818      	ldr	r0, [r3, #0]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	4619      	mov	r1, r3
 80056da:	f7fe fe15 	bl	8004308 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80056de:	f7ff f8b7 	bl	8004850 <xTaskResumeAll>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10a      	bne.n	80056fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80056e8:	4b09      	ldr	r3, [pc, #36]	; (8005710 <prvProcessTimerOrBlockTask+0x98>)
 80056ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	f3bf 8f6f 	isb	sy
}
 80056f8:	e001      	b.n	80056fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80056fa:	f7ff f8a9 	bl	8004850 <xTaskResumeAll>
}
 80056fe:	bf00      	nop
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20000e50 	.word	0x20000e50
 800570c:	20000e54 	.word	0x20000e54
 8005710:	e000ed04 	.word	0xe000ed04

08005714 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800571c:	4b0e      	ldr	r3, [pc, #56]	; (8005758 <prvGetNextExpireTime+0x44>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <prvGetNextExpireTime+0x16>
 8005726:	2201      	movs	r2, #1
 8005728:	e000      	b.n	800572c <prvGetNextExpireTime+0x18>
 800572a:	2200      	movs	r2, #0
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d105      	bne.n	8005744 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005738:	4b07      	ldr	r3, [pc, #28]	; (8005758 <prvGetNextExpireTime+0x44>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	e001      	b.n	8005748 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005748:	68fb      	ldr	r3, [r7, #12]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	20000e4c 	.word	0x20000e4c

0800575c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005764:	f7ff f912 	bl	800498c <xTaskGetTickCount>
 8005768:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800576a:	4b0b      	ldr	r3, [pc, #44]	; (8005798 <prvSampleTimeNow+0x3c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	429a      	cmp	r2, r3
 8005772:	d205      	bcs.n	8005780 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005774:	f000 f936 	bl	80059e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	601a      	str	r2, [r3, #0]
 800577e:	e002      	b.n	8005786 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005786:	4a04      	ldr	r2, [pc, #16]	; (8005798 <prvSampleTimeNow+0x3c>)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800578c:	68fb      	ldr	r3, [r7, #12]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20000e5c 	.word	0x20000e5c

0800579c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80057aa:	2300      	movs	r3, #0
 80057ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d812      	bhi.n	80057e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	1ad2      	subs	r2, r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d302      	bcc.n	80057d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80057d0:	2301      	movs	r3, #1
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	e01b      	b.n	800580e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80057d6:	4b10      	ldr	r3, [pc, #64]	; (8005818 <prvInsertTimerInActiveList+0x7c>)
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	3304      	adds	r3, #4
 80057de:	4619      	mov	r1, r3
 80057e0:	4610      	mov	r0, r2
 80057e2:	f7fd fe10 	bl	8003406 <vListInsert>
 80057e6:	e012      	b.n	800580e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d206      	bcs.n	80057fe <prvInsertTimerInActiveList+0x62>
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d302      	bcc.n	80057fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80057f8:	2301      	movs	r3, #1
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	e007      	b.n	800580e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057fe:	4b07      	ldr	r3, [pc, #28]	; (800581c <prvInsertTimerInActiveList+0x80>)
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3304      	adds	r3, #4
 8005806:	4619      	mov	r1, r3
 8005808:	4610      	mov	r0, r2
 800580a:	f7fd fdfc 	bl	8003406 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800580e:	697b      	ldr	r3, [r7, #20]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3718      	adds	r7, #24
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	20000e50 	.word	0x20000e50
 800581c:	20000e4c 	.word	0x20000e4c

08005820 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08e      	sub	sp, #56	; 0x38
 8005824:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005826:	e0ca      	b.n	80059be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	da18      	bge.n	8005860 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800582e:	1d3b      	adds	r3, r7, #4
 8005830:	3304      	adds	r3, #4
 8005832:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10a      	bne.n	8005850 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	61fb      	str	r3, [r7, #28]
}
 800584c:	bf00      	nop
 800584e:	e7fe      	b.n	800584e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005856:	6850      	ldr	r0, [r2, #4]
 8005858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800585a:	6892      	ldr	r2, [r2, #8]
 800585c:	4611      	mov	r1, r2
 800585e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	f2c0 80ab 	blt.w	80059be <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d004      	beq.n	800587e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005876:	3304      	adds	r3, #4
 8005878:	4618      	mov	r0, r3
 800587a:	f7fd fdfd 	bl	8003478 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800587e:	463b      	mov	r3, r7
 8005880:	4618      	mov	r0, r3
 8005882:	f7ff ff6b 	bl	800575c <prvSampleTimeNow>
 8005886:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b09      	cmp	r3, #9
 800588c:	f200 8096 	bhi.w	80059bc <prvProcessReceivedCommands+0x19c>
 8005890:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <prvProcessReceivedCommands+0x78>)
 8005892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005896:	bf00      	nop
 8005898:	080058c1 	.word	0x080058c1
 800589c:	080058c1 	.word	0x080058c1
 80058a0:	080058c1 	.word	0x080058c1
 80058a4:	08005935 	.word	0x08005935
 80058a8:	08005949 	.word	0x08005949
 80058ac:	08005993 	.word	0x08005993
 80058b0:	080058c1 	.word	0x080058c1
 80058b4:	080058c1 	.word	0x080058c1
 80058b8:	08005935 	.word	0x08005935
 80058bc:	08005949 	.word	0x08005949
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	18d1      	adds	r1, r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058e0:	f7ff ff5c 	bl	800579c <prvInsertTimerInActiveList>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d069      	beq.n	80059be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d05e      	beq.n	80059be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	441a      	add	r2, r3
 8005908:	2300      	movs	r3, #0
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	2300      	movs	r3, #0
 800590e:	2100      	movs	r1, #0
 8005910:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005912:	f7ff fe05 	bl	8005520 <xTimerGenericCommand>
 8005916:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d14f      	bne.n	80059be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	61bb      	str	r3, [r7, #24]
}
 8005930:	bf00      	nop
 8005932:	e7fe      	b.n	8005932 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800593a:	f023 0301 	bic.w	r3, r3, #1
 800593e:	b2da      	uxtb	r2, r3
 8005940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005942:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005946:	e03a      	b.n	80059be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800594e:	f043 0301 	orr.w	r3, r3, #1
 8005952:	b2da      	uxtb	r2, r3
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10a      	bne.n	800597e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596c:	f383 8811 	msr	BASEPRI, r3
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	617b      	str	r3, [r7, #20]
}
 800597a:	bf00      	nop
 800597c:	e7fe      	b.n	800597c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	18d1      	adds	r1, r2, r3
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800598a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800598c:	f7ff ff06 	bl	800579c <prvInsertTimerInActiveList>
					break;
 8005990:	e015      	b.n	80059be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005994:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d103      	bne.n	80059a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80059a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059a2:	f000 fbdd 	bl	8006160 <vPortFree>
 80059a6:	e00a      	b.n	80059be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059ae:	f023 0301 	bic.w	r3, r3, #1
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80059ba:	e000      	b.n	80059be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80059bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059be:	4b08      	ldr	r3, [pc, #32]	; (80059e0 <prvProcessReceivedCommands+0x1c0>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	1d39      	adds	r1, r7, #4
 80059c4:	2200      	movs	r2, #0
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fe f8f4 	bl	8003bb4 <xQueueReceive>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f47f af2a 	bne.w	8005828 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80059d4:	bf00      	nop
 80059d6:	bf00      	nop
 80059d8:	3730      	adds	r7, #48	; 0x30
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	20000e54 	.word	0x20000e54

080059e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059ea:	e048      	b.n	8005a7e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059ec:	4b2d      	ldr	r3, [pc, #180]	; (8005aa4 <prvSwitchTimerLists+0xc0>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059f6:	4b2b      	ldr	r3, [pc, #172]	; (8005aa4 <prvSwitchTimerLists+0xc0>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fd fd37 	bl	8003478 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d02e      	beq.n	8005a7e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	4413      	add	r3, r2
 8005a28:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d90e      	bls.n	8005a50 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a3e:	4b19      	ldr	r3, [pc, #100]	; (8005aa4 <prvSwitchTimerLists+0xc0>)
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3304      	adds	r3, #4
 8005a46:	4619      	mov	r1, r3
 8005a48:	4610      	mov	r0, r2
 8005a4a:	f7fd fcdc 	bl	8003406 <vListInsert>
 8005a4e:	e016      	b.n	8005a7e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a50:	2300      	movs	r3, #0
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	2300      	movs	r3, #0
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	2100      	movs	r1, #0
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f7ff fd60 	bl	8005520 <xTimerGenericCommand>
 8005a60:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10a      	bne.n	8005a7e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6c:	f383 8811 	msr	BASEPRI, r3
 8005a70:	f3bf 8f6f 	isb	sy
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	603b      	str	r3, [r7, #0]
}
 8005a7a:	bf00      	nop
 8005a7c:	e7fe      	b.n	8005a7c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a7e:	4b09      	ldr	r3, [pc, #36]	; (8005aa4 <prvSwitchTimerLists+0xc0>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1b1      	bne.n	80059ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a88:	4b06      	ldr	r3, [pc, #24]	; (8005aa4 <prvSwitchTimerLists+0xc0>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a8e:	4b06      	ldr	r3, [pc, #24]	; (8005aa8 <prvSwitchTimerLists+0xc4>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a04      	ldr	r2, [pc, #16]	; (8005aa4 <prvSwitchTimerLists+0xc0>)
 8005a94:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005a96:	4a04      	ldr	r2, [pc, #16]	; (8005aa8 <prvSwitchTimerLists+0xc4>)
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	6013      	str	r3, [r2, #0]
}
 8005a9c:	bf00      	nop
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	20000e4c 	.word	0x20000e4c
 8005aa8:	20000e50 	.word	0x20000e50

08005aac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005ab2:	f000 f967 	bl	8005d84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ab6:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <prvCheckForValidListAndQueue+0x60>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d120      	bne.n	8005b00 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005abe:	4814      	ldr	r0, [pc, #80]	; (8005b10 <prvCheckForValidListAndQueue+0x64>)
 8005ac0:	f7fd fc50 	bl	8003364 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ac4:	4813      	ldr	r0, [pc, #76]	; (8005b14 <prvCheckForValidListAndQueue+0x68>)
 8005ac6:	f7fd fc4d 	bl	8003364 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005aca:	4b13      	ldr	r3, [pc, #76]	; (8005b18 <prvCheckForValidListAndQueue+0x6c>)
 8005acc:	4a10      	ldr	r2, [pc, #64]	; (8005b10 <prvCheckForValidListAndQueue+0x64>)
 8005ace:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ad0:	4b12      	ldr	r3, [pc, #72]	; (8005b1c <prvCheckForValidListAndQueue+0x70>)
 8005ad2:	4a10      	ldr	r2, [pc, #64]	; (8005b14 <prvCheckForValidListAndQueue+0x68>)
 8005ad4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	4b11      	ldr	r3, [pc, #68]	; (8005b20 <prvCheckForValidListAndQueue+0x74>)
 8005adc:	4a11      	ldr	r2, [pc, #68]	; (8005b24 <prvCheckForValidListAndQueue+0x78>)
 8005ade:	2110      	movs	r1, #16
 8005ae0:	200a      	movs	r0, #10
 8005ae2:	f7fd fd5b 	bl	800359c <xQueueGenericCreateStatic>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	4a08      	ldr	r2, [pc, #32]	; (8005b0c <prvCheckForValidListAndQueue+0x60>)
 8005aea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005aec:	4b07      	ldr	r3, [pc, #28]	; (8005b0c <prvCheckForValidListAndQueue+0x60>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005af4:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <prvCheckForValidListAndQueue+0x60>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	490b      	ldr	r1, [pc, #44]	; (8005b28 <prvCheckForValidListAndQueue+0x7c>)
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fe fbb0 	bl	8004260 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b00:	f000 f970 	bl	8005de4 <vPortExitCritical>
}
 8005b04:	bf00      	nop
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20000e54 	.word	0x20000e54
 8005b10:	20000e24 	.word	0x20000e24
 8005b14:	20000e38 	.word	0x20000e38
 8005b18:	20000e4c 	.word	0x20000e4c
 8005b1c:	20000e50 	.word	0x20000e50
 8005b20:	20000f00 	.word	0x20000f00
 8005b24:	20000e60 	.word	0x20000e60
 8005b28:	08007374 	.word	0x08007374

08005b2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3b04      	subs	r3, #4
 8005b3c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3b04      	subs	r3, #4
 8005b4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	f023 0201 	bic.w	r2, r3, #1
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	3b04      	subs	r3, #4
 8005b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b5c:	4a0c      	ldr	r2, [pc, #48]	; (8005b90 <pxPortInitialiseStack+0x64>)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	3b14      	subs	r3, #20
 8005b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	3b04      	subs	r3, #4
 8005b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f06f 0202 	mvn.w	r2, #2
 8005b7a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	3b20      	subs	r3, #32
 8005b80:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b82:	68fb      	ldr	r3, [r7, #12]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	08005b95 	.word	0x08005b95

08005b94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b9e:	4b12      	ldr	r3, [pc, #72]	; (8005be8 <prvTaskExitError+0x54>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba6:	d00a      	beq.n	8005bbe <prvTaskExitError+0x2a>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	60fb      	str	r3, [r7, #12]
}
 8005bba:	bf00      	nop
 8005bbc:	e7fe      	b.n	8005bbc <prvTaskExitError+0x28>
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	60bb      	str	r3, [r7, #8]
}
 8005bd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005bd2:	bf00      	nop
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0fc      	beq.n	8005bd4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005bda:	bf00      	nop
 8005bdc:	bf00      	nop
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	20000010 	.word	0x20000010
 8005bec:	00000000 	.word	0x00000000

08005bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005bf0:	4b07      	ldr	r3, [pc, #28]	; (8005c10 <pxCurrentTCBConst2>)
 8005bf2:	6819      	ldr	r1, [r3, #0]
 8005bf4:	6808      	ldr	r0, [r1, #0]
 8005bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfa:	f380 8809 	msr	PSP, r0
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f04f 0000 	mov.w	r0, #0
 8005c06:	f380 8811 	msr	BASEPRI, r0
 8005c0a:	4770      	bx	lr
 8005c0c:	f3af 8000 	nop.w

08005c10 <pxCurrentTCBConst2>:
 8005c10:	2000091c 	.word	0x2000091c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c14:	bf00      	nop
 8005c16:	bf00      	nop

08005c18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c18:	4808      	ldr	r0, [pc, #32]	; (8005c3c <prvPortStartFirstTask+0x24>)
 8005c1a:	6800      	ldr	r0, [r0, #0]
 8005c1c:	6800      	ldr	r0, [r0, #0]
 8005c1e:	f380 8808 	msr	MSP, r0
 8005c22:	f04f 0000 	mov.w	r0, #0
 8005c26:	f380 8814 	msr	CONTROL, r0
 8005c2a:	b662      	cpsie	i
 8005c2c:	b661      	cpsie	f
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	df00      	svc	0
 8005c38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c3a:	bf00      	nop
 8005c3c:	e000ed08 	.word	0xe000ed08

08005c40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b086      	sub	sp, #24
 8005c44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c46:	4b46      	ldr	r3, [pc, #280]	; (8005d60 <xPortStartScheduler+0x120>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a46      	ldr	r2, [pc, #280]	; (8005d64 <xPortStartScheduler+0x124>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d10a      	bne.n	8005c66 <xPortStartScheduler+0x26>
	__asm volatile
 8005c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	613b      	str	r3, [r7, #16]
}
 8005c62:	bf00      	nop
 8005c64:	e7fe      	b.n	8005c64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c66:	4b3e      	ldr	r3, [pc, #248]	; (8005d60 <xPortStartScheduler+0x120>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a3f      	ldr	r2, [pc, #252]	; (8005d68 <xPortStartScheduler+0x128>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d10a      	bne.n	8005c86 <xPortStartScheduler+0x46>
	__asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	60fb      	str	r3, [r7, #12]
}
 8005c82:	bf00      	nop
 8005c84:	e7fe      	b.n	8005c84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c86:	4b39      	ldr	r3, [pc, #228]	; (8005d6c <xPortStartScheduler+0x12c>)
 8005c88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	22ff      	movs	r2, #255	; 0xff
 8005c96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	4b31      	ldr	r3, [pc, #196]	; (8005d70 <xPortStartScheduler+0x130>)
 8005cac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cae:	4b31      	ldr	r3, [pc, #196]	; (8005d74 <xPortStartScheduler+0x134>)
 8005cb0:	2207      	movs	r2, #7
 8005cb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cb4:	e009      	b.n	8005cca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005cb6:	4b2f      	ldr	r3, [pc, #188]	; (8005d74 <xPortStartScheduler+0x134>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	4a2d      	ldr	r2, [pc, #180]	; (8005d74 <xPortStartScheduler+0x134>)
 8005cbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005cc0:	78fb      	ldrb	r3, [r7, #3]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cca:	78fb      	ldrb	r3, [r7, #3]
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd2:	2b80      	cmp	r3, #128	; 0x80
 8005cd4:	d0ef      	beq.n	8005cb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005cd6:	4b27      	ldr	r3, [pc, #156]	; (8005d74 <xPortStartScheduler+0x134>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f1c3 0307 	rsb	r3, r3, #7
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d00a      	beq.n	8005cf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	60bb      	str	r3, [r7, #8]
}
 8005cf4:	bf00      	nop
 8005cf6:	e7fe      	b.n	8005cf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005cf8:	4b1e      	ldr	r3, [pc, #120]	; (8005d74 <xPortStartScheduler+0x134>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	021b      	lsls	r3, r3, #8
 8005cfe:	4a1d      	ldr	r2, [pc, #116]	; (8005d74 <xPortStartScheduler+0x134>)
 8005d00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d02:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <xPortStartScheduler+0x134>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d0a:	4a1a      	ldr	r2, [pc, #104]	; (8005d74 <xPortStartScheduler+0x134>)
 8005d0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d16:	4b18      	ldr	r3, [pc, #96]	; (8005d78 <xPortStartScheduler+0x138>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a17      	ldr	r2, [pc, #92]	; (8005d78 <xPortStartScheduler+0x138>)
 8005d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d22:	4b15      	ldr	r3, [pc, #84]	; (8005d78 <xPortStartScheduler+0x138>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a14      	ldr	r2, [pc, #80]	; (8005d78 <xPortStartScheduler+0x138>)
 8005d28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d2e:	f000 f8dd 	bl	8005eec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d32:	4b12      	ldr	r3, [pc, #72]	; (8005d7c <xPortStartScheduler+0x13c>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d38:	f000 f8fc 	bl	8005f34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d3c:	4b10      	ldr	r3, [pc, #64]	; (8005d80 <xPortStartScheduler+0x140>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a0f      	ldr	r2, [pc, #60]	; (8005d80 <xPortStartScheduler+0x140>)
 8005d42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d48:	f7ff ff66 	bl	8005c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d4c:	f7fe fee8 	bl	8004b20 <vTaskSwitchContext>
	prvTaskExitError();
 8005d50:	f7ff ff20 	bl	8005b94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	e000ed00 	.word	0xe000ed00
 8005d64:	410fc271 	.word	0x410fc271
 8005d68:	410fc270 	.word	0x410fc270
 8005d6c:	e000e400 	.word	0xe000e400
 8005d70:	20000f50 	.word	0x20000f50
 8005d74:	20000f54 	.word	0x20000f54
 8005d78:	e000ed20 	.word	0xe000ed20
 8005d7c:	20000010 	.word	0x20000010
 8005d80:	e000ef34 	.word	0xe000ef34

08005d84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
	__asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	607b      	str	r3, [r7, #4]
}
 8005d9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d9e:	4b0f      	ldr	r3, [pc, #60]	; (8005ddc <vPortEnterCritical+0x58>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3301      	adds	r3, #1
 8005da4:	4a0d      	ldr	r2, [pc, #52]	; (8005ddc <vPortEnterCritical+0x58>)
 8005da6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005da8:	4b0c      	ldr	r3, [pc, #48]	; (8005ddc <vPortEnterCritical+0x58>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d10f      	bne.n	8005dd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005db0:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <vPortEnterCritical+0x5c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	603b      	str	r3, [r7, #0]
}
 8005dcc:	bf00      	nop
 8005dce:	e7fe      	b.n	8005dce <vPortEnterCritical+0x4a>
	}
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	20000010 	.word	0x20000010
 8005de0:	e000ed04 	.word	0xe000ed04

08005de4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005dea:	4b12      	ldr	r3, [pc, #72]	; (8005e34 <vPortExitCritical+0x50>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10a      	bne.n	8005e08 <vPortExitCritical+0x24>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	607b      	str	r3, [r7, #4]
}
 8005e04:	bf00      	nop
 8005e06:	e7fe      	b.n	8005e06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e08:	4b0a      	ldr	r3, [pc, #40]	; (8005e34 <vPortExitCritical+0x50>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	4a09      	ldr	r2, [pc, #36]	; (8005e34 <vPortExitCritical+0x50>)
 8005e10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e12:	4b08      	ldr	r3, [pc, #32]	; (8005e34 <vPortExitCritical+0x50>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d105      	bne.n	8005e26 <vPortExitCritical+0x42>
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	f383 8811 	msr	BASEPRI, r3
}
 8005e24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	20000010 	.word	0x20000010
	...

08005e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e40:	f3ef 8009 	mrs	r0, PSP
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	4b15      	ldr	r3, [pc, #84]	; (8005ea0 <pxCurrentTCBConst>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	f01e 0f10 	tst.w	lr, #16
 8005e50:	bf08      	it	eq
 8005e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e5a:	6010      	str	r0, [r2, #0]
 8005e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e64:	f380 8811 	msr	BASEPRI, r0
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f7fe fe56 	bl	8004b20 <vTaskSwitchContext>
 8005e74:	f04f 0000 	mov.w	r0, #0
 8005e78:	f380 8811 	msr	BASEPRI, r0
 8005e7c:	bc09      	pop	{r0, r3}
 8005e7e:	6819      	ldr	r1, [r3, #0]
 8005e80:	6808      	ldr	r0, [r1, #0]
 8005e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e86:	f01e 0f10 	tst.w	lr, #16
 8005e8a:	bf08      	it	eq
 8005e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e90:	f380 8809 	msr	PSP, r0
 8005e94:	f3bf 8f6f 	isb	sy
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	f3af 8000 	nop.w

08005ea0 <pxCurrentTCBConst>:
 8005ea0:	2000091c 	.word	0x2000091c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop

08005ea8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	607b      	str	r3, [r7, #4]
}
 8005ec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ec2:	f7fe fd73 	bl	80049ac <xTaskIncrementTick>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ecc:	4b06      	ldr	r3, [pc, #24]	; (8005ee8 <xPortSysTickHandler+0x40>)
 8005ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	f383 8811 	msr	BASEPRI, r3
}
 8005ede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ee0:	bf00      	nop
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	e000ed04 	.word	0xe000ed04

08005eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <vPortSetupTimerInterrupt+0x34>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ef6:	4b0b      	ldr	r3, [pc, #44]	; (8005f24 <vPortSetupTimerInterrupt+0x38>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005efc:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <vPortSetupTimerInterrupt+0x3c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a0a      	ldr	r2, [pc, #40]	; (8005f2c <vPortSetupTimerInterrupt+0x40>)
 8005f02:	fba2 2303 	umull	r2, r3, r2, r3
 8005f06:	099b      	lsrs	r3, r3, #6
 8005f08:	4a09      	ldr	r2, [pc, #36]	; (8005f30 <vPortSetupTimerInterrupt+0x44>)
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f0e:	4b04      	ldr	r3, [pc, #16]	; (8005f20 <vPortSetupTimerInterrupt+0x34>)
 8005f10:	2207      	movs	r2, #7
 8005f12:	601a      	str	r2, [r3, #0]
}
 8005f14:	bf00      	nop
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	e000e010 	.word	0xe000e010
 8005f24:	e000e018 	.word	0xe000e018
 8005f28:	20000004 	.word	0x20000004
 8005f2c:	10624dd3 	.word	0x10624dd3
 8005f30:	e000e014 	.word	0xe000e014

08005f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f44 <vPortEnableVFP+0x10>
 8005f38:	6801      	ldr	r1, [r0, #0]
 8005f3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f3e:	6001      	str	r1, [r0, #0]
 8005f40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f42:	bf00      	nop
 8005f44:	e000ed88 	.word	0xe000ed88

08005f48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f4e:	f3ef 8305 	mrs	r3, IPSR
 8005f52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b0f      	cmp	r3, #15
 8005f58:	d914      	bls.n	8005f84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f5a:	4a17      	ldr	r2, [pc, #92]	; (8005fb8 <vPortValidateInterruptPriority+0x70>)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4413      	add	r3, r2
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f64:	4b15      	ldr	r3, [pc, #84]	; (8005fbc <vPortValidateInterruptPriority+0x74>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	7afa      	ldrb	r2, [r7, #11]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d20a      	bcs.n	8005f84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	607b      	str	r3, [r7, #4]
}
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f84:	4b0e      	ldr	r3, [pc, #56]	; (8005fc0 <vPortValidateInterruptPriority+0x78>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f8c:	4b0d      	ldr	r3, [pc, #52]	; (8005fc4 <vPortValidateInterruptPriority+0x7c>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d90a      	bls.n	8005faa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	603b      	str	r3, [r7, #0]
}
 8005fa6:	bf00      	nop
 8005fa8:	e7fe      	b.n	8005fa8 <vPortValidateInterruptPriority+0x60>
	}
 8005faa:	bf00      	nop
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	e000e3f0 	.word	0xe000e3f0
 8005fbc:	20000f50 	.word	0x20000f50
 8005fc0:	e000ed0c 	.word	0xe000ed0c
 8005fc4:	20000f54 	.word	0x20000f54

08005fc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08a      	sub	sp, #40	; 0x28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fd4:	f7fe fc2e 	bl	8004834 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fd8:	4b5b      	ldr	r3, [pc, #364]	; (8006148 <pvPortMalloc+0x180>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fe0:	f000 f920 	bl	8006224 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fe4:	4b59      	ldr	r3, [pc, #356]	; (800614c <pvPortMalloc+0x184>)
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4013      	ands	r3, r2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f040 8093 	bne.w	8006118 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d01d      	beq.n	8006034 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ff8:	2208      	movs	r2, #8
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	2b00      	cmp	r3, #0
 8006008:	d014      	beq.n	8006034 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f023 0307 	bic.w	r3, r3, #7
 8006010:	3308      	adds	r3, #8
 8006012:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <pvPortMalloc+0x6c>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	617b      	str	r3, [r7, #20]
}
 8006030:	bf00      	nop
 8006032:	e7fe      	b.n	8006032 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d06e      	beq.n	8006118 <pvPortMalloc+0x150>
 800603a:	4b45      	ldr	r3, [pc, #276]	; (8006150 <pvPortMalloc+0x188>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	429a      	cmp	r2, r3
 8006042:	d869      	bhi.n	8006118 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006044:	4b43      	ldr	r3, [pc, #268]	; (8006154 <pvPortMalloc+0x18c>)
 8006046:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006048:	4b42      	ldr	r3, [pc, #264]	; (8006154 <pvPortMalloc+0x18c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800604e:	e004      	b.n	800605a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	429a      	cmp	r2, r3
 8006062:	d903      	bls.n	800606c <pvPortMalloc+0xa4>
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1f1      	bne.n	8006050 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800606c:	4b36      	ldr	r3, [pc, #216]	; (8006148 <pvPortMalloc+0x180>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006072:	429a      	cmp	r2, r3
 8006074:	d050      	beq.n	8006118 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2208      	movs	r2, #8
 800607c:	4413      	add	r3, r2
 800607e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	1ad2      	subs	r2, r2, r3
 8006090:	2308      	movs	r3, #8
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	429a      	cmp	r2, r3
 8006096:	d91f      	bls.n	80060d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4413      	add	r3, r2
 800609e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	f003 0307 	and.w	r3, r3, #7
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00a      	beq.n	80060c0 <pvPortMalloc+0xf8>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	613b      	str	r3, [r7, #16]
}
 80060bc:	bf00      	nop
 80060be:	e7fe      	b.n	80060be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	1ad2      	subs	r2, r2, r3
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060d2:	69b8      	ldr	r0, [r7, #24]
 80060d4:	f000 f908 	bl	80062e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060d8:	4b1d      	ldr	r3, [pc, #116]	; (8006150 <pvPortMalloc+0x188>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	4a1b      	ldr	r2, [pc, #108]	; (8006150 <pvPortMalloc+0x188>)
 80060e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060e6:	4b1a      	ldr	r3, [pc, #104]	; (8006150 <pvPortMalloc+0x188>)
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	4b1b      	ldr	r3, [pc, #108]	; (8006158 <pvPortMalloc+0x190>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d203      	bcs.n	80060fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060f2:	4b17      	ldr	r3, [pc, #92]	; (8006150 <pvPortMalloc+0x188>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a18      	ldr	r2, [pc, #96]	; (8006158 <pvPortMalloc+0x190>)
 80060f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	685a      	ldr	r2, [r3, #4]
 80060fe:	4b13      	ldr	r3, [pc, #76]	; (800614c <pvPortMalloc+0x184>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	431a      	orrs	r2, r3
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800610e:	4b13      	ldr	r3, [pc, #76]	; (800615c <pvPortMalloc+0x194>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3301      	adds	r3, #1
 8006114:	4a11      	ldr	r2, [pc, #68]	; (800615c <pvPortMalloc+0x194>)
 8006116:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006118:	f7fe fb9a 	bl	8004850 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	f003 0307 	and.w	r3, r3, #7
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <pvPortMalloc+0x174>
	__asm volatile
 8006126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	60fb      	str	r3, [r7, #12]
}
 8006138:	bf00      	nop
 800613a:	e7fe      	b.n	800613a <pvPortMalloc+0x172>
	return pvReturn;
 800613c:	69fb      	ldr	r3, [r7, #28]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3728      	adds	r7, #40	; 0x28
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	20008490 	.word	0x20008490
 800614c:	200084a4 	.word	0x200084a4
 8006150:	20008494 	.word	0x20008494
 8006154:	20008488 	.word	0x20008488
 8006158:	20008498 	.word	0x20008498
 800615c:	2000849c 	.word	0x2000849c

08006160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d04d      	beq.n	800620e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006172:	2308      	movs	r3, #8
 8006174:	425b      	negs	r3, r3
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	4413      	add	r3, r2
 800617a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	4b24      	ldr	r3, [pc, #144]	; (8006218 <vPortFree+0xb8>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4013      	ands	r3, r2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <vPortFree+0x44>
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	60fb      	str	r3, [r7, #12]
}
 80061a0:	bf00      	nop
 80061a2:	e7fe      	b.n	80061a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00a      	beq.n	80061c2 <vPortFree+0x62>
	__asm volatile
 80061ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	60bb      	str	r3, [r7, #8]
}
 80061be:	bf00      	nop
 80061c0:	e7fe      	b.n	80061c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	4b14      	ldr	r3, [pc, #80]	; (8006218 <vPortFree+0xb8>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4013      	ands	r3, r2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01e      	beq.n	800620e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d11a      	bne.n	800620e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	4b0e      	ldr	r3, [pc, #56]	; (8006218 <vPortFree+0xb8>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	43db      	mvns	r3, r3
 80061e2:	401a      	ands	r2, r3
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061e8:	f7fe fb24 	bl	8004834 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	4b0a      	ldr	r3, [pc, #40]	; (800621c <vPortFree+0xbc>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4413      	add	r3, r2
 80061f6:	4a09      	ldr	r2, [pc, #36]	; (800621c <vPortFree+0xbc>)
 80061f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061fa:	6938      	ldr	r0, [r7, #16]
 80061fc:	f000 f874 	bl	80062e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006200:	4b07      	ldr	r3, [pc, #28]	; (8006220 <vPortFree+0xc0>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3301      	adds	r3, #1
 8006206:	4a06      	ldr	r2, [pc, #24]	; (8006220 <vPortFree+0xc0>)
 8006208:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800620a:	f7fe fb21 	bl	8004850 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800620e:	bf00      	nop
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	200084a4 	.word	0x200084a4
 800621c:	20008494 	.word	0x20008494
 8006220:	200084a0 	.word	0x200084a0

08006224 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800622a:	f247 5330 	movw	r3, #30000	; 0x7530
 800622e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006230:	4b27      	ldr	r3, [pc, #156]	; (80062d0 <prvHeapInit+0xac>)
 8006232:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00c      	beq.n	8006258 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3307      	adds	r3, #7
 8006242:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0307 	bic.w	r3, r3, #7
 800624a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	4a1f      	ldr	r2, [pc, #124]	; (80062d0 <prvHeapInit+0xac>)
 8006254:	4413      	add	r3, r2
 8006256:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800625c:	4a1d      	ldr	r2, [pc, #116]	; (80062d4 <prvHeapInit+0xb0>)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006262:	4b1c      	ldr	r3, [pc, #112]	; (80062d4 <prvHeapInit+0xb0>)
 8006264:	2200      	movs	r2, #0
 8006266:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	4413      	add	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006270:	2208      	movs	r2, #8
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	1a9b      	subs	r3, r3, r2
 8006276:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f023 0307 	bic.w	r3, r3, #7
 800627e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	4a15      	ldr	r2, [pc, #84]	; (80062d8 <prvHeapInit+0xb4>)
 8006284:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006286:	4b14      	ldr	r3, [pc, #80]	; (80062d8 <prvHeapInit+0xb4>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2200      	movs	r2, #0
 800628c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800628e:	4b12      	ldr	r3, [pc, #72]	; (80062d8 <prvHeapInit+0xb4>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	1ad2      	subs	r2, r2, r3
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062a4:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <prvHeapInit+0xb4>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	4a0a      	ldr	r2, [pc, #40]	; (80062dc <prvHeapInit+0xb8>)
 80062b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	4a09      	ldr	r2, [pc, #36]	; (80062e0 <prvHeapInit+0xbc>)
 80062ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062bc:	4b09      	ldr	r3, [pc, #36]	; (80062e4 <prvHeapInit+0xc0>)
 80062be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80062c2:	601a      	str	r2, [r3, #0]
}
 80062c4:	bf00      	nop
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	20000f58 	.word	0x20000f58
 80062d4:	20008488 	.word	0x20008488
 80062d8:	20008490 	.word	0x20008490
 80062dc:	20008498 	.word	0x20008498
 80062e0:	20008494 	.word	0x20008494
 80062e4:	200084a4 	.word	0x200084a4

080062e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062f0:	4b28      	ldr	r3, [pc, #160]	; (8006394 <prvInsertBlockIntoFreeList+0xac>)
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	e002      	b.n	80062fc <prvInsertBlockIntoFreeList+0x14>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60fb      	str	r3, [r7, #12]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	429a      	cmp	r2, r3
 8006304:	d8f7      	bhi.n	80062f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	4413      	add	r3, r2
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	429a      	cmp	r2, r3
 8006316:	d108      	bne.n	800632a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	441a      	add	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	441a      	add	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	429a      	cmp	r2, r3
 800633c:	d118      	bne.n	8006370 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	4b15      	ldr	r3, [pc, #84]	; (8006398 <prvInsertBlockIntoFreeList+0xb0>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d00d      	beq.n	8006366 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	441a      	add	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	e008      	b.n	8006378 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006366:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <prvInsertBlockIntoFreeList+0xb0>)
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	e003      	b.n	8006378 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	429a      	cmp	r2, r3
 800637e:	d002      	beq.n	8006386 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006386:	bf00      	nop
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	20008488 	.word	0x20008488
 8006398:	20008490 	.word	0x20008490

0800639c <std>:
 800639c:	2300      	movs	r3, #0
 800639e:	b510      	push	{r4, lr}
 80063a0:	4604      	mov	r4, r0
 80063a2:	e9c0 3300 	strd	r3, r3, [r0]
 80063a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063aa:	6083      	str	r3, [r0, #8]
 80063ac:	8181      	strh	r1, [r0, #12]
 80063ae:	6643      	str	r3, [r0, #100]	; 0x64
 80063b0:	81c2      	strh	r2, [r0, #14]
 80063b2:	6183      	str	r3, [r0, #24]
 80063b4:	4619      	mov	r1, r3
 80063b6:	2208      	movs	r2, #8
 80063b8:	305c      	adds	r0, #92	; 0x5c
 80063ba:	f000 f8f4 	bl	80065a6 <memset>
 80063be:	4b05      	ldr	r3, [pc, #20]	; (80063d4 <std+0x38>)
 80063c0:	6263      	str	r3, [r4, #36]	; 0x24
 80063c2:	4b05      	ldr	r3, [pc, #20]	; (80063d8 <std+0x3c>)
 80063c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80063c6:	4b05      	ldr	r3, [pc, #20]	; (80063dc <std+0x40>)
 80063c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063ca:	4b05      	ldr	r3, [pc, #20]	; (80063e0 <std+0x44>)
 80063cc:	6224      	str	r4, [r4, #32]
 80063ce:	6323      	str	r3, [r4, #48]	; 0x30
 80063d0:	bd10      	pop	{r4, pc}
 80063d2:	bf00      	nop
 80063d4:	08006521 	.word	0x08006521
 80063d8:	08006543 	.word	0x08006543
 80063dc:	0800657b 	.word	0x0800657b
 80063e0:	0800659f 	.word	0x0800659f

080063e4 <stdio_exit_handler>:
 80063e4:	4a02      	ldr	r2, [pc, #8]	; (80063f0 <stdio_exit_handler+0xc>)
 80063e6:	4903      	ldr	r1, [pc, #12]	; (80063f4 <stdio_exit_handler+0x10>)
 80063e8:	4803      	ldr	r0, [pc, #12]	; (80063f8 <stdio_exit_handler+0x14>)
 80063ea:	f000 b869 	b.w	80064c0 <_fwalk_sglue>
 80063ee:	bf00      	nop
 80063f0:	20000014 	.word	0x20000014
 80063f4:	08007009 	.word	0x08007009
 80063f8:	20000020 	.word	0x20000020

080063fc <cleanup_stdio>:
 80063fc:	6841      	ldr	r1, [r0, #4]
 80063fe:	4b0c      	ldr	r3, [pc, #48]	; (8006430 <cleanup_stdio+0x34>)
 8006400:	4299      	cmp	r1, r3
 8006402:	b510      	push	{r4, lr}
 8006404:	4604      	mov	r4, r0
 8006406:	d001      	beq.n	800640c <cleanup_stdio+0x10>
 8006408:	f000 fdfe 	bl	8007008 <_fflush_r>
 800640c:	68a1      	ldr	r1, [r4, #8]
 800640e:	4b09      	ldr	r3, [pc, #36]	; (8006434 <cleanup_stdio+0x38>)
 8006410:	4299      	cmp	r1, r3
 8006412:	d002      	beq.n	800641a <cleanup_stdio+0x1e>
 8006414:	4620      	mov	r0, r4
 8006416:	f000 fdf7 	bl	8007008 <_fflush_r>
 800641a:	68e1      	ldr	r1, [r4, #12]
 800641c:	4b06      	ldr	r3, [pc, #24]	; (8006438 <cleanup_stdio+0x3c>)
 800641e:	4299      	cmp	r1, r3
 8006420:	d004      	beq.n	800642c <cleanup_stdio+0x30>
 8006422:	4620      	mov	r0, r4
 8006424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006428:	f000 bdee 	b.w	8007008 <_fflush_r>
 800642c:	bd10      	pop	{r4, pc}
 800642e:	bf00      	nop
 8006430:	200084a8 	.word	0x200084a8
 8006434:	20008510 	.word	0x20008510
 8006438:	20008578 	.word	0x20008578

0800643c <global_stdio_init.part.0>:
 800643c:	b510      	push	{r4, lr}
 800643e:	4b0b      	ldr	r3, [pc, #44]	; (800646c <global_stdio_init.part.0+0x30>)
 8006440:	4c0b      	ldr	r4, [pc, #44]	; (8006470 <global_stdio_init.part.0+0x34>)
 8006442:	4a0c      	ldr	r2, [pc, #48]	; (8006474 <global_stdio_init.part.0+0x38>)
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	4620      	mov	r0, r4
 8006448:	2200      	movs	r2, #0
 800644a:	2104      	movs	r1, #4
 800644c:	f7ff ffa6 	bl	800639c <std>
 8006450:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006454:	2201      	movs	r2, #1
 8006456:	2109      	movs	r1, #9
 8006458:	f7ff ffa0 	bl	800639c <std>
 800645c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006460:	2202      	movs	r2, #2
 8006462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006466:	2112      	movs	r1, #18
 8006468:	f7ff bf98 	b.w	800639c <std>
 800646c:	200085e0 	.word	0x200085e0
 8006470:	200084a8 	.word	0x200084a8
 8006474:	080063e5 	.word	0x080063e5

08006478 <__sfp_lock_acquire>:
 8006478:	4801      	ldr	r0, [pc, #4]	; (8006480 <__sfp_lock_acquire+0x8>)
 800647a:	f000 b963 	b.w	8006744 <__retarget_lock_acquire_recursive>
 800647e:	bf00      	nop
 8006480:	200085e9 	.word	0x200085e9

08006484 <__sfp_lock_release>:
 8006484:	4801      	ldr	r0, [pc, #4]	; (800648c <__sfp_lock_release+0x8>)
 8006486:	f000 b95e 	b.w	8006746 <__retarget_lock_release_recursive>
 800648a:	bf00      	nop
 800648c:	200085e9 	.word	0x200085e9

08006490 <__sinit>:
 8006490:	b510      	push	{r4, lr}
 8006492:	4604      	mov	r4, r0
 8006494:	f7ff fff0 	bl	8006478 <__sfp_lock_acquire>
 8006498:	6a23      	ldr	r3, [r4, #32]
 800649a:	b11b      	cbz	r3, 80064a4 <__sinit+0x14>
 800649c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064a0:	f7ff bff0 	b.w	8006484 <__sfp_lock_release>
 80064a4:	4b04      	ldr	r3, [pc, #16]	; (80064b8 <__sinit+0x28>)
 80064a6:	6223      	str	r3, [r4, #32]
 80064a8:	4b04      	ldr	r3, [pc, #16]	; (80064bc <__sinit+0x2c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1f5      	bne.n	800649c <__sinit+0xc>
 80064b0:	f7ff ffc4 	bl	800643c <global_stdio_init.part.0>
 80064b4:	e7f2      	b.n	800649c <__sinit+0xc>
 80064b6:	bf00      	nop
 80064b8:	080063fd 	.word	0x080063fd
 80064bc:	200085e0 	.word	0x200085e0

080064c0 <_fwalk_sglue>:
 80064c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064c4:	4607      	mov	r7, r0
 80064c6:	4688      	mov	r8, r1
 80064c8:	4614      	mov	r4, r2
 80064ca:	2600      	movs	r6, #0
 80064cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064d0:	f1b9 0901 	subs.w	r9, r9, #1
 80064d4:	d505      	bpl.n	80064e2 <_fwalk_sglue+0x22>
 80064d6:	6824      	ldr	r4, [r4, #0]
 80064d8:	2c00      	cmp	r4, #0
 80064da:	d1f7      	bne.n	80064cc <_fwalk_sglue+0xc>
 80064dc:	4630      	mov	r0, r6
 80064de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064e2:	89ab      	ldrh	r3, [r5, #12]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d907      	bls.n	80064f8 <_fwalk_sglue+0x38>
 80064e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064ec:	3301      	adds	r3, #1
 80064ee:	d003      	beq.n	80064f8 <_fwalk_sglue+0x38>
 80064f0:	4629      	mov	r1, r5
 80064f2:	4638      	mov	r0, r7
 80064f4:	47c0      	blx	r8
 80064f6:	4306      	orrs	r6, r0
 80064f8:	3568      	adds	r5, #104	; 0x68
 80064fa:	e7e9      	b.n	80064d0 <_fwalk_sglue+0x10>

080064fc <iprintf>:
 80064fc:	b40f      	push	{r0, r1, r2, r3}
 80064fe:	b507      	push	{r0, r1, r2, lr}
 8006500:	4906      	ldr	r1, [pc, #24]	; (800651c <iprintf+0x20>)
 8006502:	ab04      	add	r3, sp, #16
 8006504:	6808      	ldr	r0, [r1, #0]
 8006506:	f853 2b04 	ldr.w	r2, [r3], #4
 800650a:	6881      	ldr	r1, [r0, #8]
 800650c:	9301      	str	r3, [sp, #4]
 800650e:	f000 fa4b 	bl	80069a8 <_vfiprintf_r>
 8006512:	b003      	add	sp, #12
 8006514:	f85d eb04 	ldr.w	lr, [sp], #4
 8006518:	b004      	add	sp, #16
 800651a:	4770      	bx	lr
 800651c:	2000006c 	.word	0x2000006c

08006520 <__sread>:
 8006520:	b510      	push	{r4, lr}
 8006522:	460c      	mov	r4, r1
 8006524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006528:	f000 f8be 	bl	80066a8 <_read_r>
 800652c:	2800      	cmp	r0, #0
 800652e:	bfab      	itete	ge
 8006530:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006532:	89a3      	ldrhlt	r3, [r4, #12]
 8006534:	181b      	addge	r3, r3, r0
 8006536:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800653a:	bfac      	ite	ge
 800653c:	6563      	strge	r3, [r4, #84]	; 0x54
 800653e:	81a3      	strhlt	r3, [r4, #12]
 8006540:	bd10      	pop	{r4, pc}

08006542 <__swrite>:
 8006542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006546:	461f      	mov	r7, r3
 8006548:	898b      	ldrh	r3, [r1, #12]
 800654a:	05db      	lsls	r3, r3, #23
 800654c:	4605      	mov	r5, r0
 800654e:	460c      	mov	r4, r1
 8006550:	4616      	mov	r6, r2
 8006552:	d505      	bpl.n	8006560 <__swrite+0x1e>
 8006554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006558:	2302      	movs	r3, #2
 800655a:	2200      	movs	r2, #0
 800655c:	f000 f892 	bl	8006684 <_lseek_r>
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006566:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800656a:	81a3      	strh	r3, [r4, #12]
 800656c:	4632      	mov	r2, r6
 800656e:	463b      	mov	r3, r7
 8006570:	4628      	mov	r0, r5
 8006572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006576:	f000 b8a9 	b.w	80066cc <_write_r>

0800657a <__sseek>:
 800657a:	b510      	push	{r4, lr}
 800657c:	460c      	mov	r4, r1
 800657e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006582:	f000 f87f 	bl	8006684 <_lseek_r>
 8006586:	1c43      	adds	r3, r0, #1
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	bf15      	itete	ne
 800658c:	6560      	strne	r0, [r4, #84]	; 0x54
 800658e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006592:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006596:	81a3      	strheq	r3, [r4, #12]
 8006598:	bf18      	it	ne
 800659a:	81a3      	strhne	r3, [r4, #12]
 800659c:	bd10      	pop	{r4, pc}

0800659e <__sclose>:
 800659e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a2:	f000 b809 	b.w	80065b8 <_close_r>

080065a6 <memset>:
 80065a6:	4402      	add	r2, r0
 80065a8:	4603      	mov	r3, r0
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d100      	bne.n	80065b0 <memset+0xa>
 80065ae:	4770      	bx	lr
 80065b0:	f803 1b01 	strb.w	r1, [r3], #1
 80065b4:	e7f9      	b.n	80065aa <memset+0x4>
	...

080065b8 <_close_r>:
 80065b8:	b538      	push	{r3, r4, r5, lr}
 80065ba:	4d06      	ldr	r5, [pc, #24]	; (80065d4 <_close_r+0x1c>)
 80065bc:	2300      	movs	r3, #0
 80065be:	4604      	mov	r4, r0
 80065c0:	4608      	mov	r0, r1
 80065c2:	602b      	str	r3, [r5, #0]
 80065c4:	f7fa faa2 	bl	8000b0c <_close>
 80065c8:	1c43      	adds	r3, r0, #1
 80065ca:	d102      	bne.n	80065d2 <_close_r+0x1a>
 80065cc:	682b      	ldr	r3, [r5, #0]
 80065ce:	b103      	cbz	r3, 80065d2 <_close_r+0x1a>
 80065d0:	6023      	str	r3, [r4, #0]
 80065d2:	bd38      	pop	{r3, r4, r5, pc}
 80065d4:	200085e4 	.word	0x200085e4

080065d8 <_reclaim_reent>:
 80065d8:	4b29      	ldr	r3, [pc, #164]	; (8006680 <_reclaim_reent+0xa8>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4283      	cmp	r3, r0
 80065de:	b570      	push	{r4, r5, r6, lr}
 80065e0:	4604      	mov	r4, r0
 80065e2:	d04b      	beq.n	800667c <_reclaim_reent+0xa4>
 80065e4:	69c3      	ldr	r3, [r0, #28]
 80065e6:	b143      	cbz	r3, 80065fa <_reclaim_reent+0x22>
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d144      	bne.n	8006678 <_reclaim_reent+0xa0>
 80065ee:	69e3      	ldr	r3, [r4, #28]
 80065f0:	6819      	ldr	r1, [r3, #0]
 80065f2:	b111      	cbz	r1, 80065fa <_reclaim_reent+0x22>
 80065f4:	4620      	mov	r0, r4
 80065f6:	f000 f8b5 	bl	8006764 <_free_r>
 80065fa:	6961      	ldr	r1, [r4, #20]
 80065fc:	b111      	cbz	r1, 8006604 <_reclaim_reent+0x2c>
 80065fe:	4620      	mov	r0, r4
 8006600:	f000 f8b0 	bl	8006764 <_free_r>
 8006604:	69e1      	ldr	r1, [r4, #28]
 8006606:	b111      	cbz	r1, 800660e <_reclaim_reent+0x36>
 8006608:	4620      	mov	r0, r4
 800660a:	f000 f8ab 	bl	8006764 <_free_r>
 800660e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006610:	b111      	cbz	r1, 8006618 <_reclaim_reent+0x40>
 8006612:	4620      	mov	r0, r4
 8006614:	f000 f8a6 	bl	8006764 <_free_r>
 8006618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800661a:	b111      	cbz	r1, 8006622 <_reclaim_reent+0x4a>
 800661c:	4620      	mov	r0, r4
 800661e:	f000 f8a1 	bl	8006764 <_free_r>
 8006622:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006624:	b111      	cbz	r1, 800662c <_reclaim_reent+0x54>
 8006626:	4620      	mov	r0, r4
 8006628:	f000 f89c 	bl	8006764 <_free_r>
 800662c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800662e:	b111      	cbz	r1, 8006636 <_reclaim_reent+0x5e>
 8006630:	4620      	mov	r0, r4
 8006632:	f000 f897 	bl	8006764 <_free_r>
 8006636:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006638:	b111      	cbz	r1, 8006640 <_reclaim_reent+0x68>
 800663a:	4620      	mov	r0, r4
 800663c:	f000 f892 	bl	8006764 <_free_r>
 8006640:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006642:	b111      	cbz	r1, 800664a <_reclaim_reent+0x72>
 8006644:	4620      	mov	r0, r4
 8006646:	f000 f88d 	bl	8006764 <_free_r>
 800664a:	6a23      	ldr	r3, [r4, #32]
 800664c:	b1b3      	cbz	r3, 800667c <_reclaim_reent+0xa4>
 800664e:	4620      	mov	r0, r4
 8006650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006654:	4718      	bx	r3
 8006656:	5949      	ldr	r1, [r1, r5]
 8006658:	b941      	cbnz	r1, 800666c <_reclaim_reent+0x94>
 800665a:	3504      	adds	r5, #4
 800665c:	69e3      	ldr	r3, [r4, #28]
 800665e:	2d80      	cmp	r5, #128	; 0x80
 8006660:	68d9      	ldr	r1, [r3, #12]
 8006662:	d1f8      	bne.n	8006656 <_reclaim_reent+0x7e>
 8006664:	4620      	mov	r0, r4
 8006666:	f000 f87d 	bl	8006764 <_free_r>
 800666a:	e7c0      	b.n	80065ee <_reclaim_reent+0x16>
 800666c:	680e      	ldr	r6, [r1, #0]
 800666e:	4620      	mov	r0, r4
 8006670:	f000 f878 	bl	8006764 <_free_r>
 8006674:	4631      	mov	r1, r6
 8006676:	e7ef      	b.n	8006658 <_reclaim_reent+0x80>
 8006678:	2500      	movs	r5, #0
 800667a:	e7ef      	b.n	800665c <_reclaim_reent+0x84>
 800667c:	bd70      	pop	{r4, r5, r6, pc}
 800667e:	bf00      	nop
 8006680:	2000006c 	.word	0x2000006c

08006684 <_lseek_r>:
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	4d07      	ldr	r5, [pc, #28]	; (80066a4 <_lseek_r+0x20>)
 8006688:	4604      	mov	r4, r0
 800668a:	4608      	mov	r0, r1
 800668c:	4611      	mov	r1, r2
 800668e:	2200      	movs	r2, #0
 8006690:	602a      	str	r2, [r5, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	f7fa fa61 	bl	8000b5a <_lseek>
 8006698:	1c43      	adds	r3, r0, #1
 800669a:	d102      	bne.n	80066a2 <_lseek_r+0x1e>
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	b103      	cbz	r3, 80066a2 <_lseek_r+0x1e>
 80066a0:	6023      	str	r3, [r4, #0]
 80066a2:	bd38      	pop	{r3, r4, r5, pc}
 80066a4:	200085e4 	.word	0x200085e4

080066a8 <_read_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4d07      	ldr	r5, [pc, #28]	; (80066c8 <_read_r+0x20>)
 80066ac:	4604      	mov	r4, r0
 80066ae:	4608      	mov	r0, r1
 80066b0:	4611      	mov	r1, r2
 80066b2:	2200      	movs	r2, #0
 80066b4:	602a      	str	r2, [r5, #0]
 80066b6:	461a      	mov	r2, r3
 80066b8:	f7fa f9ef 	bl	8000a9a <_read>
 80066bc:	1c43      	adds	r3, r0, #1
 80066be:	d102      	bne.n	80066c6 <_read_r+0x1e>
 80066c0:	682b      	ldr	r3, [r5, #0]
 80066c2:	b103      	cbz	r3, 80066c6 <_read_r+0x1e>
 80066c4:	6023      	str	r3, [r4, #0]
 80066c6:	bd38      	pop	{r3, r4, r5, pc}
 80066c8:	200085e4 	.word	0x200085e4

080066cc <_write_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	4d07      	ldr	r5, [pc, #28]	; (80066ec <_write_r+0x20>)
 80066d0:	4604      	mov	r4, r0
 80066d2:	4608      	mov	r0, r1
 80066d4:	4611      	mov	r1, r2
 80066d6:	2200      	movs	r2, #0
 80066d8:	602a      	str	r2, [r5, #0]
 80066da:	461a      	mov	r2, r3
 80066dc:	f7fa f9fa 	bl	8000ad4 <_write>
 80066e0:	1c43      	adds	r3, r0, #1
 80066e2:	d102      	bne.n	80066ea <_write_r+0x1e>
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	b103      	cbz	r3, 80066ea <_write_r+0x1e>
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	bd38      	pop	{r3, r4, r5, pc}
 80066ec:	200085e4 	.word	0x200085e4

080066f0 <__errno>:
 80066f0:	4b01      	ldr	r3, [pc, #4]	; (80066f8 <__errno+0x8>)
 80066f2:	6818      	ldr	r0, [r3, #0]
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	2000006c 	.word	0x2000006c

080066fc <__libc_init_array>:
 80066fc:	b570      	push	{r4, r5, r6, lr}
 80066fe:	4d0d      	ldr	r5, [pc, #52]	; (8006734 <__libc_init_array+0x38>)
 8006700:	4c0d      	ldr	r4, [pc, #52]	; (8006738 <__libc_init_array+0x3c>)
 8006702:	1b64      	subs	r4, r4, r5
 8006704:	10a4      	asrs	r4, r4, #2
 8006706:	2600      	movs	r6, #0
 8006708:	42a6      	cmp	r6, r4
 800670a:	d109      	bne.n	8006720 <__libc_init_array+0x24>
 800670c:	4d0b      	ldr	r5, [pc, #44]	; (800673c <__libc_init_array+0x40>)
 800670e:	4c0c      	ldr	r4, [pc, #48]	; (8006740 <__libc_init_array+0x44>)
 8006710:	f000 fdcc 	bl	80072ac <_init>
 8006714:	1b64      	subs	r4, r4, r5
 8006716:	10a4      	asrs	r4, r4, #2
 8006718:	2600      	movs	r6, #0
 800671a:	42a6      	cmp	r6, r4
 800671c:	d105      	bne.n	800672a <__libc_init_array+0x2e>
 800671e:	bd70      	pop	{r4, r5, r6, pc}
 8006720:	f855 3b04 	ldr.w	r3, [r5], #4
 8006724:	4798      	blx	r3
 8006726:	3601      	adds	r6, #1
 8006728:	e7ee      	b.n	8006708 <__libc_init_array+0xc>
 800672a:	f855 3b04 	ldr.w	r3, [r5], #4
 800672e:	4798      	blx	r3
 8006730:	3601      	adds	r6, #1
 8006732:	e7f2      	b.n	800671a <__libc_init_array+0x1e>
 8006734:	08007434 	.word	0x08007434
 8006738:	08007434 	.word	0x08007434
 800673c:	08007434 	.word	0x08007434
 8006740:	08007438 	.word	0x08007438

08006744 <__retarget_lock_acquire_recursive>:
 8006744:	4770      	bx	lr

08006746 <__retarget_lock_release_recursive>:
 8006746:	4770      	bx	lr

08006748 <memcpy>:
 8006748:	440a      	add	r2, r1
 800674a:	4291      	cmp	r1, r2
 800674c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006750:	d100      	bne.n	8006754 <memcpy+0xc>
 8006752:	4770      	bx	lr
 8006754:	b510      	push	{r4, lr}
 8006756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800675a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800675e:	4291      	cmp	r1, r2
 8006760:	d1f9      	bne.n	8006756 <memcpy+0xe>
 8006762:	bd10      	pop	{r4, pc}

08006764 <_free_r>:
 8006764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006766:	2900      	cmp	r1, #0
 8006768:	d044      	beq.n	80067f4 <_free_r+0x90>
 800676a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800676e:	9001      	str	r0, [sp, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	f1a1 0404 	sub.w	r4, r1, #4
 8006776:	bfb8      	it	lt
 8006778:	18e4      	addlt	r4, r4, r3
 800677a:	f000 f8df 	bl	800693c <__malloc_lock>
 800677e:	4a1e      	ldr	r2, [pc, #120]	; (80067f8 <_free_r+0x94>)
 8006780:	9801      	ldr	r0, [sp, #4]
 8006782:	6813      	ldr	r3, [r2, #0]
 8006784:	b933      	cbnz	r3, 8006794 <_free_r+0x30>
 8006786:	6063      	str	r3, [r4, #4]
 8006788:	6014      	str	r4, [r2, #0]
 800678a:	b003      	add	sp, #12
 800678c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006790:	f000 b8da 	b.w	8006948 <__malloc_unlock>
 8006794:	42a3      	cmp	r3, r4
 8006796:	d908      	bls.n	80067aa <_free_r+0x46>
 8006798:	6825      	ldr	r5, [r4, #0]
 800679a:	1961      	adds	r1, r4, r5
 800679c:	428b      	cmp	r3, r1
 800679e:	bf01      	itttt	eq
 80067a0:	6819      	ldreq	r1, [r3, #0]
 80067a2:	685b      	ldreq	r3, [r3, #4]
 80067a4:	1949      	addeq	r1, r1, r5
 80067a6:	6021      	streq	r1, [r4, #0]
 80067a8:	e7ed      	b.n	8006786 <_free_r+0x22>
 80067aa:	461a      	mov	r2, r3
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	b10b      	cbz	r3, 80067b4 <_free_r+0x50>
 80067b0:	42a3      	cmp	r3, r4
 80067b2:	d9fa      	bls.n	80067aa <_free_r+0x46>
 80067b4:	6811      	ldr	r1, [r2, #0]
 80067b6:	1855      	adds	r5, r2, r1
 80067b8:	42a5      	cmp	r5, r4
 80067ba:	d10b      	bne.n	80067d4 <_free_r+0x70>
 80067bc:	6824      	ldr	r4, [r4, #0]
 80067be:	4421      	add	r1, r4
 80067c0:	1854      	adds	r4, r2, r1
 80067c2:	42a3      	cmp	r3, r4
 80067c4:	6011      	str	r1, [r2, #0]
 80067c6:	d1e0      	bne.n	800678a <_free_r+0x26>
 80067c8:	681c      	ldr	r4, [r3, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	6053      	str	r3, [r2, #4]
 80067ce:	440c      	add	r4, r1
 80067d0:	6014      	str	r4, [r2, #0]
 80067d2:	e7da      	b.n	800678a <_free_r+0x26>
 80067d4:	d902      	bls.n	80067dc <_free_r+0x78>
 80067d6:	230c      	movs	r3, #12
 80067d8:	6003      	str	r3, [r0, #0]
 80067da:	e7d6      	b.n	800678a <_free_r+0x26>
 80067dc:	6825      	ldr	r5, [r4, #0]
 80067de:	1961      	adds	r1, r4, r5
 80067e0:	428b      	cmp	r3, r1
 80067e2:	bf04      	itt	eq
 80067e4:	6819      	ldreq	r1, [r3, #0]
 80067e6:	685b      	ldreq	r3, [r3, #4]
 80067e8:	6063      	str	r3, [r4, #4]
 80067ea:	bf04      	itt	eq
 80067ec:	1949      	addeq	r1, r1, r5
 80067ee:	6021      	streq	r1, [r4, #0]
 80067f0:	6054      	str	r4, [r2, #4]
 80067f2:	e7ca      	b.n	800678a <_free_r+0x26>
 80067f4:	b003      	add	sp, #12
 80067f6:	bd30      	pop	{r4, r5, pc}
 80067f8:	200085ec 	.word	0x200085ec

080067fc <sbrk_aligned>:
 80067fc:	b570      	push	{r4, r5, r6, lr}
 80067fe:	4e0e      	ldr	r6, [pc, #56]	; (8006838 <sbrk_aligned+0x3c>)
 8006800:	460c      	mov	r4, r1
 8006802:	6831      	ldr	r1, [r6, #0]
 8006804:	4605      	mov	r5, r0
 8006806:	b911      	cbnz	r1, 800680e <sbrk_aligned+0x12>
 8006808:	f000 fcbc 	bl	8007184 <_sbrk_r>
 800680c:	6030      	str	r0, [r6, #0]
 800680e:	4621      	mov	r1, r4
 8006810:	4628      	mov	r0, r5
 8006812:	f000 fcb7 	bl	8007184 <_sbrk_r>
 8006816:	1c43      	adds	r3, r0, #1
 8006818:	d00a      	beq.n	8006830 <sbrk_aligned+0x34>
 800681a:	1cc4      	adds	r4, r0, #3
 800681c:	f024 0403 	bic.w	r4, r4, #3
 8006820:	42a0      	cmp	r0, r4
 8006822:	d007      	beq.n	8006834 <sbrk_aligned+0x38>
 8006824:	1a21      	subs	r1, r4, r0
 8006826:	4628      	mov	r0, r5
 8006828:	f000 fcac 	bl	8007184 <_sbrk_r>
 800682c:	3001      	adds	r0, #1
 800682e:	d101      	bne.n	8006834 <sbrk_aligned+0x38>
 8006830:	f04f 34ff 	mov.w	r4, #4294967295
 8006834:	4620      	mov	r0, r4
 8006836:	bd70      	pop	{r4, r5, r6, pc}
 8006838:	200085f0 	.word	0x200085f0

0800683c <_malloc_r>:
 800683c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006840:	1ccd      	adds	r5, r1, #3
 8006842:	f025 0503 	bic.w	r5, r5, #3
 8006846:	3508      	adds	r5, #8
 8006848:	2d0c      	cmp	r5, #12
 800684a:	bf38      	it	cc
 800684c:	250c      	movcc	r5, #12
 800684e:	2d00      	cmp	r5, #0
 8006850:	4607      	mov	r7, r0
 8006852:	db01      	blt.n	8006858 <_malloc_r+0x1c>
 8006854:	42a9      	cmp	r1, r5
 8006856:	d905      	bls.n	8006864 <_malloc_r+0x28>
 8006858:	230c      	movs	r3, #12
 800685a:	603b      	str	r3, [r7, #0]
 800685c:	2600      	movs	r6, #0
 800685e:	4630      	mov	r0, r6
 8006860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006864:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006938 <_malloc_r+0xfc>
 8006868:	f000 f868 	bl	800693c <__malloc_lock>
 800686c:	f8d8 3000 	ldr.w	r3, [r8]
 8006870:	461c      	mov	r4, r3
 8006872:	bb5c      	cbnz	r4, 80068cc <_malloc_r+0x90>
 8006874:	4629      	mov	r1, r5
 8006876:	4638      	mov	r0, r7
 8006878:	f7ff ffc0 	bl	80067fc <sbrk_aligned>
 800687c:	1c43      	adds	r3, r0, #1
 800687e:	4604      	mov	r4, r0
 8006880:	d155      	bne.n	800692e <_malloc_r+0xf2>
 8006882:	f8d8 4000 	ldr.w	r4, [r8]
 8006886:	4626      	mov	r6, r4
 8006888:	2e00      	cmp	r6, #0
 800688a:	d145      	bne.n	8006918 <_malloc_r+0xdc>
 800688c:	2c00      	cmp	r4, #0
 800688e:	d048      	beq.n	8006922 <_malloc_r+0xe6>
 8006890:	6823      	ldr	r3, [r4, #0]
 8006892:	4631      	mov	r1, r6
 8006894:	4638      	mov	r0, r7
 8006896:	eb04 0903 	add.w	r9, r4, r3
 800689a:	f000 fc73 	bl	8007184 <_sbrk_r>
 800689e:	4581      	cmp	r9, r0
 80068a0:	d13f      	bne.n	8006922 <_malloc_r+0xe6>
 80068a2:	6821      	ldr	r1, [r4, #0]
 80068a4:	1a6d      	subs	r5, r5, r1
 80068a6:	4629      	mov	r1, r5
 80068a8:	4638      	mov	r0, r7
 80068aa:	f7ff ffa7 	bl	80067fc <sbrk_aligned>
 80068ae:	3001      	adds	r0, #1
 80068b0:	d037      	beq.n	8006922 <_malloc_r+0xe6>
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	442b      	add	r3, r5
 80068b6:	6023      	str	r3, [r4, #0]
 80068b8:	f8d8 3000 	ldr.w	r3, [r8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d038      	beq.n	8006932 <_malloc_r+0xf6>
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	42a2      	cmp	r2, r4
 80068c4:	d12b      	bne.n	800691e <_malloc_r+0xe2>
 80068c6:	2200      	movs	r2, #0
 80068c8:	605a      	str	r2, [r3, #4]
 80068ca:	e00f      	b.n	80068ec <_malloc_r+0xb0>
 80068cc:	6822      	ldr	r2, [r4, #0]
 80068ce:	1b52      	subs	r2, r2, r5
 80068d0:	d41f      	bmi.n	8006912 <_malloc_r+0xd6>
 80068d2:	2a0b      	cmp	r2, #11
 80068d4:	d917      	bls.n	8006906 <_malloc_r+0xca>
 80068d6:	1961      	adds	r1, r4, r5
 80068d8:	42a3      	cmp	r3, r4
 80068da:	6025      	str	r5, [r4, #0]
 80068dc:	bf18      	it	ne
 80068de:	6059      	strne	r1, [r3, #4]
 80068e0:	6863      	ldr	r3, [r4, #4]
 80068e2:	bf08      	it	eq
 80068e4:	f8c8 1000 	streq.w	r1, [r8]
 80068e8:	5162      	str	r2, [r4, r5]
 80068ea:	604b      	str	r3, [r1, #4]
 80068ec:	4638      	mov	r0, r7
 80068ee:	f104 060b 	add.w	r6, r4, #11
 80068f2:	f000 f829 	bl	8006948 <__malloc_unlock>
 80068f6:	f026 0607 	bic.w	r6, r6, #7
 80068fa:	1d23      	adds	r3, r4, #4
 80068fc:	1af2      	subs	r2, r6, r3
 80068fe:	d0ae      	beq.n	800685e <_malloc_r+0x22>
 8006900:	1b9b      	subs	r3, r3, r6
 8006902:	50a3      	str	r3, [r4, r2]
 8006904:	e7ab      	b.n	800685e <_malloc_r+0x22>
 8006906:	42a3      	cmp	r3, r4
 8006908:	6862      	ldr	r2, [r4, #4]
 800690a:	d1dd      	bne.n	80068c8 <_malloc_r+0x8c>
 800690c:	f8c8 2000 	str.w	r2, [r8]
 8006910:	e7ec      	b.n	80068ec <_malloc_r+0xb0>
 8006912:	4623      	mov	r3, r4
 8006914:	6864      	ldr	r4, [r4, #4]
 8006916:	e7ac      	b.n	8006872 <_malloc_r+0x36>
 8006918:	4634      	mov	r4, r6
 800691a:	6876      	ldr	r6, [r6, #4]
 800691c:	e7b4      	b.n	8006888 <_malloc_r+0x4c>
 800691e:	4613      	mov	r3, r2
 8006920:	e7cc      	b.n	80068bc <_malloc_r+0x80>
 8006922:	230c      	movs	r3, #12
 8006924:	603b      	str	r3, [r7, #0]
 8006926:	4638      	mov	r0, r7
 8006928:	f000 f80e 	bl	8006948 <__malloc_unlock>
 800692c:	e797      	b.n	800685e <_malloc_r+0x22>
 800692e:	6025      	str	r5, [r4, #0]
 8006930:	e7dc      	b.n	80068ec <_malloc_r+0xb0>
 8006932:	605b      	str	r3, [r3, #4]
 8006934:	deff      	udf	#255	; 0xff
 8006936:	bf00      	nop
 8006938:	200085ec 	.word	0x200085ec

0800693c <__malloc_lock>:
 800693c:	4801      	ldr	r0, [pc, #4]	; (8006944 <__malloc_lock+0x8>)
 800693e:	f7ff bf01 	b.w	8006744 <__retarget_lock_acquire_recursive>
 8006942:	bf00      	nop
 8006944:	200085e8 	.word	0x200085e8

08006948 <__malloc_unlock>:
 8006948:	4801      	ldr	r0, [pc, #4]	; (8006950 <__malloc_unlock+0x8>)
 800694a:	f7ff befc 	b.w	8006746 <__retarget_lock_release_recursive>
 800694e:	bf00      	nop
 8006950:	200085e8 	.word	0x200085e8

08006954 <__sfputc_r>:
 8006954:	6893      	ldr	r3, [r2, #8]
 8006956:	3b01      	subs	r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	b410      	push	{r4}
 800695c:	6093      	str	r3, [r2, #8]
 800695e:	da08      	bge.n	8006972 <__sfputc_r+0x1e>
 8006960:	6994      	ldr	r4, [r2, #24]
 8006962:	42a3      	cmp	r3, r4
 8006964:	db01      	blt.n	800696a <__sfputc_r+0x16>
 8006966:	290a      	cmp	r1, #10
 8006968:	d103      	bne.n	8006972 <__sfputc_r+0x1e>
 800696a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800696e:	f000 bb73 	b.w	8007058 <__swbuf_r>
 8006972:	6813      	ldr	r3, [r2, #0]
 8006974:	1c58      	adds	r0, r3, #1
 8006976:	6010      	str	r0, [r2, #0]
 8006978:	7019      	strb	r1, [r3, #0]
 800697a:	4608      	mov	r0, r1
 800697c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006980:	4770      	bx	lr

08006982 <__sfputs_r>:
 8006982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006984:	4606      	mov	r6, r0
 8006986:	460f      	mov	r7, r1
 8006988:	4614      	mov	r4, r2
 800698a:	18d5      	adds	r5, r2, r3
 800698c:	42ac      	cmp	r4, r5
 800698e:	d101      	bne.n	8006994 <__sfputs_r+0x12>
 8006990:	2000      	movs	r0, #0
 8006992:	e007      	b.n	80069a4 <__sfputs_r+0x22>
 8006994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006998:	463a      	mov	r2, r7
 800699a:	4630      	mov	r0, r6
 800699c:	f7ff ffda 	bl	8006954 <__sfputc_r>
 80069a0:	1c43      	adds	r3, r0, #1
 80069a2:	d1f3      	bne.n	800698c <__sfputs_r+0xa>
 80069a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069a8 <_vfiprintf_r>:
 80069a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ac:	460d      	mov	r5, r1
 80069ae:	b09d      	sub	sp, #116	; 0x74
 80069b0:	4614      	mov	r4, r2
 80069b2:	4698      	mov	r8, r3
 80069b4:	4606      	mov	r6, r0
 80069b6:	b118      	cbz	r0, 80069c0 <_vfiprintf_r+0x18>
 80069b8:	6a03      	ldr	r3, [r0, #32]
 80069ba:	b90b      	cbnz	r3, 80069c0 <_vfiprintf_r+0x18>
 80069bc:	f7ff fd68 	bl	8006490 <__sinit>
 80069c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069c2:	07d9      	lsls	r1, r3, #31
 80069c4:	d405      	bmi.n	80069d2 <_vfiprintf_r+0x2a>
 80069c6:	89ab      	ldrh	r3, [r5, #12]
 80069c8:	059a      	lsls	r2, r3, #22
 80069ca:	d402      	bmi.n	80069d2 <_vfiprintf_r+0x2a>
 80069cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069ce:	f7ff feb9 	bl	8006744 <__retarget_lock_acquire_recursive>
 80069d2:	89ab      	ldrh	r3, [r5, #12]
 80069d4:	071b      	lsls	r3, r3, #28
 80069d6:	d501      	bpl.n	80069dc <_vfiprintf_r+0x34>
 80069d8:	692b      	ldr	r3, [r5, #16]
 80069da:	b99b      	cbnz	r3, 8006a04 <_vfiprintf_r+0x5c>
 80069dc:	4629      	mov	r1, r5
 80069de:	4630      	mov	r0, r6
 80069e0:	f000 fb78 	bl	80070d4 <__swsetup_r>
 80069e4:	b170      	cbz	r0, 8006a04 <_vfiprintf_r+0x5c>
 80069e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069e8:	07dc      	lsls	r4, r3, #31
 80069ea:	d504      	bpl.n	80069f6 <_vfiprintf_r+0x4e>
 80069ec:	f04f 30ff 	mov.w	r0, #4294967295
 80069f0:	b01d      	add	sp, #116	; 0x74
 80069f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f6:	89ab      	ldrh	r3, [r5, #12]
 80069f8:	0598      	lsls	r0, r3, #22
 80069fa:	d4f7      	bmi.n	80069ec <_vfiprintf_r+0x44>
 80069fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069fe:	f7ff fea2 	bl	8006746 <__retarget_lock_release_recursive>
 8006a02:	e7f3      	b.n	80069ec <_vfiprintf_r+0x44>
 8006a04:	2300      	movs	r3, #0
 8006a06:	9309      	str	r3, [sp, #36]	; 0x24
 8006a08:	2320      	movs	r3, #32
 8006a0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a12:	2330      	movs	r3, #48	; 0x30
 8006a14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006bc8 <_vfiprintf_r+0x220>
 8006a18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a1c:	f04f 0901 	mov.w	r9, #1
 8006a20:	4623      	mov	r3, r4
 8006a22:	469a      	mov	sl, r3
 8006a24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a28:	b10a      	cbz	r2, 8006a2e <_vfiprintf_r+0x86>
 8006a2a:	2a25      	cmp	r2, #37	; 0x25
 8006a2c:	d1f9      	bne.n	8006a22 <_vfiprintf_r+0x7a>
 8006a2e:	ebba 0b04 	subs.w	fp, sl, r4
 8006a32:	d00b      	beq.n	8006a4c <_vfiprintf_r+0xa4>
 8006a34:	465b      	mov	r3, fp
 8006a36:	4622      	mov	r2, r4
 8006a38:	4629      	mov	r1, r5
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	f7ff ffa1 	bl	8006982 <__sfputs_r>
 8006a40:	3001      	adds	r0, #1
 8006a42:	f000 80a9 	beq.w	8006b98 <_vfiprintf_r+0x1f0>
 8006a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a48:	445a      	add	r2, fp
 8006a4a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 80a1 	beq.w	8006b98 <_vfiprintf_r+0x1f0>
 8006a56:	2300      	movs	r3, #0
 8006a58:	f04f 32ff 	mov.w	r2, #4294967295
 8006a5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a60:	f10a 0a01 	add.w	sl, sl, #1
 8006a64:	9304      	str	r3, [sp, #16]
 8006a66:	9307      	str	r3, [sp, #28]
 8006a68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a6c:	931a      	str	r3, [sp, #104]	; 0x68
 8006a6e:	4654      	mov	r4, sl
 8006a70:	2205      	movs	r2, #5
 8006a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a76:	4854      	ldr	r0, [pc, #336]	; (8006bc8 <_vfiprintf_r+0x220>)
 8006a78:	f7f9 fbaa 	bl	80001d0 <memchr>
 8006a7c:	9a04      	ldr	r2, [sp, #16]
 8006a7e:	b9d8      	cbnz	r0, 8006ab8 <_vfiprintf_r+0x110>
 8006a80:	06d1      	lsls	r1, r2, #27
 8006a82:	bf44      	itt	mi
 8006a84:	2320      	movmi	r3, #32
 8006a86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a8a:	0713      	lsls	r3, r2, #28
 8006a8c:	bf44      	itt	mi
 8006a8e:	232b      	movmi	r3, #43	; 0x2b
 8006a90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a94:	f89a 3000 	ldrb.w	r3, [sl]
 8006a98:	2b2a      	cmp	r3, #42	; 0x2a
 8006a9a:	d015      	beq.n	8006ac8 <_vfiprintf_r+0x120>
 8006a9c:	9a07      	ldr	r2, [sp, #28]
 8006a9e:	4654      	mov	r4, sl
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	f04f 0c0a 	mov.w	ip, #10
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aac:	3b30      	subs	r3, #48	; 0x30
 8006aae:	2b09      	cmp	r3, #9
 8006ab0:	d94d      	bls.n	8006b4e <_vfiprintf_r+0x1a6>
 8006ab2:	b1b0      	cbz	r0, 8006ae2 <_vfiprintf_r+0x13a>
 8006ab4:	9207      	str	r2, [sp, #28]
 8006ab6:	e014      	b.n	8006ae2 <_vfiprintf_r+0x13a>
 8006ab8:	eba0 0308 	sub.w	r3, r0, r8
 8006abc:	fa09 f303 	lsl.w	r3, r9, r3
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	9304      	str	r3, [sp, #16]
 8006ac4:	46a2      	mov	sl, r4
 8006ac6:	e7d2      	b.n	8006a6e <_vfiprintf_r+0xc6>
 8006ac8:	9b03      	ldr	r3, [sp, #12]
 8006aca:	1d19      	adds	r1, r3, #4
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	9103      	str	r1, [sp, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	bfbb      	ittet	lt
 8006ad4:	425b      	neglt	r3, r3
 8006ad6:	f042 0202 	orrlt.w	r2, r2, #2
 8006ada:	9307      	strge	r3, [sp, #28]
 8006adc:	9307      	strlt	r3, [sp, #28]
 8006ade:	bfb8      	it	lt
 8006ae0:	9204      	strlt	r2, [sp, #16]
 8006ae2:	7823      	ldrb	r3, [r4, #0]
 8006ae4:	2b2e      	cmp	r3, #46	; 0x2e
 8006ae6:	d10c      	bne.n	8006b02 <_vfiprintf_r+0x15a>
 8006ae8:	7863      	ldrb	r3, [r4, #1]
 8006aea:	2b2a      	cmp	r3, #42	; 0x2a
 8006aec:	d134      	bne.n	8006b58 <_vfiprintf_r+0x1b0>
 8006aee:	9b03      	ldr	r3, [sp, #12]
 8006af0:	1d1a      	adds	r2, r3, #4
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	9203      	str	r2, [sp, #12]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	bfb8      	it	lt
 8006afa:	f04f 33ff 	movlt.w	r3, #4294967295
 8006afe:	3402      	adds	r4, #2
 8006b00:	9305      	str	r3, [sp, #20]
 8006b02:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006bd8 <_vfiprintf_r+0x230>
 8006b06:	7821      	ldrb	r1, [r4, #0]
 8006b08:	2203      	movs	r2, #3
 8006b0a:	4650      	mov	r0, sl
 8006b0c:	f7f9 fb60 	bl	80001d0 <memchr>
 8006b10:	b138      	cbz	r0, 8006b22 <_vfiprintf_r+0x17a>
 8006b12:	9b04      	ldr	r3, [sp, #16]
 8006b14:	eba0 000a 	sub.w	r0, r0, sl
 8006b18:	2240      	movs	r2, #64	; 0x40
 8006b1a:	4082      	lsls	r2, r0
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	3401      	adds	r4, #1
 8006b20:	9304      	str	r3, [sp, #16]
 8006b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b26:	4829      	ldr	r0, [pc, #164]	; (8006bcc <_vfiprintf_r+0x224>)
 8006b28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b2c:	2206      	movs	r2, #6
 8006b2e:	f7f9 fb4f 	bl	80001d0 <memchr>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d03f      	beq.n	8006bb6 <_vfiprintf_r+0x20e>
 8006b36:	4b26      	ldr	r3, [pc, #152]	; (8006bd0 <_vfiprintf_r+0x228>)
 8006b38:	bb1b      	cbnz	r3, 8006b82 <_vfiprintf_r+0x1da>
 8006b3a:	9b03      	ldr	r3, [sp, #12]
 8006b3c:	3307      	adds	r3, #7
 8006b3e:	f023 0307 	bic.w	r3, r3, #7
 8006b42:	3308      	adds	r3, #8
 8006b44:	9303      	str	r3, [sp, #12]
 8006b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b48:	443b      	add	r3, r7
 8006b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b4c:	e768      	b.n	8006a20 <_vfiprintf_r+0x78>
 8006b4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b52:	460c      	mov	r4, r1
 8006b54:	2001      	movs	r0, #1
 8006b56:	e7a6      	b.n	8006aa6 <_vfiprintf_r+0xfe>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	3401      	adds	r4, #1
 8006b5c:	9305      	str	r3, [sp, #20]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	f04f 0c0a 	mov.w	ip, #10
 8006b64:	4620      	mov	r0, r4
 8006b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b6a:	3a30      	subs	r2, #48	; 0x30
 8006b6c:	2a09      	cmp	r2, #9
 8006b6e:	d903      	bls.n	8006b78 <_vfiprintf_r+0x1d0>
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d0c6      	beq.n	8006b02 <_vfiprintf_r+0x15a>
 8006b74:	9105      	str	r1, [sp, #20]
 8006b76:	e7c4      	b.n	8006b02 <_vfiprintf_r+0x15a>
 8006b78:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e7f0      	b.n	8006b64 <_vfiprintf_r+0x1bc>
 8006b82:	ab03      	add	r3, sp, #12
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	462a      	mov	r2, r5
 8006b88:	4b12      	ldr	r3, [pc, #72]	; (8006bd4 <_vfiprintf_r+0x22c>)
 8006b8a:	a904      	add	r1, sp, #16
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	f3af 8000 	nop.w
 8006b92:	4607      	mov	r7, r0
 8006b94:	1c78      	adds	r0, r7, #1
 8006b96:	d1d6      	bne.n	8006b46 <_vfiprintf_r+0x19e>
 8006b98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b9a:	07d9      	lsls	r1, r3, #31
 8006b9c:	d405      	bmi.n	8006baa <_vfiprintf_r+0x202>
 8006b9e:	89ab      	ldrh	r3, [r5, #12]
 8006ba0:	059a      	lsls	r2, r3, #22
 8006ba2:	d402      	bmi.n	8006baa <_vfiprintf_r+0x202>
 8006ba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ba6:	f7ff fdce 	bl	8006746 <__retarget_lock_release_recursive>
 8006baa:	89ab      	ldrh	r3, [r5, #12]
 8006bac:	065b      	lsls	r3, r3, #25
 8006bae:	f53f af1d 	bmi.w	80069ec <_vfiprintf_r+0x44>
 8006bb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bb4:	e71c      	b.n	80069f0 <_vfiprintf_r+0x48>
 8006bb6:	ab03      	add	r3, sp, #12
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	462a      	mov	r2, r5
 8006bbc:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <_vfiprintf_r+0x22c>)
 8006bbe:	a904      	add	r1, sp, #16
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	f000 f879 	bl	8006cb8 <_printf_i>
 8006bc6:	e7e4      	b.n	8006b92 <_vfiprintf_r+0x1ea>
 8006bc8:	080073f8 	.word	0x080073f8
 8006bcc:	08007402 	.word	0x08007402
 8006bd0:	00000000 	.word	0x00000000
 8006bd4:	08006983 	.word	0x08006983
 8006bd8:	080073fe 	.word	0x080073fe

08006bdc <_printf_common>:
 8006bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006be0:	4616      	mov	r6, r2
 8006be2:	4699      	mov	r9, r3
 8006be4:	688a      	ldr	r2, [r1, #8]
 8006be6:	690b      	ldr	r3, [r1, #16]
 8006be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bec:	4293      	cmp	r3, r2
 8006bee:	bfb8      	it	lt
 8006bf0:	4613      	movlt	r3, r2
 8006bf2:	6033      	str	r3, [r6, #0]
 8006bf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	b10a      	cbz	r2, 8006c02 <_printf_common+0x26>
 8006bfe:	3301      	adds	r3, #1
 8006c00:	6033      	str	r3, [r6, #0]
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	0699      	lsls	r1, r3, #26
 8006c06:	bf42      	ittt	mi
 8006c08:	6833      	ldrmi	r3, [r6, #0]
 8006c0a:	3302      	addmi	r3, #2
 8006c0c:	6033      	strmi	r3, [r6, #0]
 8006c0e:	6825      	ldr	r5, [r4, #0]
 8006c10:	f015 0506 	ands.w	r5, r5, #6
 8006c14:	d106      	bne.n	8006c24 <_printf_common+0x48>
 8006c16:	f104 0a19 	add.w	sl, r4, #25
 8006c1a:	68e3      	ldr	r3, [r4, #12]
 8006c1c:	6832      	ldr	r2, [r6, #0]
 8006c1e:	1a9b      	subs	r3, r3, r2
 8006c20:	42ab      	cmp	r3, r5
 8006c22:	dc26      	bgt.n	8006c72 <_printf_common+0x96>
 8006c24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c28:	1e13      	subs	r3, r2, #0
 8006c2a:	6822      	ldr	r2, [r4, #0]
 8006c2c:	bf18      	it	ne
 8006c2e:	2301      	movne	r3, #1
 8006c30:	0692      	lsls	r2, r2, #26
 8006c32:	d42b      	bmi.n	8006c8c <_printf_common+0xb0>
 8006c34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c38:	4649      	mov	r1, r9
 8006c3a:	4638      	mov	r0, r7
 8006c3c:	47c0      	blx	r8
 8006c3e:	3001      	adds	r0, #1
 8006c40:	d01e      	beq.n	8006c80 <_printf_common+0xa4>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	6922      	ldr	r2, [r4, #16]
 8006c46:	f003 0306 	and.w	r3, r3, #6
 8006c4a:	2b04      	cmp	r3, #4
 8006c4c:	bf02      	ittt	eq
 8006c4e:	68e5      	ldreq	r5, [r4, #12]
 8006c50:	6833      	ldreq	r3, [r6, #0]
 8006c52:	1aed      	subeq	r5, r5, r3
 8006c54:	68a3      	ldr	r3, [r4, #8]
 8006c56:	bf0c      	ite	eq
 8006c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c5c:	2500      	movne	r5, #0
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	bfc4      	itt	gt
 8006c62:	1a9b      	subgt	r3, r3, r2
 8006c64:	18ed      	addgt	r5, r5, r3
 8006c66:	2600      	movs	r6, #0
 8006c68:	341a      	adds	r4, #26
 8006c6a:	42b5      	cmp	r5, r6
 8006c6c:	d11a      	bne.n	8006ca4 <_printf_common+0xc8>
 8006c6e:	2000      	movs	r0, #0
 8006c70:	e008      	b.n	8006c84 <_printf_common+0xa8>
 8006c72:	2301      	movs	r3, #1
 8006c74:	4652      	mov	r2, sl
 8006c76:	4649      	mov	r1, r9
 8006c78:	4638      	mov	r0, r7
 8006c7a:	47c0      	blx	r8
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d103      	bne.n	8006c88 <_printf_common+0xac>
 8006c80:	f04f 30ff 	mov.w	r0, #4294967295
 8006c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c88:	3501      	adds	r5, #1
 8006c8a:	e7c6      	b.n	8006c1a <_printf_common+0x3e>
 8006c8c:	18e1      	adds	r1, r4, r3
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	2030      	movs	r0, #48	; 0x30
 8006c92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c96:	4422      	add	r2, r4
 8006c98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ca0:	3302      	adds	r3, #2
 8006ca2:	e7c7      	b.n	8006c34 <_printf_common+0x58>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	4622      	mov	r2, r4
 8006ca8:	4649      	mov	r1, r9
 8006caa:	4638      	mov	r0, r7
 8006cac:	47c0      	blx	r8
 8006cae:	3001      	adds	r0, #1
 8006cb0:	d0e6      	beq.n	8006c80 <_printf_common+0xa4>
 8006cb2:	3601      	adds	r6, #1
 8006cb4:	e7d9      	b.n	8006c6a <_printf_common+0x8e>
	...

08006cb8 <_printf_i>:
 8006cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006cbc:	7e0f      	ldrb	r7, [r1, #24]
 8006cbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006cc0:	2f78      	cmp	r7, #120	; 0x78
 8006cc2:	4691      	mov	r9, r2
 8006cc4:	4680      	mov	r8, r0
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	469a      	mov	sl, r3
 8006cca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006cce:	d807      	bhi.n	8006ce0 <_printf_i+0x28>
 8006cd0:	2f62      	cmp	r7, #98	; 0x62
 8006cd2:	d80a      	bhi.n	8006cea <_printf_i+0x32>
 8006cd4:	2f00      	cmp	r7, #0
 8006cd6:	f000 80d4 	beq.w	8006e82 <_printf_i+0x1ca>
 8006cda:	2f58      	cmp	r7, #88	; 0x58
 8006cdc:	f000 80c0 	beq.w	8006e60 <_printf_i+0x1a8>
 8006ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ce4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ce8:	e03a      	b.n	8006d60 <_printf_i+0xa8>
 8006cea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cee:	2b15      	cmp	r3, #21
 8006cf0:	d8f6      	bhi.n	8006ce0 <_printf_i+0x28>
 8006cf2:	a101      	add	r1, pc, #4	; (adr r1, 8006cf8 <_printf_i+0x40>)
 8006cf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cf8:	08006d51 	.word	0x08006d51
 8006cfc:	08006d65 	.word	0x08006d65
 8006d00:	08006ce1 	.word	0x08006ce1
 8006d04:	08006ce1 	.word	0x08006ce1
 8006d08:	08006ce1 	.word	0x08006ce1
 8006d0c:	08006ce1 	.word	0x08006ce1
 8006d10:	08006d65 	.word	0x08006d65
 8006d14:	08006ce1 	.word	0x08006ce1
 8006d18:	08006ce1 	.word	0x08006ce1
 8006d1c:	08006ce1 	.word	0x08006ce1
 8006d20:	08006ce1 	.word	0x08006ce1
 8006d24:	08006e69 	.word	0x08006e69
 8006d28:	08006d91 	.word	0x08006d91
 8006d2c:	08006e23 	.word	0x08006e23
 8006d30:	08006ce1 	.word	0x08006ce1
 8006d34:	08006ce1 	.word	0x08006ce1
 8006d38:	08006e8b 	.word	0x08006e8b
 8006d3c:	08006ce1 	.word	0x08006ce1
 8006d40:	08006d91 	.word	0x08006d91
 8006d44:	08006ce1 	.word	0x08006ce1
 8006d48:	08006ce1 	.word	0x08006ce1
 8006d4c:	08006e2b 	.word	0x08006e2b
 8006d50:	682b      	ldr	r3, [r5, #0]
 8006d52:	1d1a      	adds	r2, r3, #4
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	602a      	str	r2, [r5, #0]
 8006d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d60:	2301      	movs	r3, #1
 8006d62:	e09f      	b.n	8006ea4 <_printf_i+0x1ec>
 8006d64:	6820      	ldr	r0, [r4, #0]
 8006d66:	682b      	ldr	r3, [r5, #0]
 8006d68:	0607      	lsls	r7, r0, #24
 8006d6a:	f103 0104 	add.w	r1, r3, #4
 8006d6e:	6029      	str	r1, [r5, #0]
 8006d70:	d501      	bpl.n	8006d76 <_printf_i+0xbe>
 8006d72:	681e      	ldr	r6, [r3, #0]
 8006d74:	e003      	b.n	8006d7e <_printf_i+0xc6>
 8006d76:	0646      	lsls	r6, r0, #25
 8006d78:	d5fb      	bpl.n	8006d72 <_printf_i+0xba>
 8006d7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006d7e:	2e00      	cmp	r6, #0
 8006d80:	da03      	bge.n	8006d8a <_printf_i+0xd2>
 8006d82:	232d      	movs	r3, #45	; 0x2d
 8006d84:	4276      	negs	r6, r6
 8006d86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d8a:	485a      	ldr	r0, [pc, #360]	; (8006ef4 <_printf_i+0x23c>)
 8006d8c:	230a      	movs	r3, #10
 8006d8e:	e012      	b.n	8006db6 <_printf_i+0xfe>
 8006d90:	682b      	ldr	r3, [r5, #0]
 8006d92:	6820      	ldr	r0, [r4, #0]
 8006d94:	1d19      	adds	r1, r3, #4
 8006d96:	6029      	str	r1, [r5, #0]
 8006d98:	0605      	lsls	r5, r0, #24
 8006d9a:	d501      	bpl.n	8006da0 <_printf_i+0xe8>
 8006d9c:	681e      	ldr	r6, [r3, #0]
 8006d9e:	e002      	b.n	8006da6 <_printf_i+0xee>
 8006da0:	0641      	lsls	r1, r0, #25
 8006da2:	d5fb      	bpl.n	8006d9c <_printf_i+0xe4>
 8006da4:	881e      	ldrh	r6, [r3, #0]
 8006da6:	4853      	ldr	r0, [pc, #332]	; (8006ef4 <_printf_i+0x23c>)
 8006da8:	2f6f      	cmp	r7, #111	; 0x6f
 8006daa:	bf0c      	ite	eq
 8006dac:	2308      	moveq	r3, #8
 8006dae:	230a      	movne	r3, #10
 8006db0:	2100      	movs	r1, #0
 8006db2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006db6:	6865      	ldr	r5, [r4, #4]
 8006db8:	60a5      	str	r5, [r4, #8]
 8006dba:	2d00      	cmp	r5, #0
 8006dbc:	bfa2      	ittt	ge
 8006dbe:	6821      	ldrge	r1, [r4, #0]
 8006dc0:	f021 0104 	bicge.w	r1, r1, #4
 8006dc4:	6021      	strge	r1, [r4, #0]
 8006dc6:	b90e      	cbnz	r6, 8006dcc <_printf_i+0x114>
 8006dc8:	2d00      	cmp	r5, #0
 8006dca:	d04b      	beq.n	8006e64 <_printf_i+0x1ac>
 8006dcc:	4615      	mov	r5, r2
 8006dce:	fbb6 f1f3 	udiv	r1, r6, r3
 8006dd2:	fb03 6711 	mls	r7, r3, r1, r6
 8006dd6:	5dc7      	ldrb	r7, [r0, r7]
 8006dd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ddc:	4637      	mov	r7, r6
 8006dde:	42bb      	cmp	r3, r7
 8006de0:	460e      	mov	r6, r1
 8006de2:	d9f4      	bls.n	8006dce <_printf_i+0x116>
 8006de4:	2b08      	cmp	r3, #8
 8006de6:	d10b      	bne.n	8006e00 <_printf_i+0x148>
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	07de      	lsls	r6, r3, #31
 8006dec:	d508      	bpl.n	8006e00 <_printf_i+0x148>
 8006dee:	6923      	ldr	r3, [r4, #16]
 8006df0:	6861      	ldr	r1, [r4, #4]
 8006df2:	4299      	cmp	r1, r3
 8006df4:	bfde      	ittt	le
 8006df6:	2330      	movle	r3, #48	; 0x30
 8006df8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006dfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e00:	1b52      	subs	r2, r2, r5
 8006e02:	6122      	str	r2, [r4, #16]
 8006e04:	f8cd a000 	str.w	sl, [sp]
 8006e08:	464b      	mov	r3, r9
 8006e0a:	aa03      	add	r2, sp, #12
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	4640      	mov	r0, r8
 8006e10:	f7ff fee4 	bl	8006bdc <_printf_common>
 8006e14:	3001      	adds	r0, #1
 8006e16:	d14a      	bne.n	8006eae <_printf_i+0x1f6>
 8006e18:	f04f 30ff 	mov.w	r0, #4294967295
 8006e1c:	b004      	add	sp, #16
 8006e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e22:	6823      	ldr	r3, [r4, #0]
 8006e24:	f043 0320 	orr.w	r3, r3, #32
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	4833      	ldr	r0, [pc, #204]	; (8006ef8 <_printf_i+0x240>)
 8006e2c:	2778      	movs	r7, #120	; 0x78
 8006e2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e32:	6823      	ldr	r3, [r4, #0]
 8006e34:	6829      	ldr	r1, [r5, #0]
 8006e36:	061f      	lsls	r7, r3, #24
 8006e38:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e3c:	d402      	bmi.n	8006e44 <_printf_i+0x18c>
 8006e3e:	065f      	lsls	r7, r3, #25
 8006e40:	bf48      	it	mi
 8006e42:	b2b6      	uxthmi	r6, r6
 8006e44:	07df      	lsls	r7, r3, #31
 8006e46:	bf48      	it	mi
 8006e48:	f043 0320 	orrmi.w	r3, r3, #32
 8006e4c:	6029      	str	r1, [r5, #0]
 8006e4e:	bf48      	it	mi
 8006e50:	6023      	strmi	r3, [r4, #0]
 8006e52:	b91e      	cbnz	r6, 8006e5c <_printf_i+0x1a4>
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	f023 0320 	bic.w	r3, r3, #32
 8006e5a:	6023      	str	r3, [r4, #0]
 8006e5c:	2310      	movs	r3, #16
 8006e5e:	e7a7      	b.n	8006db0 <_printf_i+0xf8>
 8006e60:	4824      	ldr	r0, [pc, #144]	; (8006ef4 <_printf_i+0x23c>)
 8006e62:	e7e4      	b.n	8006e2e <_printf_i+0x176>
 8006e64:	4615      	mov	r5, r2
 8006e66:	e7bd      	b.n	8006de4 <_printf_i+0x12c>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	6826      	ldr	r6, [r4, #0]
 8006e6c:	6961      	ldr	r1, [r4, #20]
 8006e6e:	1d18      	adds	r0, r3, #4
 8006e70:	6028      	str	r0, [r5, #0]
 8006e72:	0635      	lsls	r5, r6, #24
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	d501      	bpl.n	8006e7c <_printf_i+0x1c4>
 8006e78:	6019      	str	r1, [r3, #0]
 8006e7a:	e002      	b.n	8006e82 <_printf_i+0x1ca>
 8006e7c:	0670      	lsls	r0, r6, #25
 8006e7e:	d5fb      	bpl.n	8006e78 <_printf_i+0x1c0>
 8006e80:	8019      	strh	r1, [r3, #0]
 8006e82:	2300      	movs	r3, #0
 8006e84:	6123      	str	r3, [r4, #16]
 8006e86:	4615      	mov	r5, r2
 8006e88:	e7bc      	b.n	8006e04 <_printf_i+0x14c>
 8006e8a:	682b      	ldr	r3, [r5, #0]
 8006e8c:	1d1a      	adds	r2, r3, #4
 8006e8e:	602a      	str	r2, [r5, #0]
 8006e90:	681d      	ldr	r5, [r3, #0]
 8006e92:	6862      	ldr	r2, [r4, #4]
 8006e94:	2100      	movs	r1, #0
 8006e96:	4628      	mov	r0, r5
 8006e98:	f7f9 f99a 	bl	80001d0 <memchr>
 8006e9c:	b108      	cbz	r0, 8006ea2 <_printf_i+0x1ea>
 8006e9e:	1b40      	subs	r0, r0, r5
 8006ea0:	6060      	str	r0, [r4, #4]
 8006ea2:	6863      	ldr	r3, [r4, #4]
 8006ea4:	6123      	str	r3, [r4, #16]
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006eac:	e7aa      	b.n	8006e04 <_printf_i+0x14c>
 8006eae:	6923      	ldr	r3, [r4, #16]
 8006eb0:	462a      	mov	r2, r5
 8006eb2:	4649      	mov	r1, r9
 8006eb4:	4640      	mov	r0, r8
 8006eb6:	47d0      	blx	sl
 8006eb8:	3001      	adds	r0, #1
 8006eba:	d0ad      	beq.n	8006e18 <_printf_i+0x160>
 8006ebc:	6823      	ldr	r3, [r4, #0]
 8006ebe:	079b      	lsls	r3, r3, #30
 8006ec0:	d413      	bmi.n	8006eea <_printf_i+0x232>
 8006ec2:	68e0      	ldr	r0, [r4, #12]
 8006ec4:	9b03      	ldr	r3, [sp, #12]
 8006ec6:	4298      	cmp	r0, r3
 8006ec8:	bfb8      	it	lt
 8006eca:	4618      	movlt	r0, r3
 8006ecc:	e7a6      	b.n	8006e1c <_printf_i+0x164>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	4632      	mov	r2, r6
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	4640      	mov	r0, r8
 8006ed6:	47d0      	blx	sl
 8006ed8:	3001      	adds	r0, #1
 8006eda:	d09d      	beq.n	8006e18 <_printf_i+0x160>
 8006edc:	3501      	adds	r5, #1
 8006ede:	68e3      	ldr	r3, [r4, #12]
 8006ee0:	9903      	ldr	r1, [sp, #12]
 8006ee2:	1a5b      	subs	r3, r3, r1
 8006ee4:	42ab      	cmp	r3, r5
 8006ee6:	dcf2      	bgt.n	8006ece <_printf_i+0x216>
 8006ee8:	e7eb      	b.n	8006ec2 <_printf_i+0x20a>
 8006eea:	2500      	movs	r5, #0
 8006eec:	f104 0619 	add.w	r6, r4, #25
 8006ef0:	e7f5      	b.n	8006ede <_printf_i+0x226>
 8006ef2:	bf00      	nop
 8006ef4:	08007409 	.word	0x08007409
 8006ef8:	0800741a 	.word	0x0800741a

08006efc <__sflush_r>:
 8006efc:	898a      	ldrh	r2, [r1, #12]
 8006efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f02:	4605      	mov	r5, r0
 8006f04:	0710      	lsls	r0, r2, #28
 8006f06:	460c      	mov	r4, r1
 8006f08:	d458      	bmi.n	8006fbc <__sflush_r+0xc0>
 8006f0a:	684b      	ldr	r3, [r1, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	dc05      	bgt.n	8006f1c <__sflush_r+0x20>
 8006f10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	dc02      	bgt.n	8006f1c <__sflush_r+0x20>
 8006f16:	2000      	movs	r0, #0
 8006f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f1e:	2e00      	cmp	r6, #0
 8006f20:	d0f9      	beq.n	8006f16 <__sflush_r+0x1a>
 8006f22:	2300      	movs	r3, #0
 8006f24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f28:	682f      	ldr	r7, [r5, #0]
 8006f2a:	6a21      	ldr	r1, [r4, #32]
 8006f2c:	602b      	str	r3, [r5, #0]
 8006f2e:	d032      	beq.n	8006f96 <__sflush_r+0x9a>
 8006f30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f32:	89a3      	ldrh	r3, [r4, #12]
 8006f34:	075a      	lsls	r2, r3, #29
 8006f36:	d505      	bpl.n	8006f44 <__sflush_r+0x48>
 8006f38:	6863      	ldr	r3, [r4, #4]
 8006f3a:	1ac0      	subs	r0, r0, r3
 8006f3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f3e:	b10b      	cbz	r3, 8006f44 <__sflush_r+0x48>
 8006f40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f42:	1ac0      	subs	r0, r0, r3
 8006f44:	2300      	movs	r3, #0
 8006f46:	4602      	mov	r2, r0
 8006f48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f4a:	6a21      	ldr	r1, [r4, #32]
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	47b0      	blx	r6
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	d106      	bne.n	8006f64 <__sflush_r+0x68>
 8006f56:	6829      	ldr	r1, [r5, #0]
 8006f58:	291d      	cmp	r1, #29
 8006f5a:	d82b      	bhi.n	8006fb4 <__sflush_r+0xb8>
 8006f5c:	4a29      	ldr	r2, [pc, #164]	; (8007004 <__sflush_r+0x108>)
 8006f5e:	410a      	asrs	r2, r1
 8006f60:	07d6      	lsls	r6, r2, #31
 8006f62:	d427      	bmi.n	8006fb4 <__sflush_r+0xb8>
 8006f64:	2200      	movs	r2, #0
 8006f66:	6062      	str	r2, [r4, #4]
 8006f68:	04d9      	lsls	r1, r3, #19
 8006f6a:	6922      	ldr	r2, [r4, #16]
 8006f6c:	6022      	str	r2, [r4, #0]
 8006f6e:	d504      	bpl.n	8006f7a <__sflush_r+0x7e>
 8006f70:	1c42      	adds	r2, r0, #1
 8006f72:	d101      	bne.n	8006f78 <__sflush_r+0x7c>
 8006f74:	682b      	ldr	r3, [r5, #0]
 8006f76:	b903      	cbnz	r3, 8006f7a <__sflush_r+0x7e>
 8006f78:	6560      	str	r0, [r4, #84]	; 0x54
 8006f7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f7c:	602f      	str	r7, [r5, #0]
 8006f7e:	2900      	cmp	r1, #0
 8006f80:	d0c9      	beq.n	8006f16 <__sflush_r+0x1a>
 8006f82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f86:	4299      	cmp	r1, r3
 8006f88:	d002      	beq.n	8006f90 <__sflush_r+0x94>
 8006f8a:	4628      	mov	r0, r5
 8006f8c:	f7ff fbea 	bl	8006764 <_free_r>
 8006f90:	2000      	movs	r0, #0
 8006f92:	6360      	str	r0, [r4, #52]	; 0x34
 8006f94:	e7c0      	b.n	8006f18 <__sflush_r+0x1c>
 8006f96:	2301      	movs	r3, #1
 8006f98:	4628      	mov	r0, r5
 8006f9a:	47b0      	blx	r6
 8006f9c:	1c41      	adds	r1, r0, #1
 8006f9e:	d1c8      	bne.n	8006f32 <__sflush_r+0x36>
 8006fa0:	682b      	ldr	r3, [r5, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d0c5      	beq.n	8006f32 <__sflush_r+0x36>
 8006fa6:	2b1d      	cmp	r3, #29
 8006fa8:	d001      	beq.n	8006fae <__sflush_r+0xb2>
 8006faa:	2b16      	cmp	r3, #22
 8006fac:	d101      	bne.n	8006fb2 <__sflush_r+0xb6>
 8006fae:	602f      	str	r7, [r5, #0]
 8006fb0:	e7b1      	b.n	8006f16 <__sflush_r+0x1a>
 8006fb2:	89a3      	ldrh	r3, [r4, #12]
 8006fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fb8:	81a3      	strh	r3, [r4, #12]
 8006fba:	e7ad      	b.n	8006f18 <__sflush_r+0x1c>
 8006fbc:	690f      	ldr	r7, [r1, #16]
 8006fbe:	2f00      	cmp	r7, #0
 8006fc0:	d0a9      	beq.n	8006f16 <__sflush_r+0x1a>
 8006fc2:	0793      	lsls	r3, r2, #30
 8006fc4:	680e      	ldr	r6, [r1, #0]
 8006fc6:	bf08      	it	eq
 8006fc8:	694b      	ldreq	r3, [r1, #20]
 8006fca:	600f      	str	r7, [r1, #0]
 8006fcc:	bf18      	it	ne
 8006fce:	2300      	movne	r3, #0
 8006fd0:	eba6 0807 	sub.w	r8, r6, r7
 8006fd4:	608b      	str	r3, [r1, #8]
 8006fd6:	f1b8 0f00 	cmp.w	r8, #0
 8006fda:	dd9c      	ble.n	8006f16 <__sflush_r+0x1a>
 8006fdc:	6a21      	ldr	r1, [r4, #32]
 8006fde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006fe0:	4643      	mov	r3, r8
 8006fe2:	463a      	mov	r2, r7
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	47b0      	blx	r6
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	dc06      	bgt.n	8006ffa <__sflush_r+0xfe>
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ff2:	81a3      	strh	r3, [r4, #12]
 8006ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff8:	e78e      	b.n	8006f18 <__sflush_r+0x1c>
 8006ffa:	4407      	add	r7, r0
 8006ffc:	eba8 0800 	sub.w	r8, r8, r0
 8007000:	e7e9      	b.n	8006fd6 <__sflush_r+0xda>
 8007002:	bf00      	nop
 8007004:	dfbffffe 	.word	0xdfbffffe

08007008 <_fflush_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	690b      	ldr	r3, [r1, #16]
 800700c:	4605      	mov	r5, r0
 800700e:	460c      	mov	r4, r1
 8007010:	b913      	cbnz	r3, 8007018 <_fflush_r+0x10>
 8007012:	2500      	movs	r5, #0
 8007014:	4628      	mov	r0, r5
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	b118      	cbz	r0, 8007022 <_fflush_r+0x1a>
 800701a:	6a03      	ldr	r3, [r0, #32]
 800701c:	b90b      	cbnz	r3, 8007022 <_fflush_r+0x1a>
 800701e:	f7ff fa37 	bl	8006490 <__sinit>
 8007022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d0f3      	beq.n	8007012 <_fflush_r+0xa>
 800702a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800702c:	07d0      	lsls	r0, r2, #31
 800702e:	d404      	bmi.n	800703a <_fflush_r+0x32>
 8007030:	0599      	lsls	r1, r3, #22
 8007032:	d402      	bmi.n	800703a <_fflush_r+0x32>
 8007034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007036:	f7ff fb85 	bl	8006744 <__retarget_lock_acquire_recursive>
 800703a:	4628      	mov	r0, r5
 800703c:	4621      	mov	r1, r4
 800703e:	f7ff ff5d 	bl	8006efc <__sflush_r>
 8007042:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007044:	07da      	lsls	r2, r3, #31
 8007046:	4605      	mov	r5, r0
 8007048:	d4e4      	bmi.n	8007014 <_fflush_r+0xc>
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	059b      	lsls	r3, r3, #22
 800704e:	d4e1      	bmi.n	8007014 <_fflush_r+0xc>
 8007050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007052:	f7ff fb78 	bl	8006746 <__retarget_lock_release_recursive>
 8007056:	e7dd      	b.n	8007014 <_fflush_r+0xc>

08007058 <__swbuf_r>:
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	460e      	mov	r6, r1
 800705c:	4614      	mov	r4, r2
 800705e:	4605      	mov	r5, r0
 8007060:	b118      	cbz	r0, 800706a <__swbuf_r+0x12>
 8007062:	6a03      	ldr	r3, [r0, #32]
 8007064:	b90b      	cbnz	r3, 800706a <__swbuf_r+0x12>
 8007066:	f7ff fa13 	bl	8006490 <__sinit>
 800706a:	69a3      	ldr	r3, [r4, #24]
 800706c:	60a3      	str	r3, [r4, #8]
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	071a      	lsls	r2, r3, #28
 8007072:	d525      	bpl.n	80070c0 <__swbuf_r+0x68>
 8007074:	6923      	ldr	r3, [r4, #16]
 8007076:	b31b      	cbz	r3, 80070c0 <__swbuf_r+0x68>
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	6922      	ldr	r2, [r4, #16]
 800707c:	1a98      	subs	r0, r3, r2
 800707e:	6963      	ldr	r3, [r4, #20]
 8007080:	b2f6      	uxtb	r6, r6
 8007082:	4283      	cmp	r3, r0
 8007084:	4637      	mov	r7, r6
 8007086:	dc04      	bgt.n	8007092 <__swbuf_r+0x3a>
 8007088:	4621      	mov	r1, r4
 800708a:	4628      	mov	r0, r5
 800708c:	f7ff ffbc 	bl	8007008 <_fflush_r>
 8007090:	b9e0      	cbnz	r0, 80070cc <__swbuf_r+0x74>
 8007092:	68a3      	ldr	r3, [r4, #8]
 8007094:	3b01      	subs	r3, #1
 8007096:	60a3      	str	r3, [r4, #8]
 8007098:	6823      	ldr	r3, [r4, #0]
 800709a:	1c5a      	adds	r2, r3, #1
 800709c:	6022      	str	r2, [r4, #0]
 800709e:	701e      	strb	r6, [r3, #0]
 80070a0:	6962      	ldr	r2, [r4, #20]
 80070a2:	1c43      	adds	r3, r0, #1
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d004      	beq.n	80070b2 <__swbuf_r+0x5a>
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	07db      	lsls	r3, r3, #31
 80070ac:	d506      	bpl.n	80070bc <__swbuf_r+0x64>
 80070ae:	2e0a      	cmp	r6, #10
 80070b0:	d104      	bne.n	80070bc <__swbuf_r+0x64>
 80070b2:	4621      	mov	r1, r4
 80070b4:	4628      	mov	r0, r5
 80070b6:	f7ff ffa7 	bl	8007008 <_fflush_r>
 80070ba:	b938      	cbnz	r0, 80070cc <__swbuf_r+0x74>
 80070bc:	4638      	mov	r0, r7
 80070be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070c0:	4621      	mov	r1, r4
 80070c2:	4628      	mov	r0, r5
 80070c4:	f000 f806 	bl	80070d4 <__swsetup_r>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d0d5      	beq.n	8007078 <__swbuf_r+0x20>
 80070cc:	f04f 37ff 	mov.w	r7, #4294967295
 80070d0:	e7f4      	b.n	80070bc <__swbuf_r+0x64>
	...

080070d4 <__swsetup_r>:
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	4b2a      	ldr	r3, [pc, #168]	; (8007180 <__swsetup_r+0xac>)
 80070d8:	4605      	mov	r5, r0
 80070da:	6818      	ldr	r0, [r3, #0]
 80070dc:	460c      	mov	r4, r1
 80070de:	b118      	cbz	r0, 80070e8 <__swsetup_r+0x14>
 80070e0:	6a03      	ldr	r3, [r0, #32]
 80070e2:	b90b      	cbnz	r3, 80070e8 <__swsetup_r+0x14>
 80070e4:	f7ff f9d4 	bl	8006490 <__sinit>
 80070e8:	89a3      	ldrh	r3, [r4, #12]
 80070ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070ee:	0718      	lsls	r0, r3, #28
 80070f0:	d422      	bmi.n	8007138 <__swsetup_r+0x64>
 80070f2:	06d9      	lsls	r1, r3, #27
 80070f4:	d407      	bmi.n	8007106 <__swsetup_r+0x32>
 80070f6:	2309      	movs	r3, #9
 80070f8:	602b      	str	r3, [r5, #0]
 80070fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070fe:	81a3      	strh	r3, [r4, #12]
 8007100:	f04f 30ff 	mov.w	r0, #4294967295
 8007104:	e034      	b.n	8007170 <__swsetup_r+0x9c>
 8007106:	0758      	lsls	r0, r3, #29
 8007108:	d512      	bpl.n	8007130 <__swsetup_r+0x5c>
 800710a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800710c:	b141      	cbz	r1, 8007120 <__swsetup_r+0x4c>
 800710e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007112:	4299      	cmp	r1, r3
 8007114:	d002      	beq.n	800711c <__swsetup_r+0x48>
 8007116:	4628      	mov	r0, r5
 8007118:	f7ff fb24 	bl	8006764 <_free_r>
 800711c:	2300      	movs	r3, #0
 800711e:	6363      	str	r3, [r4, #52]	; 0x34
 8007120:	89a3      	ldrh	r3, [r4, #12]
 8007122:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007126:	81a3      	strh	r3, [r4, #12]
 8007128:	2300      	movs	r3, #0
 800712a:	6063      	str	r3, [r4, #4]
 800712c:	6923      	ldr	r3, [r4, #16]
 800712e:	6023      	str	r3, [r4, #0]
 8007130:	89a3      	ldrh	r3, [r4, #12]
 8007132:	f043 0308 	orr.w	r3, r3, #8
 8007136:	81a3      	strh	r3, [r4, #12]
 8007138:	6923      	ldr	r3, [r4, #16]
 800713a:	b94b      	cbnz	r3, 8007150 <__swsetup_r+0x7c>
 800713c:	89a3      	ldrh	r3, [r4, #12]
 800713e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007146:	d003      	beq.n	8007150 <__swsetup_r+0x7c>
 8007148:	4621      	mov	r1, r4
 800714a:	4628      	mov	r0, r5
 800714c:	f000 f850 	bl	80071f0 <__smakebuf_r>
 8007150:	89a0      	ldrh	r0, [r4, #12]
 8007152:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007156:	f010 0301 	ands.w	r3, r0, #1
 800715a:	d00a      	beq.n	8007172 <__swsetup_r+0x9e>
 800715c:	2300      	movs	r3, #0
 800715e:	60a3      	str	r3, [r4, #8]
 8007160:	6963      	ldr	r3, [r4, #20]
 8007162:	425b      	negs	r3, r3
 8007164:	61a3      	str	r3, [r4, #24]
 8007166:	6923      	ldr	r3, [r4, #16]
 8007168:	b943      	cbnz	r3, 800717c <__swsetup_r+0xa8>
 800716a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800716e:	d1c4      	bne.n	80070fa <__swsetup_r+0x26>
 8007170:	bd38      	pop	{r3, r4, r5, pc}
 8007172:	0781      	lsls	r1, r0, #30
 8007174:	bf58      	it	pl
 8007176:	6963      	ldrpl	r3, [r4, #20]
 8007178:	60a3      	str	r3, [r4, #8]
 800717a:	e7f4      	b.n	8007166 <__swsetup_r+0x92>
 800717c:	2000      	movs	r0, #0
 800717e:	e7f7      	b.n	8007170 <__swsetup_r+0x9c>
 8007180:	2000006c 	.word	0x2000006c

08007184 <_sbrk_r>:
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	4d06      	ldr	r5, [pc, #24]	; (80071a0 <_sbrk_r+0x1c>)
 8007188:	2300      	movs	r3, #0
 800718a:	4604      	mov	r4, r0
 800718c:	4608      	mov	r0, r1
 800718e:	602b      	str	r3, [r5, #0]
 8007190:	f7f9 fcf0 	bl	8000b74 <_sbrk>
 8007194:	1c43      	adds	r3, r0, #1
 8007196:	d102      	bne.n	800719e <_sbrk_r+0x1a>
 8007198:	682b      	ldr	r3, [r5, #0]
 800719a:	b103      	cbz	r3, 800719e <_sbrk_r+0x1a>
 800719c:	6023      	str	r3, [r4, #0]
 800719e:	bd38      	pop	{r3, r4, r5, pc}
 80071a0:	200085e4 	.word	0x200085e4

080071a4 <__swhatbuf_r>:
 80071a4:	b570      	push	{r4, r5, r6, lr}
 80071a6:	460c      	mov	r4, r1
 80071a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ac:	2900      	cmp	r1, #0
 80071ae:	b096      	sub	sp, #88	; 0x58
 80071b0:	4615      	mov	r5, r2
 80071b2:	461e      	mov	r6, r3
 80071b4:	da0d      	bge.n	80071d2 <__swhatbuf_r+0x2e>
 80071b6:	89a3      	ldrh	r3, [r4, #12]
 80071b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80071bc:	f04f 0100 	mov.w	r1, #0
 80071c0:	bf0c      	ite	eq
 80071c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80071c6:	2340      	movne	r3, #64	; 0x40
 80071c8:	2000      	movs	r0, #0
 80071ca:	6031      	str	r1, [r6, #0]
 80071cc:	602b      	str	r3, [r5, #0]
 80071ce:	b016      	add	sp, #88	; 0x58
 80071d0:	bd70      	pop	{r4, r5, r6, pc}
 80071d2:	466a      	mov	r2, sp
 80071d4:	f000 f848 	bl	8007268 <_fstat_r>
 80071d8:	2800      	cmp	r0, #0
 80071da:	dbec      	blt.n	80071b6 <__swhatbuf_r+0x12>
 80071dc:	9901      	ldr	r1, [sp, #4]
 80071de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80071e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80071e6:	4259      	negs	r1, r3
 80071e8:	4159      	adcs	r1, r3
 80071ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071ee:	e7eb      	b.n	80071c8 <__swhatbuf_r+0x24>

080071f0 <__smakebuf_r>:
 80071f0:	898b      	ldrh	r3, [r1, #12]
 80071f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071f4:	079d      	lsls	r5, r3, #30
 80071f6:	4606      	mov	r6, r0
 80071f8:	460c      	mov	r4, r1
 80071fa:	d507      	bpl.n	800720c <__smakebuf_r+0x1c>
 80071fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	6123      	str	r3, [r4, #16]
 8007204:	2301      	movs	r3, #1
 8007206:	6163      	str	r3, [r4, #20]
 8007208:	b002      	add	sp, #8
 800720a:	bd70      	pop	{r4, r5, r6, pc}
 800720c:	ab01      	add	r3, sp, #4
 800720e:	466a      	mov	r2, sp
 8007210:	f7ff ffc8 	bl	80071a4 <__swhatbuf_r>
 8007214:	9900      	ldr	r1, [sp, #0]
 8007216:	4605      	mov	r5, r0
 8007218:	4630      	mov	r0, r6
 800721a:	f7ff fb0f 	bl	800683c <_malloc_r>
 800721e:	b948      	cbnz	r0, 8007234 <__smakebuf_r+0x44>
 8007220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007224:	059a      	lsls	r2, r3, #22
 8007226:	d4ef      	bmi.n	8007208 <__smakebuf_r+0x18>
 8007228:	f023 0303 	bic.w	r3, r3, #3
 800722c:	f043 0302 	orr.w	r3, r3, #2
 8007230:	81a3      	strh	r3, [r4, #12]
 8007232:	e7e3      	b.n	80071fc <__smakebuf_r+0xc>
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	6020      	str	r0, [r4, #0]
 8007238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800723c:	81a3      	strh	r3, [r4, #12]
 800723e:	9b00      	ldr	r3, [sp, #0]
 8007240:	6163      	str	r3, [r4, #20]
 8007242:	9b01      	ldr	r3, [sp, #4]
 8007244:	6120      	str	r0, [r4, #16]
 8007246:	b15b      	cbz	r3, 8007260 <__smakebuf_r+0x70>
 8007248:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800724c:	4630      	mov	r0, r6
 800724e:	f000 f81d 	bl	800728c <_isatty_r>
 8007252:	b128      	cbz	r0, 8007260 <__smakebuf_r+0x70>
 8007254:	89a3      	ldrh	r3, [r4, #12]
 8007256:	f023 0303 	bic.w	r3, r3, #3
 800725a:	f043 0301 	orr.w	r3, r3, #1
 800725e:	81a3      	strh	r3, [r4, #12]
 8007260:	89a3      	ldrh	r3, [r4, #12]
 8007262:	431d      	orrs	r5, r3
 8007264:	81a5      	strh	r5, [r4, #12]
 8007266:	e7cf      	b.n	8007208 <__smakebuf_r+0x18>

08007268 <_fstat_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	4d07      	ldr	r5, [pc, #28]	; (8007288 <_fstat_r+0x20>)
 800726c:	2300      	movs	r3, #0
 800726e:	4604      	mov	r4, r0
 8007270:	4608      	mov	r0, r1
 8007272:	4611      	mov	r1, r2
 8007274:	602b      	str	r3, [r5, #0]
 8007276:	f7f9 fc55 	bl	8000b24 <_fstat>
 800727a:	1c43      	adds	r3, r0, #1
 800727c:	d102      	bne.n	8007284 <_fstat_r+0x1c>
 800727e:	682b      	ldr	r3, [r5, #0]
 8007280:	b103      	cbz	r3, 8007284 <_fstat_r+0x1c>
 8007282:	6023      	str	r3, [r4, #0]
 8007284:	bd38      	pop	{r3, r4, r5, pc}
 8007286:	bf00      	nop
 8007288:	200085e4 	.word	0x200085e4

0800728c <_isatty_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4d06      	ldr	r5, [pc, #24]	; (80072a8 <_isatty_r+0x1c>)
 8007290:	2300      	movs	r3, #0
 8007292:	4604      	mov	r4, r0
 8007294:	4608      	mov	r0, r1
 8007296:	602b      	str	r3, [r5, #0]
 8007298:	f7f9 fc54 	bl	8000b44 <_isatty>
 800729c:	1c43      	adds	r3, r0, #1
 800729e:	d102      	bne.n	80072a6 <_isatty_r+0x1a>
 80072a0:	682b      	ldr	r3, [r5, #0]
 80072a2:	b103      	cbz	r3, 80072a6 <_isatty_r+0x1a>
 80072a4:	6023      	str	r3, [r4, #0]
 80072a6:	bd38      	pop	{r3, r4, r5, pc}
 80072a8:	200085e4 	.word	0x200085e4

080072ac <_init>:
 80072ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ae:	bf00      	nop
 80072b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072b2:	bc08      	pop	{r3}
 80072b4:	469e      	mov	lr, r3
 80072b6:	4770      	bx	lr

080072b8 <_fini>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	bf00      	nop
 80072bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072be:	bc08      	pop	{r3}
 80072c0:	469e      	mov	lr, r3
 80072c2:	4770      	bx	lr
