/**
 * @file    wifi_task.c
 * @author  Bissmann_S
 * @version 1.0.0
 * @date    2024-06-23
 *
 * @brief This file contains functions for the wifi-task implementation. Station-Mode.
 *ERROR Functions were included
 */

#include "../../99_tasks/wifi_task/wifi_task.h"
#include "../../99_tasks/diagnose/diagnose.h"

extern uint8_t rxBuffer_uart_1[MAX_BUFFER_SIZE];
extern volatile bool is_uart_success;
extern uint8_t uart_buffer[MAX_BUFFER_SIZE];
extern osTimerId_t led_timerHandle;

volatile bool wifi_init_sucessful = false;




osThreadId_t wifiTaskHandle;
const osThreadAttr_t wifiTask_attributes = {
		.name = WIFI_TASK_NAME,
		.stack_size = WIFI_TASK_SIZE,
		.priority = (osPriority_t) WIFI_TASK_PRIORITY,
};


uint8_t at_cmd[] = "AT\r\n";
uint8_t rst_cmd[] = "AT+RST\r\n";
uint8_t set_cwmode_cmd[]  = "AT+CWMODE=3\r\n";
uint8_t set_cwsap_cmd[]  = "AT+CWSAP=\"ESP_SSID\",\"1234567890\",5,3\r\n";
uint8_t get_cwsap_cmd[] = "AT+CWSAP?\r\n";
uint8_t connect_to_ap[] = "AT+CWJAP=\"ESP_SSID\",\"1234567890\"\r\n";
uint8_t connect_to_TCP[] = "AT+CIPSTART=\"TCP\",\"192.168.9.1\",5000\r\n";
uint8_t get_ip_cmd[] = "AT+CIFSR\r\n";
uint8_t set_mux_cmd[] = "AT+CIPMUX=0\r\n";
uint8_t set_cipmode_cmd[]  = "AT+CIPMODE=1\r\n";
uint8_t send_transparent_cmd[]  = "AT+CIPSEND\r\n";

/**
 * @brief Transmits a command to the Wifi Click using UART1
 *
 * This function transmits a given command by invoking HAL_UART_Transmit with HAL_MAX_DELAY (blocking)
 * It has a simple error check which in case of an error prints a failure message. It does not really handle the error.
 *
 * @param uint8_t *cmd A pointer to the stored command data.
 * @param uint8_t cmd_size The size in bytes of the to be transfered CMD
 *
 * @return HAL_StatusTypeDef This function returns the status code of the HAL_UART_Transmit function.
 */

HAL_StatusTypeDef send_and_check_wifi_command(uint8_t* cmd, uint8_t cmd_size) {
    // Send the command
    HAL_StatusTypeDef result = HAL_UART_Transmit(&huart1, cmd, cmd_size, HAL_MAX_DELAY);
    if (result != HAL_OK) {
        printf("Sending %s failed with %d\r\n", cmd, result);
        wifi_error_mask |= WIFI_ERR_UART_TRANSMIT;
        return result;
    }

    // Wait for the response
    HAL_Delay(200);
    if (is_uart_success == true) {
        if (strstr((char*)uart_buffer, "OK") != NULL) {
            memset(uart_buffer, 0, MAX_BUFFER_SIZE);
            is_uart_success = false;
            printf("SUCCESS!\n");
            return HAL_OK;
        } else {
            printf("ERROR executing %s\r\n", cmd);
            wifi_error_mask |= WIFI_ERR_UART_RECEIVE;
            is_uart_success = false;
            return HAL_ERROR;
        }
    } else {
        printf("Receiving failed for %s\r\n", cmd);
        wifi_error_mask |= WIFI_ERR_UART_RECEIVE;
        is_uart_success = false;
        return HAL_ERROR;
    }
}



/**
 * @brief A function which initializes the wifi-task. It creates the task itself.
 * Clears both UART interfaces (1 and 2) as well as sets the UART1 to receive data.
 *
 * @return void This function does not return a value.
 */
void init_wifi_task(void) {
	printf("wifi_task init\r\n");

	wifiTaskHandle = osThreadNew(wifiTask_f, NULL, &wifiTask_attributes);

	if (wifiTaskHandle == NULL) {
		printf("creating wifi_task_failed\r\n");
	}

	clear_buffer_overflow(&huart1);
	clear_buffer_overflow(&huart2);
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, rxBuffer_uart_1, MAX_BUFFER_SIZE);
}

/**
 * @brief This function initializes the wifi module in transmission Mode!
 * error handling mask was implemented see diagnose.h
 * @param void *pvParameters Can be used to give the tasks some parameters during execution. Not used here.
 *
 * @return void This function does not return a value.
 */
void wifiTask_f(void *pvParameters) {
    wifi_error_mask=0;

    if(send_and_check_wifi_command(rst_cmd, ARRAY_SIZE(rst_cmd))==HAL_ERROR)
    	wifi_error_mask |= WIFI_ERR_RST;
    HAL_Delay(5000);
    if(send_and_check_wifi_command(set_cwmode_cmd, ARRAY_SIZE(set_cwmode_cmd))==HAL_ERROR)
    	wifi_error_mask |= WIFI_ERR_CWMODE;
    HAL_Delay(5000);
    if(send_and_check_wifi_command(connect_to_ap, ARRAY_SIZE(connect_to_ap))==HAL_ERROR)
		wifi_error_mask |= WIFI_ERR_CONN_AP;
    HAL_Delay(5000);
    if(send_and_check_wifi_command(connect_to_TCP, ARRAY_SIZE(connect_to_TCP))==HAL_ERROR)
		wifi_error_mask |= WIFI_ERR_CONN_TCP;
    HAL_Delay(5000);
    if( send_and_check_wifi_command(set_cipmode_cmd, ARRAY_SIZE(set_cipmode_cmd))==HAL_ERROR)
		wifi_error_mask |= WIFI_ERR_CIPMODE;
    HAL_Delay(5000);
    if(send_and_check_wifi_command(send_transparent_cmd, ARRAY_SIZE(send_transparent_cmd))==HAL_ERROR)
		wifi_error_mask |= WIFI_ERR_SEND_TRANSP;


    while(1)
    {

    	if(wifi_error_mask!= WIFI_ERR_NONE)
    	    	printf("WIFI INIT FAILED DUE TO: %08X",wifi_error_mask);
    	    else
    	    	wifi_init_sucessful==true;



HAL_Delay(10000);

    }



}
