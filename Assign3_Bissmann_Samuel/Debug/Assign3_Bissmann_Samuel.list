
Assign3_Bissmann_Samuel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008248  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  080083d8  080083d8  000183d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085d4  080085d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080085d4  080085d4  000185d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085dc  080085dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085dc  080085dc  000185dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085e0  080085e0  000185e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080085e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008588  20000070  08008654  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200085f8  08008654  000285f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d5df  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f2c  00000000  00000000  0003d6c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018d0  00000000  00000000  000415f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001332  00000000  00000000  00042ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024289  00000000  00000000  000441f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c49f  00000000  00000000  0006847b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6349  00000000  00000000  0008491a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006f54  00000000  00000000  0015ac64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00161bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083c0 	.word	0x080083c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080083c0 	.word	0x080083c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <__io_putchar>:
 *          access is not available, and UART is commonly used for logs and debugging output.
 * @param   int ch ... Character to be transmitted.
 * @retval  (int) ... Return character.
 */
int __io_putchar(int ch)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	int ret;
	while ((ret=HAL_UART_GetState(&huart2)) == HAL_UART_STATE_BUSY_TX)
 800058c:	bf00      	nop
 800058e:	4811      	ldr	r0, [pc, #68]	; (80005d4 <__io_putchar+0x50>)
 8000590:	f003 f856 	bl	8003640 <HAL_UART_GetState>
 8000594:	4603      	mov	r3, r0
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2b21      	cmp	r3, #33	; 0x21
 800059c:	d0f7      	beq.n	800058e <__io_putchar+0xa>
		;

	if (ch == '\n')
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	2b0a      	cmp	r3, #10
 80005a2:	d107      	bne.n	80005b4 <__io_putchar+0x30>
	{
		static uint8_t buf[2] = { '\r', '\n' };
		HAL_UART_Transmit(&huart2, buf, sizeof(buf), 1000);
 80005a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a8:	2202      	movs	r2, #2
 80005aa:	490b      	ldr	r1, [pc, #44]	; (80005d8 <__io_putchar+0x54>)
 80005ac:	4809      	ldr	r0, [pc, #36]	; (80005d4 <__io_putchar+0x50>)
 80005ae:	f002 fc67 	bl	8002e80 <HAL_UART_Transmit>
 80005b2:	e00a      	b.n	80005ca <__io_putchar+0x46>
	}
	else
	{
		static char buf;
		buf = ch;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <__io_putchar+0x58>)
 80005ba:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *)&buf, 1, 1000);
 80005bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c0:	2201      	movs	r2, #1
 80005c2:	4906      	ldr	r1, [pc, #24]	; (80005dc <__io_putchar+0x58>)
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <__io_putchar+0x50>)
 80005c6:	f002 fc5b 	bl	8002e80 <HAL_UART_Transmit>
	}
	return ch;
 80005ca:	687b      	ldr	r3, [r7, #4]
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000008c 	.word	0x2000008c
 80005d8:	20000000 	.word	0x20000000
 80005dc:	2000013c 	.word	0x2000013c

080005e0 <_write>:
 * @param   char *ptr ... ptr to data array
 * @param   int len ... length of data to be transmitted (in byte)
 * @retval  (int) ... Return length in byte.
 */
int _write(int file, char *ptr, int len)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
	for(int DataIdx = 0; DataIdx < len; DataIdx++) {
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	e009      	b.n	8000606 <_write+0x26>
		__io_putchar(*ptr++);
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	1c5a      	adds	r2, r3, #1
 80005f6:	60ba      	str	r2, [r7, #8]
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ffc2 	bl	8000584 <__io_putchar>
	for(int DataIdx = 0; DataIdx < len; DataIdx++) {
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	3301      	adds	r3, #1
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	697a      	ldr	r2, [r7, #20]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	429a      	cmp	r2, r3
 800060c:	dbf1      	blt.n	80005f2 <_write+0x12>
	}
	return len;
 800060e:	687b      	ldr	r3, [r7, #4]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3718      	adds	r7, #24
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f000 fc8d 	bl	8000f3a <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f870 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f000 f900 	bl	8000828 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000628:	f000 f8ce 	bl	80007c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, uart_rx_buffer, BUFFER_SIZE);
 800062c:	2203      	movs	r2, #3
 800062e:	4923      	ldr	r1, [pc, #140]	; (80006bc <main+0xa4>)
 8000630:	4823      	ldr	r0, [pc, #140]	; (80006c0 <main+0xa8>)
 8000632:	f002 fcaf 	bl	8002f94 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000636:	f003 ff69 	bl	800450c <osKernelInitialize>
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */

//Message queue from Producers to Monitoring Task
ProducerMessageQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(MSGQUEUE_OBJ_t), NULL);
 800063a:	2200      	movs	r2, #0
 800063c:	2108      	movs	r1, #8
 800063e:	2010      	movs	r0, #16
 8000640:	f004 f85b 	bl	80046fa <osMessageQueueNew>
 8000644:	4603      	mov	r3, r0
 8000646:	4a1f      	ldr	r2, [pc, #124]	; (80006c4 <main+0xac>)
 8000648:	6013      	str	r3, [r2, #0]

//Message queue from Uart to Monitoring Task tbd
CommandMessageQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(CMDQUEUE_OBJ_t), NULL);
 800064a:	2200      	movs	r2, #0
 800064c:	210c      	movs	r1, #12
 800064e:	2010      	movs	r0, #16
 8000650:	f004 f853 	bl	80046fa <osMessageQueueNew>
 8000654:	4603      	mov	r3, r0
 8000656:	4a1c      	ldr	r2, [pc, #112]	; (80006c8 <main+0xb0>)
 8000658:	6013      	str	r3, [r2, #0]



	if(ProducerMessageQueue== NULL)
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <main+0xac>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d103      	bne.n	800066a <main+0x52>
		printf("creation of message queue failed!\n");
 8000662:	481a      	ldr	r0, [pc, #104]	; (80006cc <main+0xb4>)
 8000664:	f006 ffe0 	bl	8007628 <puts>
 8000668:	e005      	b.n	8000676 <main+0x5e>
	else
		printf("message queue created successfully! ID: %d\n", (int)ProducerMessageQueue);
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <main+0xac>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4619      	mov	r1, r3
 8000670:	4817      	ldr	r0, [pc, #92]	; (80006d0 <main+0xb8>)
 8000672:	f006 ff73 	bl	800755c <iprintf>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Monitoring_Task */
  Monitoring_TaskHandle = osThreadNew(Monitoring_Task_Entry, NULL, &Monitoring_Task_attributes);
 8000676:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <main+0xbc>)
 8000678:	2100      	movs	r1, #0
 800067a:	4817      	ldr	r0, [pc, #92]	; (80006d8 <main+0xc0>)
 800067c:	f003 ff90 	bl	80045a0 <osThreadNew>
 8000680:	4603      	mov	r3, r0
 8000682:	4a16      	ldr	r2, [pc, #88]	; (80006dc <main+0xc4>)
 8000684:	6013      	str	r3, [r2, #0]

  /* creation of ProducerTask01 */
  ProducerTask01Handle = osThreadNew(ProducerTask01_Entry, NULL, &ProducerTask01_attributes);
 8000686:	4a16      	ldr	r2, [pc, #88]	; (80006e0 <main+0xc8>)
 8000688:	2100      	movs	r1, #0
 800068a:	4816      	ldr	r0, [pc, #88]	; (80006e4 <main+0xcc>)
 800068c:	f003 ff88 	bl	80045a0 <osThreadNew>
 8000690:	4603      	mov	r3, r0
 8000692:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <main+0xd0>)
 8000694:	6013      	str	r3, [r2, #0]

  /* creation of ProducerTask02 */
  ProducerTask02Handle = osThreadNew(ProducerTask02_Entry, NULL, &ProducerTask02_attributes);
 8000696:	4a15      	ldr	r2, [pc, #84]	; (80006ec <main+0xd4>)
 8000698:	2100      	movs	r1, #0
 800069a:	4815      	ldr	r0, [pc, #84]	; (80006f0 <main+0xd8>)
 800069c:	f003 ff80 	bl	80045a0 <osThreadNew>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <main+0xdc>)
 80006a4:	6013      	str	r3, [r2, #0]

  /* creation of ProducerTask03 */
  ProducerTask03Handle = osThreadNew(ProducerTask03_Entry, NULL, &ProducerTask03_attributes);
 80006a6:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <main+0xe0>)
 80006a8:	2100      	movs	r1, #0
 80006aa:	4814      	ldr	r0, [pc, #80]	; (80006fc <main+0xe4>)
 80006ac:	f003 ff78 	bl	80045a0 <osThreadNew>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a13      	ldr	r2, [pc, #76]	; (8000700 <main+0xe8>)
 80006b4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006b6:	f003 ff4d 	bl	8004554 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80006ba:	e7fe      	b.n	80006ba <main+0xa2>
 80006bc:	2000012c 	.word	0x2000012c
 80006c0:	2000008c 	.word	0x2000008c
 80006c4:	20000124 	.word	0x20000124
 80006c8:	20000128 	.word	0x20000128
 80006cc:	08008418 	.word	0x08008418
 80006d0:	0800843c 	.word	0x0800843c
 80006d4:	080084c8 	.word	0x080084c8
 80006d8:	08000965 	.word	0x08000965
 80006dc:	20000114 	.word	0x20000114
 80006e0:	080084ec 	.word	0x080084ec
 80006e4:	080009dd 	.word	0x080009dd
 80006e8:	20000118 	.word	0x20000118
 80006ec:	08008510 	.word	0x08008510
 80006f0:	08000a41 	.word	0x08000a41
 80006f4:	2000011c 	.word	0x2000011c
 80006f8:	08008534 	.word	0x08008534
 80006fc:	08000aa5 	.word	0x08000aa5
 8000700:	20000120 	.word	0x20000120

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b096      	sub	sp, #88	; 0x58
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	2244      	movs	r2, #68	; 0x44
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f007 f868 	bl	80077e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	463b      	mov	r3, r7
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000726:	f44f 7000 	mov.w	r0, #512	; 0x200
 800072a:	f000 ff41 	bl	80015b0 <HAL_PWREx_ControlVoltageScaling>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000734:	f000 f9fa 	bl	8000b2c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000738:	f000 ff1c 	bl	8001574 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800073c:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <SystemClock_Config+0xc0>)
 800073e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000742:	4a20      	ldr	r2, [pc, #128]	; (80007c4 <SystemClock_Config+0xc0>)
 8000744:	f023 0318 	bic.w	r3, r3, #24
 8000748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800074c:	2314      	movs	r3, #20
 800074e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800075c:	2360      	movs	r3, #96	; 0x60
 800075e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000760:	2302      	movs	r3, #2
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000764:	2301      	movs	r3, #1
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000768:	2301      	movs	r3, #1
 800076a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800076c:	2310      	movs	r3, #16
 800076e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000770:	2307      	movs	r3, #7
 8000772:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000774:	2302      	movs	r3, #2
 8000776:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000778:	2302      	movs	r3, #2
 800077a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4618      	mov	r0, r3
 8000782:	f000 ff6b 	bl	800165c <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800078c:	f000 f9ce 	bl	8000b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000790:	230f      	movs	r3, #15
 8000792:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000794:	2303      	movs	r3, #3
 8000796:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	2101      	movs	r1, #1
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 fb6b 	bl	8001e84 <HAL_RCC_ClockConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007b4:	f000 f9ba 	bl	8000b2c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007b8:	f001 ffb0 	bl	800271c <HAL_RCCEx_EnableMSIPLLMode>
}
 80007bc:	bf00      	nop
 80007be:	3758      	adds	r7, #88	; 0x58
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40021000 	.word	0x40021000

080007c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007ce:	4a15      	ldr	r2, [pc, #84]	; (8000824 <MX_USART2_UART_Init+0x5c>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_USART2_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_USART2_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_USART2_UART_Init+0x58>)
 800080c:	f002 faea 	bl	8002de4 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000816:	f000 f989 	bl	8000b2c <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000008c 	.word	0x2000008c
 8000824:	40004400 	.word	0x40004400

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_GPIO_Init+0x8c>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	4a1c      	ldr	r2, [pc, #112]	; (80008b4 <MX_GPIO_Init+0x8c>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084a:	4b1a      	ldr	r3, [pc, #104]	; (80008b4 <MX_GPIO_Init+0x8c>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_GPIO_Init+0x8c>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	4a16      	ldr	r2, [pc, #88]	; (80008b4 <MX_GPIO_Init+0x8c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_GPIO_Init+0x8c>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_GPIO_Init+0x8c>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	4a10      	ldr	r2, [pc, #64]	; (80008b4 <MX_GPIO_Init+0x8c>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_GPIO_Init+0x8c>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2108      	movs	r1, #8
 800088a:	480b      	ldr	r0, [pc, #44]	; (80008b8 <MX_GPIO_Init+0x90>)
 800088c:	f000 fe5a 	bl	8001544 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000890:	2308      	movs	r3, #8
 8000892:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	4619      	mov	r1, r3
 80008a6:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_GPIO_Init+0x90>)
 80008a8:	f000 fce2 	bl	8001270 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ac:	bf00      	nop
 80008ae:	3720      	adds	r7, #32
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48000400 	.word	0x48000400

080008bc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	 *
	 *
	 **/


	for(int i=0; i<3;i++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	e01b      	b.n	8000902 <HAL_UART_RxCpltCallback+0x46>
	{
		if(uart_rx_buffer[i] > 48 && uart_rx_buffer[i] < 58)
 80008ca:	4a21      	ldr	r2, [pc, #132]	; (8000950 <HAL_UART_RxCpltCallback+0x94>)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	4413      	add	r3, r2
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b30      	cmp	r3, #48	; 0x30
 80008d4:	d90f      	bls.n	80008f6 <HAL_UART_RxCpltCallback+0x3a>
 80008d6:	4a1e      	ldr	r2, [pc, #120]	; (8000950 <HAL_UART_RxCpltCallback+0x94>)
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4413      	add	r3, r2
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b39      	cmp	r3, #57	; 0x39
 80008e0:	d809      	bhi.n	80008f6 <HAL_UART_RxCpltCallback+0x3a>
			printf("Task %d Interval = %c00ms\n",i, uart_rx_buffer[i]);
 80008e2:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <HAL_UART_RxCpltCallback+0x94>)
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	4413      	add	r3, r2
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	461a      	mov	r2, r3
 80008ec:	68f9      	ldr	r1, [r7, #12]
 80008ee:	4819      	ldr	r0, [pc, #100]	; (8000954 <HAL_UART_RxCpltCallback+0x98>)
 80008f0:	f006 fe34 	bl	800755c <iprintf>
 80008f4:	e002      	b.n	80008fc <HAL_UART_RxCpltCallback+0x40>
		else
			printf("command invalid\n");
 80008f6:	4818      	ldr	r0, [pc, #96]	; (8000958 <HAL_UART_RxCpltCallback+0x9c>)
 80008f8:	f006 fe96 	bl	8007628 <puts>
	for(int i=0; i<3;i++)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	3301      	adds	r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	2b02      	cmp	r3, #2
 8000906:	dde0      	ble.n	80008ca <HAL_UART_RxCpltCallback+0xe>

	}

commando.ivTask1=(uart_rx_buffer[0]-48)*100;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <HAL_UART_RxCpltCallback+0x94>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	3b30      	subs	r3, #48	; 0x30
 800090e:	2264      	movs	r2, #100	; 0x64
 8000910:	fb02 f303 	mul.w	r3, r2, r3
 8000914:	461a      	mov	r2, r3
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <HAL_UART_RxCpltCallback+0xa0>)
 8000918:	601a      	str	r2, [r3, #0]
commando.ivTask2=(uart_rx_buffer[1]-48)*100;
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <HAL_UART_RxCpltCallback+0x94>)
 800091c:	785b      	ldrb	r3, [r3, #1]
 800091e:	3b30      	subs	r3, #48	; 0x30
 8000920:	2264      	movs	r2, #100	; 0x64
 8000922:	fb02 f303 	mul.w	r3, r2, r3
 8000926:	461a      	mov	r2, r3
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_UART_RxCpltCallback+0xa0>)
 800092a:	605a      	str	r2, [r3, #4]
commando.ivTask3=(uart_rx_buffer[2]-48)*100;
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <HAL_UART_RxCpltCallback+0x94>)
 800092e:	789b      	ldrb	r3, [r3, #2]
 8000930:	3b30      	subs	r3, #48	; 0x30
 8000932:	2264      	movs	r2, #100	; 0x64
 8000934:	fb02 f303 	mul.w	r3, r2, r3
 8000938:	461a      	mov	r2, r3
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_UART_RxCpltCallback+0xa0>)
 800093c:	609a      	str	r2, [r3, #8]

	//HAL_UART_Transmit(&huart2, uart_rx_buffer, BUFFER_SIZE,300);
	HAL_UART_Receive_IT(&huart2, uart_rx_buffer, BUFFER_SIZE);
 800093e:	2203      	movs	r2, #3
 8000940:	4903      	ldr	r1, [pc, #12]	; (8000950 <HAL_UART_RxCpltCallback+0x94>)
 8000942:	4807      	ldr	r0, [pc, #28]	; (8000960 <HAL_UART_RxCpltCallback+0xa4>)
 8000944:	f002 fb26 	bl	8002f94 <HAL_UART_Receive_IT>

}
 8000948:	bf00      	nop
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2000012c 	.word	0x2000012c
 8000954:	08008468 	.word	0x08008468
 8000958:	08008484 	.word	0x08008484
 800095c:	20000130 	.word	0x20000130
 8000960:	2000008c 	.word	0x2000008c

08000964 <Monitoring_Task_Entry>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Monitoring_Task_Entry */
void Monitoring_Task_Entry(void *argument)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	//init uart2




	commando.ivTask1= 1000;
 800096c:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <Monitoring_Task_Entry+0x64>)
 800096e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000972:	601a      	str	r2, [r3, #0]
	commando.ivTask2= 1000;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <Monitoring_Task_Entry+0x64>)
 8000976:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800097a:	605a      	str	r2, [r3, #4]
	commando.ivTask3= 1000;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <Monitoring_Task_Entry+0x64>)
 800097e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000982:	609a      	str	r2, [r3, #8]





		if(osMessageQueuePut(CommandMessageQueue, &commando, NULL, 50)!= osOK)
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <Monitoring_Task_Entry+0x68>)
 8000986:	6818      	ldr	r0, [r3, #0]
 8000988:	2332      	movs	r3, #50	; 0x32
 800098a:	2200      	movs	r2, #0
 800098c:	490e      	ldr	r1, [pc, #56]	; (80009c8 <Monitoring_Task_Entry+0x64>)
 800098e:	f003 ff27 	bl	80047e0 <osMessageQueuePut>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <Monitoring_Task_Entry+0x3a>
			printf("failed!\n");
 8000998:	480d      	ldr	r0, [pc, #52]	; (80009d0 <Monitoring_Task_Entry+0x6c>)
 800099a:	f006 fe45 	bl	8007628 <puts>



		//reading and updating the task counters
		osMessageQueueGet(ProducerMessageQueue, &recMsg, NULL, osWaitForever);
 800099e:	4b0d      	ldr	r3, [pc, #52]	; (80009d4 <Monitoring_Task_Entry+0x70>)
 80009a0:	6818      	ldr	r0, [r3, #0]
 80009a2:	f107 0108 	add.w	r1, r7, #8
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	2200      	movs	r2, #0
 80009ac:	f003 ff78 	bl	80048a0 <osMessageQueueGet>

		printf("Task %d counter %d\n",recMsg.taskID,recMsg.counter);
 80009b0:	7b3b      	ldrb	r3, [r7, #12]
 80009b2:	4619      	mov	r1, r3
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	461a      	mov	r2, r3
 80009b8:	4807      	ldr	r0, [pc, #28]	; (80009d8 <Monitoring_Task_Entry+0x74>)
 80009ba:	f006 fdcf 	bl	800755c <iprintf>

		//printf("message count Command queue: %d of max %d\n", osMessageQueueGetCount(CommandMessageQueue),(int)MSGQUEUE_OBJECTS);
		//printf("message count Message queue: %d of max %d\n", osMessageQueueGetCount(ProducerMessageQueue),(int)MSGQUEUE_OBJECTS);


		osDelay(200);
 80009be:	20c8      	movs	r0, #200	; 0xc8
 80009c0:	f003 fe80 	bl	80046c4 <osDelay>
		if(osMessageQueuePut(CommandMessageQueue, &commando, NULL, 50)!= osOK)
 80009c4:	e7de      	b.n	8000984 <Monitoring_Task_Entry+0x20>
 80009c6:	bf00      	nop
 80009c8:	20000130 	.word	0x20000130
 80009cc:	20000128 	.word	0x20000128
 80009d0:	08008494 	.word	0x08008494
 80009d4:	20000124 	.word	0x20000124
 80009d8:	0800849c 	.word	0x0800849c

080009dc <ProducerTask01_Entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ProducerTask01_Entry */
void ProducerTask01_Entry(void *argument)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ProducerTask01_Entry */

	//initializing the message task object
	MSGQUEUE_OBJ_t msgtask1;
	msgtask1.counter=0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
	msgtask1.taskID=1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	763b      	strb	r3, [r7, #24]

	CMDQUEUE_OBJ_t commando;

	uint32_t taskdelay=500;
 80009ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009f0:	61fb      	str	r3, [r7, #28]

  /* Infinite loop */
  for(;;)
  {
	osMessageQueuePut(ProducerMessageQueue, &msgtask1,NULL, osWaitForever);
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <ProducerTask01_Entry+0x5c>)
 80009f4:	6818      	ldr	r0, [r3, #0]
 80009f6:	f107 0114 	add.w	r1, r7, #20
 80009fa:	f04f 33ff 	mov.w	r3, #4294967295
 80009fe:	2200      	movs	r2, #0
 8000a00:	f003 feee 	bl	80047e0 <osMessageQueuePut>
	//printf("Task01 interval %d \n",taskdelay);

	//Updating counter
	msgtask1.counter++;
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	3301      	adds	r3, #1
 8000a08:	617b      	str	r3, [r7, #20]

	//receiving Command messages and eventually updating the task interval
	if(osMessageQueueGet(CommandMessageQueue, &commando, NULL, osWaitForever)== osOK)
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <ProducerTask01_Entry+0x60>)
 8000a0c:	6818      	ldr	r0, [r3, #0]
 8000a0e:	f107 0108 	add.w	r1, r7, #8
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	2200      	movs	r2, #0
 8000a18:	f003 ff42 	bl	80048a0 <osMessageQueueGet>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d105      	bne.n	8000a2e <ProducerTask01_Entry+0x52>
		{
			//set in case of interval change
			if(taskdelay!= commando.ivTask1)
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	69fa      	ldr	r2, [r7, #28]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d001      	beq.n	8000a2e <ProducerTask01_Entry+0x52>
				taskdelay=commando.ivTask1;
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	61fb      	str	r3, [r7, #28]
		}

    osDelay(taskdelay);
 8000a2e:	69f8      	ldr	r0, [r7, #28]
 8000a30:	f003 fe48 	bl	80046c4 <osDelay>
	osMessageQueuePut(ProducerMessageQueue, &msgtask1,NULL, osWaitForever);
 8000a34:	e7dd      	b.n	80009f2 <ProducerTask01_Entry+0x16>
 8000a36:	bf00      	nop
 8000a38:	20000124 	.word	0x20000124
 8000a3c:	20000128 	.word	0x20000128

08000a40 <ProducerTask02_Entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ProducerTask02_Entry */
void ProducerTask02_Entry(void *argument)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ProducerTask02_Entry */

	//initializing the message task object
	MSGQUEUE_OBJ_t msgtask2;
	msgtask2.counter=0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
	msgtask2.taskID=2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	763b      	strb	r3, [r7, #24]

	CMDQUEUE_OBJ_t commando;

	uint32_t taskdelay=500;
 8000a50:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a54:	61fb      	str	r3, [r7, #28]

  /* Infinite loop */
  for(;;)
  {
	osMessageQueuePut(ProducerMessageQueue, &msgtask2,NULL, osWaitForever);
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <ProducerTask02_Entry+0x5c>)
 8000a58:	6818      	ldr	r0, [r3, #0]
 8000a5a:	f107 0114 	add.w	r1, r7, #20
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a62:	2200      	movs	r2, #0
 8000a64:	f003 febc 	bl	80047e0 <osMessageQueuePut>
	//printf("Task02 interval %d \n",taskdelay);

	//Updating counter
	msgtask2.counter++;
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	617b      	str	r3, [r7, #20]

	//receiving Command messages and eventually updating the task interval
	if(osMessageQueueGet(CommandMessageQueue, &commando, NULL, osWaitForever)== osOK)
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <ProducerTask02_Entry+0x60>)
 8000a70:	6818      	ldr	r0, [r3, #0]
 8000a72:	f107 0108 	add.w	r1, r7, #8
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f003 ff10 	bl	80048a0 <osMessageQueueGet>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d105      	bne.n	8000a92 <ProducerTask02_Entry+0x52>
		{
			//set in case of interval change
			if(taskdelay!= commando.ivTask2)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	69fa      	ldr	r2, [r7, #28]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d001      	beq.n	8000a92 <ProducerTask02_Entry+0x52>
				taskdelay=commando.ivTask2;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	61fb      	str	r3, [r7, #28]
		}

    osDelay(taskdelay);
 8000a92:	69f8      	ldr	r0, [r7, #28]
 8000a94:	f003 fe16 	bl	80046c4 <osDelay>
	osMessageQueuePut(ProducerMessageQueue, &msgtask2,NULL, osWaitForever);
 8000a98:	e7dd      	b.n	8000a56 <ProducerTask02_Entry+0x16>
 8000a9a:	bf00      	nop
 8000a9c:	20000124 	.word	0x20000124
 8000aa0:	20000128 	.word	0x20000128

08000aa4 <ProducerTask03_Entry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ProducerTask03_Entry */
void ProducerTask03_Entry(void *argument)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b088      	sub	sp, #32
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ProducerTask03_Entry */

	//initializing the message task object
	MSGQUEUE_OBJ_t msgtask3;
	msgtask3.counter=0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
	msgtask3.taskID=3;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	763b      	strb	r3, [r7, #24]

	CMDQUEUE_OBJ_t commando;

	uint32_t taskdelay=500;
 8000ab4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ab8:	61fb      	str	r3, [r7, #28]

  /* Infinite loop */
  for(;;)
  {
	osMessageQueuePut(ProducerMessageQueue, &msgtask3,NULL, osWaitForever);
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <ProducerTask03_Entry+0x5c>)
 8000abc:	6818      	ldr	r0, [r3, #0]
 8000abe:	f107 0114 	add.w	r1, r7, #20
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f003 fe8a 	bl	80047e0 <osMessageQueuePut>
	//printf("Task03 interval %d \n",taskdelay);

	//Updating counter
	msgtask3.counter++;
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	617b      	str	r3, [r7, #20]

	//receiving Command messages and eventually updating the task interval
	if(osMessageQueueGet(CommandMessageQueue, &commando, NULL, osWaitForever)== osOK)
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <ProducerTask03_Entry+0x60>)
 8000ad4:	6818      	ldr	r0, [r3, #0]
 8000ad6:	f107 0108 	add.w	r1, r7, #8
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f003 fede 	bl	80048a0 <osMessageQueueGet>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d105      	bne.n	8000af6 <ProducerTask03_Entry+0x52>
		{
			//set in case of interval change
			if(taskdelay!= commando.ivTask3)
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	69fa      	ldr	r2, [r7, #28]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	d001      	beq.n	8000af6 <ProducerTask03_Entry+0x52>
				taskdelay=commando.ivTask3;
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	61fb      	str	r3, [r7, #28]
		}

    osDelay(taskdelay);
 8000af6:	69f8      	ldr	r0, [r7, #28]
 8000af8:	f003 fde4 	bl	80046c4 <osDelay>
	osMessageQueuePut(ProducerMessageQueue, &msgtask3,NULL, osWaitForever);
 8000afc:	e7dd      	b.n	8000aba <ProducerTask03_Entry+0x16>
 8000afe:	bf00      	nop
 8000b00:	20000124 	.word	0x20000124
 8000b04:	20000128 	.word	0x20000128

08000b08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d101      	bne.n	8000b1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b1a:	f000 fa27 	bl	8000f6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40001000 	.word	0x40001000

08000b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b30:	b672      	cpsid	i
}
 8000b32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b34:	e7fe      	b.n	8000b34 <Error_Handler+0x8>
	...

08000b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b42:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6613      	str	r3, [r2, #96]	; 0x60
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b60:	6593      	str	r3, [r2, #88]	; 0x58
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <HAL_MspInit+0x4c>)
 8000b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	210f      	movs	r1, #15
 8000b72:	f06f 0001 	mvn.w	r0, #1
 8000b76:	f000 fad1 	bl	800111c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b09e      	sub	sp, #120	; 0x78
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba0:	f107 0310 	add.w	r3, r7, #16
 8000ba4:	2254      	movs	r2, #84	; 0x54
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f006 fe1d 	bl	80077e8 <memset>
  if(huart->Instance==USART2)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a2c      	ldr	r2, [pc, #176]	; (8000c64 <HAL_UART_MspInit+0xdc>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d150      	bne.n	8000c5a <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc0:	f107 0310 	add.w	r3, r7, #16
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 fbb3 	bl	8002330 <HAL_RCCEx_PeriphCLKConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bd0:	f7ff ffac 	bl	8000b2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd4:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <HAL_UART_MspInit+0xe0>)
 8000bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd8:	4a23      	ldr	r2, [pc, #140]	; (8000c68 <HAL_UART_MspInit+0xe0>)
 8000bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bde:	6593      	str	r3, [r2, #88]	; 0x58
 8000be0:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <HAL_UART_MspInit+0xe0>)
 8000be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bec:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <HAL_UART_MspInit+0xe0>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf0:	4a1d      	ldr	r2, [pc, #116]	; (8000c68 <HAL_UART_MspInit+0xe0>)
 8000bf2:	f043 0301 	orr.w	r3, r3, #1
 8000bf6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <HAL_UART_MspInit+0xe0>)
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000c04:	2304      	movs	r3, #4
 8000c06:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c14:	2307      	movs	r3, #7
 8000c16:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c22:	f000 fb25 	bl	8001270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c2a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c34:	2303      	movs	r3, #3
 8000c36:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c40:	4619      	mov	r1, r3
 8000c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c46:	f000 fb13 	bl	8001270 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2105      	movs	r1, #5
 8000c4e:	2026      	movs	r0, #38	; 0x26
 8000c50:	f000 fa64 	bl	800111c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c54:	2026      	movs	r0, #38	; 0x26
 8000c56:	f000 fa7d 	bl	8001154 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3778      	adds	r7, #120	; 0x78
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40004400 	.word	0x40004400
 8000c68:	40021000 	.word	0x40021000

08000c6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08e      	sub	sp, #56	; 0x38
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c7a:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <HAL_InitTick+0xe0>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7e:	4a33      	ldr	r2, [pc, #204]	; (8000d4c <HAL_InitTick+0xe0>)
 8000c80:	f043 0310 	orr.w	r3, r3, #16
 8000c84:	6593      	str	r3, [r2, #88]	; 0x58
 8000c86:	4b31      	ldr	r3, [pc, #196]	; (8000d4c <HAL_InitTick+0xe0>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8a:	f003 0310 	and.w	r3, r3, #16
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c92:	f107 0210 	add.w	r2, r7, #16
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f001 fab5 	bl	800220c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ca2:	6a3b      	ldr	r3, [r7, #32]
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d103      	bne.n	8000cb4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cac:	f001 fa82 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8000cb0:	6378      	str	r0, [r7, #52]	; 0x34
 8000cb2:	e004      	b.n	8000cbe <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cb4:	f001 fa7e 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cc0:	4a23      	ldr	r2, [pc, #140]	; (8000d50 <HAL_InitTick+0xe4>)
 8000cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc6:	0c9b      	lsrs	r3, r3, #18
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ccc:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <HAL_InitTick+0xe8>)
 8000cce:	4a22      	ldr	r2, [pc, #136]	; (8000d58 <HAL_InitTick+0xec>)
 8000cd0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cd2:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <HAL_InitTick+0xe8>)
 8000cd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cd8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cda:	4a1e      	ldr	r2, [pc, #120]	; (8000d54 <HAL_InitTick+0xe8>)
 8000cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cde:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <HAL_InitTick+0xe8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce6:	4b1b      	ldr	r3, [pc, #108]	; (8000d54 <HAL_InitTick+0xe8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cec:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <HAL_InitTick+0xe8>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000cf2:	4818      	ldr	r0, [pc, #96]	; (8000d54 <HAL_InitTick+0xe8>)
 8000cf4:	f001 fe14 	bl	8002920 <HAL_TIM_Base_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000cfe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d11b      	bne.n	8000d3e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d06:	4813      	ldr	r0, [pc, #76]	; (8000d54 <HAL_InitTick+0xe8>)
 8000d08:	f001 fe6c 	bl	80029e4 <HAL_TIM_Base_Start_IT>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d111      	bne.n	8000d3e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d1a:	2036      	movs	r0, #54	; 0x36
 8000d1c:	f000 fa1a 	bl	8001154 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b0f      	cmp	r3, #15
 8000d24:	d808      	bhi.n	8000d38 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d26:	2200      	movs	r2, #0
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	2036      	movs	r0, #54	; 0x36
 8000d2c:	f000 f9f6 	bl	800111c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d30:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <HAL_InitTick+0xf0>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	e002      	b.n	8000d3e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3738      	adds	r7, #56	; 0x38
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	431bde83 	.word	0x431bde83
 8000d54:	20000140 	.word	0x20000140
 8000d58:	40001000 	.word	0x40001000
 8000d5c:	20000008 	.word	0x20000008

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <USART2_IRQHandler+0x10>)
 8000d92:	f002 f94b 	bl	800302c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000008c 	.word	0x2000008c

08000da0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <TIM6_DAC_IRQHandler+0x10>)
 8000da6:	f001 fe71 	bl	8002a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000140 	.word	0x20000140

08000db4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	e00a      	b.n	8000ddc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dc6:	f3af 8000 	nop.w
 8000dca:	4601      	mov	r1, r0
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	60ba      	str	r2, [r7, #8]
 8000dd2:	b2ca      	uxtb	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	dbf0      	blt.n	8000dc6 <_read+0x12>
  }

  return len;
 8000de4:	687b      	ldr	r3, [r7, #4]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <_close>:
  }
  return len;
}

int _close(int file)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
 8000e0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e16:	605a      	str	r2, [r3, #4]
  return 0;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <_isatty>:

int _isatty(int file)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e2e:	2301      	movs	r3, #1
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <_sbrk+0x5c>)
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <_sbrk+0x60>)
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <_sbrk+0x64>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <_sbrk+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d207      	bcs.n	8000e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e88:	f006 fd52 	bl	8007930 <__errno>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	220c      	movs	r2, #12
 8000e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	e009      	b.n	8000eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <_sbrk+0x64>)
 8000ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20010000 	.word	0x20010000
 8000eb8:	00000400 	.word	0x00000400
 8000ebc:	2000018c 	.word	0x2000018c
 8000ec0:	200085f8 	.word	0x200085f8

08000ec4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <SystemInit+0x20>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <SystemInit+0x20>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ee8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eec:	f7ff ffea 	bl	8000ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ef2:	490d      	ldr	r1, [pc, #52]	; (8000f28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <LoopForever+0xe>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef8:	e002      	b.n	8000f00 <LoopCopyDataInit>

08000efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efe:	3304      	adds	r3, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f04:	d3f9      	bcc.n	8000efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f08:	4c0a      	ldr	r4, [pc, #40]	; (8000f34 <LoopForever+0x16>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f0c:	e001      	b.n	8000f12 <LoopFillZerobss>

08000f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f10:	3204      	adds	r2, #4

08000f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f14:	d3fb      	bcc.n	8000f0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f16:	f006 fd11 	bl	800793c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f1a:	f7ff fb7d 	bl	8000618 <main>

08000f1e <LoopForever>:

LoopForever:
    b LoopForever
 8000f1e:	e7fe      	b.n	8000f1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f20:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f2c:	080085e4 	.word	0x080085e4
  ldr r2, =_sbss
 8000f30:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f34:	200085f8 	.word	0x200085f8

08000f38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC1_IRQHandler>

08000f3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f40:	2300      	movs	r3, #0
 8000f42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f8de 	bl	8001106 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f4a:	200f      	movs	r0, #15
 8000f4c:	f7ff fe8e 	bl	8000c6c <HAL_InitTick>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d002      	beq.n	8000f5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	71fb      	strb	r3, [r7, #7]
 8000f5a:	e001      	b.n	8000f60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f5c:	f7ff fdec 	bl	8000b38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f60:	79fb      	ldrb	r3, [r7, #7]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2000000c 	.word	0x2000000c
 8000f90:	20000190 	.word	0x20000190

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000190 	.word	0x20000190

08000fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fde:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	60d3      	str	r3, [r2, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <__NVIC_GetPriorityGrouping+0x18>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	0a1b      	lsrs	r3, r3, #8
 8000ffe:	f003 0307 	and.w	r3, r3, #7
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0b      	blt.n	800103a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	4907      	ldr	r1, [pc, #28]	; (8001048 <__NVIC_EnableIRQ+0x38>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	; (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	; (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	; 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ff4c 	bl	8000fac <__NVIC_SetPriorityGrouping>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800112e:	f7ff ff61 	bl	8000ff4 <__NVIC_GetPriorityGrouping>
 8001132:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	68b9      	ldr	r1, [r7, #8]
 8001138:	6978      	ldr	r0, [r7, #20]
 800113a:	f7ff ffb1 	bl	80010a0 <NVIC_EncodePriority>
 800113e:	4602      	mov	r2, r0
 8001140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff80 	bl	800104c <__NVIC_SetPriority>
}
 800114c:	bf00      	nop
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff54 	bl	8001010 <__NVIC_EnableIRQ>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d008      	beq.n	800119a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2204      	movs	r2, #4
 800118c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e022      	b.n	80011e0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 020e 	bic.w	r2, r2, #14
 80011a8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 0201 	bic.w	r2, r2, #1
 80011b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f003 021c 	and.w	r2, r3, #28
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	2101      	movs	r1, #1
 80011c8:	fa01 f202 	lsl.w	r2, r1, r2
 80011cc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2201      	movs	r2, #1
 80011d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80011de:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d005      	beq.n	8001210 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2204      	movs	r2, #4
 8001208:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e029      	b.n	8001264 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 020e 	bic.w	r2, r2, #14
 800121e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0201 	bic.w	r2, r2, #1
 800122e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001234:	f003 021c 	and.w	r2, r3, #28
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	2101      	movs	r1, #1
 800123e:	fa01 f202 	lsl.w	r2, r1, r2
 8001242:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	4798      	blx	r3
    }
  }
  return status;
 8001264:	7bfb      	ldrb	r3, [r7, #15]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001270:	b480      	push	{r7}
 8001272:	b087      	sub	sp, #28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127e:	e148      	b.n	8001512 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	2101      	movs	r1, #1
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	fa01 f303 	lsl.w	r3, r1, r3
 800128c:	4013      	ands	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	f000 813a 	beq.w	800150c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d005      	beq.n	80012b0 <HAL_GPIO_Init+0x40>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d130      	bne.n	8001312 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012e6:	2201      	movs	r2, #1
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	f003 0201 	and.w	r2, r3, #1
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b03      	cmp	r3, #3
 800131c:	d017      	beq.n	800134e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 0303 	and.w	r3, r3, #3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d123      	bne.n	80013a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	08da      	lsrs	r2, r3, #3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3208      	adds	r2, #8
 8001362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001366:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	220f      	movs	r2, #15
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	691a      	ldr	r2, [r3, #16]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	08da      	lsrs	r2, r3, #3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3208      	adds	r2, #8
 800139c:	6939      	ldr	r1, [r7, #16]
 800139e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2203      	movs	r2, #3
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 0203 	and.w	r2, r3, #3
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 8094 	beq.w	800150c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e4:	4b52      	ldr	r3, [pc, #328]	; (8001530 <HAL_GPIO_Init+0x2c0>)
 80013e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013e8:	4a51      	ldr	r2, [pc, #324]	; (8001530 <HAL_GPIO_Init+0x2c0>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6613      	str	r3, [r2, #96]	; 0x60
 80013f0:	4b4f      	ldr	r3, [pc, #316]	; (8001530 <HAL_GPIO_Init+0x2c0>)
 80013f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013fc:	4a4d      	ldr	r2, [pc, #308]	; (8001534 <HAL_GPIO_Init+0x2c4>)
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	3302      	adds	r3, #2
 8001404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	220f      	movs	r2, #15
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001426:	d00d      	beq.n	8001444 <HAL_GPIO_Init+0x1d4>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a43      	ldr	r2, [pc, #268]	; (8001538 <HAL_GPIO_Init+0x2c8>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d007      	beq.n	8001440 <HAL_GPIO_Init+0x1d0>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a42      	ldr	r2, [pc, #264]	; (800153c <HAL_GPIO_Init+0x2cc>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d101      	bne.n	800143c <HAL_GPIO_Init+0x1cc>
 8001438:	2302      	movs	r3, #2
 800143a:	e004      	b.n	8001446 <HAL_GPIO_Init+0x1d6>
 800143c:	2307      	movs	r3, #7
 800143e:	e002      	b.n	8001446 <HAL_GPIO_Init+0x1d6>
 8001440:	2301      	movs	r3, #1
 8001442:	e000      	b.n	8001446 <HAL_GPIO_Init+0x1d6>
 8001444:	2300      	movs	r3, #0
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	f002 0203 	and.w	r2, r2, #3
 800144c:	0092      	lsls	r2, r2, #2
 800144e:	4093      	lsls	r3, r2
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001456:	4937      	ldr	r1, [pc, #220]	; (8001534 <HAL_GPIO_Init+0x2c4>)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	089b      	lsrs	r3, r3, #2
 800145c:	3302      	adds	r3, #2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001464:	4b36      	ldr	r3, [pc, #216]	; (8001540 <HAL_GPIO_Init+0x2d0>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001488:	4a2d      	ldr	r2, [pc, #180]	; (8001540 <HAL_GPIO_Init+0x2d0>)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800148e:	4b2c      	ldr	r3, [pc, #176]	; (8001540 <HAL_GPIO_Init+0x2d0>)
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	43db      	mvns	r3, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014b2:	4a23      	ldr	r2, [pc, #140]	; (8001540 <HAL_GPIO_Init+0x2d0>)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014b8:	4b21      	ldr	r3, [pc, #132]	; (8001540 <HAL_GPIO_Init+0x2d0>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014dc:	4a18      	ldr	r2, [pc, #96]	; (8001540 <HAL_GPIO_Init+0x2d0>)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_GPIO_Init+0x2d0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001506:	4a0e      	ldr	r2, [pc, #56]	; (8001540 <HAL_GPIO_Init+0x2d0>)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3301      	adds	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	fa22 f303 	lsr.w	r3, r2, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	f47f aeaf 	bne.w	8001280 <HAL_GPIO_Init+0x10>
  }
}
 8001522:	bf00      	nop
 8001524:	bf00      	nop
 8001526:	371c      	adds	r7, #28
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	40021000 	.word	0x40021000
 8001534:	40010000 	.word	0x40010000
 8001538:	48000400 	.word	0x48000400
 800153c:	48000800 	.word	0x48000800
 8001540:	40010400 	.word	0x40010400

08001544 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
 8001550:	4613      	mov	r3, r2
 8001552:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001554:	787b      	ldrb	r3, [r7, #1]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800155a:	887a      	ldrh	r2, [r7, #2]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001560:	e002      	b.n	8001568 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001562:	887a      	ldrh	r2, [r7, #2]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800157e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001582:	6013      	str	r3, [r2, #0]
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40007000 	.word	0x40007000

08001594 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <HAL_PWREx_GetVoltageRange+0x18>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40007000 	.word	0x40007000

080015b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015be:	d130      	bne.n	8001622 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015c0:	4b23      	ldr	r3, [pc, #140]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015cc:	d038      	beq.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015d6:	4a1e      	ldr	r2, [pc, #120]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2232      	movs	r2, #50	; 0x32
 80015e4:	fb02 f303 	mul.w	r3, r2, r3
 80015e8:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015ea:	fba2 2303 	umull	r2, r3, r2, r3
 80015ee:	0c9b      	lsrs	r3, r3, #18
 80015f0:	3301      	adds	r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015f4:	e002      	b.n	80015fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001608:	d102      	bne.n	8001610 <HAL_PWREx_ControlVoltageScaling+0x60>
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1f2      	bne.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800161c:	d110      	bne.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e00f      	b.n	8001642 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800162a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800162e:	d007      	beq.n	8001640 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001638:	4a05      	ldr	r2, [pc, #20]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800163a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800163e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40007000 	.word	0x40007000
 8001654:	20000004 	.word	0x20000004
 8001658:	431bde83 	.word	0x431bde83

0800165c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	f000 bc02 	b.w	8001e74 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001670:	4b96      	ldr	r3, [pc, #600]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 030c 	and.w	r3, r3, #12
 8001678:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800167a:	4b94      	ldr	r3, [pc, #592]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80e4 	beq.w	800185a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d007      	beq.n	80016a8 <HAL_RCC_OscConfig+0x4c>
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	2b0c      	cmp	r3, #12
 800169c:	f040 808b 	bne.w	80017b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	f040 8087 	bne.w	80017b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016a8:	4b88      	ldr	r3, [pc, #544]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_OscConfig+0x64>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e3d9      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a1a      	ldr	r2, [r3, #32]
 80016c4:	4b81      	ldr	r3, [pc, #516]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0308 	and.w	r3, r3, #8
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d004      	beq.n	80016da <HAL_RCC_OscConfig+0x7e>
 80016d0:	4b7e      	ldr	r3, [pc, #504]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016d8:	e005      	b.n	80016e6 <HAL_RCC_OscConfig+0x8a>
 80016da:	4b7c      	ldr	r3, [pc, #496]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 80016dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e0:	091b      	lsrs	r3, r3, #4
 80016e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d223      	bcs.n	8001732 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 fdbe 	bl	8002270 <RCC_SetFlashLatencyFromMSIRange>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e3ba      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016fe:	4b73      	ldr	r3, [pc, #460]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a72      	ldr	r2, [pc, #456]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 8001704:	f043 0308 	orr.w	r3, r3, #8
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	4b70      	ldr	r3, [pc, #448]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	496d      	ldr	r1, [pc, #436]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 8001718:	4313      	orrs	r3, r2
 800171a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800171c:	4b6b      	ldr	r3, [pc, #428]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	021b      	lsls	r3, r3, #8
 800172a:	4968      	ldr	r1, [pc, #416]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
 8001730:	e025      	b.n	800177e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001732:	4b66      	ldr	r3, [pc, #408]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a65      	ldr	r2, [pc, #404]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 8001738:	f043 0308 	orr.w	r3, r3, #8
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b63      	ldr	r3, [pc, #396]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	4960      	ldr	r1, [pc, #384]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 800174c:	4313      	orrs	r3, r2
 800174e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001750:	4b5e      	ldr	r3, [pc, #376]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	021b      	lsls	r3, r3, #8
 800175e:	495b      	ldr	r1, [pc, #364]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d109      	bne.n	800177e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	4618      	mov	r0, r3
 8001770:	f000 fd7e 	bl	8002270 <RCC_SetFlashLatencyFromMSIRange>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e37a      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800177e:	f000 fc81 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8001782:	4602      	mov	r2, r0
 8001784:	4b51      	ldr	r3, [pc, #324]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	4950      	ldr	r1, [pc, #320]	; (80018d0 <HAL_RCC_OscConfig+0x274>)
 8001790:	5ccb      	ldrb	r3, [r1, r3]
 8001792:	f003 031f 	and.w	r3, r3, #31
 8001796:	fa22 f303 	lsr.w	r3, r2, r3
 800179a:	4a4e      	ldr	r2, [pc, #312]	; (80018d4 <HAL_RCC_OscConfig+0x278>)
 800179c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800179e:	4b4e      	ldr	r3, [pc, #312]	; (80018d8 <HAL_RCC_OscConfig+0x27c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fa62 	bl	8000c6c <HAL_InitTick>
 80017a8:	4603      	mov	r3, r0
 80017aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d052      	beq.n	8001858 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	e35e      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d032      	beq.n	8001824 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017be:	4b43      	ldr	r3, [pc, #268]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a42      	ldr	r2, [pc, #264]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ca:	f7ff fbe3 	bl	8000f94 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017d2:	f7ff fbdf 	bl	8000f94 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e347      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017e4:	4b39      	ldr	r3, [pc, #228]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f0:	4b36      	ldr	r3, [pc, #216]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a35      	ldr	r2, [pc, #212]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 80017f6:	f043 0308 	orr.w	r3, r3, #8
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b33      	ldr	r3, [pc, #204]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	4930      	ldr	r1, [pc, #192]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800180e:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	492b      	ldr	r1, [pc, #172]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 800181e:	4313      	orrs	r3, r2
 8001820:	604b      	str	r3, [r1, #4]
 8001822:	e01a      	b.n	800185a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001824:	4b29      	ldr	r3, [pc, #164]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a28      	ldr	r2, [pc, #160]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001830:	f7ff fbb0 	bl	8000f94 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001838:	f7ff fbac 	bl	8000f94 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e314      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800184a:	4b20      	ldr	r3, [pc, #128]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x1dc>
 8001856:	e000      	b.n	800185a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001858:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d073      	beq.n	800194e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	2b08      	cmp	r3, #8
 800186a:	d005      	beq.n	8001878 <HAL_RCC_OscConfig+0x21c>
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	2b0c      	cmp	r3, #12
 8001870:	d10e      	bne.n	8001890 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	2b03      	cmp	r3, #3
 8001876:	d10b      	bne.n	8001890 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d063      	beq.n	800194c <HAL_RCC_OscConfig+0x2f0>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d15f      	bne.n	800194c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e2f1      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001898:	d106      	bne.n	80018a8 <HAL_RCC_OscConfig+0x24c>
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e025      	b.n	80018f4 <HAL_RCC_OscConfig+0x298>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018b0:	d114      	bne.n	80018dc <HAL_RCC_OscConfig+0x280>
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 80018b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	4b03      	ldr	r3, [pc, #12]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a02      	ldr	r2, [pc, #8]	; (80018cc <HAL_RCC_OscConfig+0x270>)
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e013      	b.n	80018f4 <HAL_RCC_OscConfig+0x298>
 80018cc:	40021000 	.word	0x40021000
 80018d0:	08008558 	.word	0x08008558
 80018d4:	20000004 	.word	0x20000004
 80018d8:	20000008 	.word	0x20000008
 80018dc:	4ba0      	ldr	r3, [pc, #640]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a9f      	ldr	r2, [pc, #636]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 80018e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	4b9d      	ldr	r3, [pc, #628]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a9c      	ldr	r2, [pc, #624]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 80018ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d013      	beq.n	8001924 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff fb4a 	bl	8000f94 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff fb46 	bl	8000f94 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e2ae      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001916:	4b92      	ldr	r3, [pc, #584]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x2a8>
 8001922:	e014      	b.n	800194e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff fb36 	bl	8000f94 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800192c:	f7ff fb32 	bl	8000f94 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b64      	cmp	r3, #100	; 0x64
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e29a      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800193e:	4b88      	ldr	r3, [pc, #544]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x2d0>
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d060      	beq.n	8001a1c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	2b04      	cmp	r3, #4
 800195e:	d005      	beq.n	800196c <HAL_RCC_OscConfig+0x310>
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d119      	bne.n	800199a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2b02      	cmp	r3, #2
 800196a:	d116      	bne.n	800199a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800196c:	4b7c      	ldr	r3, [pc, #496]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_OscConfig+0x328>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e277      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001984:	4b76      	ldr	r3, [pc, #472]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	061b      	lsls	r3, r3, #24
 8001992:	4973      	ldr	r1, [pc, #460]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 8001994:	4313      	orrs	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001998:	e040      	b.n	8001a1c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d023      	beq.n	80019ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a2:	4b6f      	ldr	r3, [pc, #444]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a6e      	ldr	r2, [pc, #440]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 80019a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ae:	f7ff faf1 	bl	8000f94 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b6:	f7ff faed 	bl	8000f94 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e255      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c8:	4b65      	ldr	r3, [pc, #404]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d4:	4b62      	ldr	r3, [pc, #392]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	061b      	lsls	r3, r3, #24
 80019e2:	495f      	ldr	r1, [pc, #380]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
 80019e8:	e018      	b.n	8001a1c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ea:	4b5d      	ldr	r3, [pc, #372]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a5c      	ldr	r2, [pc, #368]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 80019f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f6:	f7ff facd 	bl	8000f94 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019fe:	f7ff fac9 	bl	8000f94 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e231      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a10:	4b53      	ldr	r3, [pc, #332]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f0      	bne.n	80019fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d03c      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d01c      	beq.n	8001a6a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a30:	4b4b      	ldr	r3, [pc, #300]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 8001a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a36:	4a4a      	ldr	r2, [pc, #296]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a40:	f7ff faa8 	bl	8000f94 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a48:	f7ff faa4 	bl	8000f94 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e20c      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a5a:	4b41      	ldr	r3, [pc, #260]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 8001a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0ef      	beq.n	8001a48 <HAL_RCC_OscConfig+0x3ec>
 8001a68:	e01b      	b.n	8001aa2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6a:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 8001a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a70:	4a3b      	ldr	r2, [pc, #236]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 8001a72:	f023 0301 	bic.w	r3, r3, #1
 8001a76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fa8b 	bl	8000f94 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a82:	f7ff fa87 	bl	8000f94 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e1ef      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a94:	4b32      	ldr	r3, [pc, #200]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 8001a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1ef      	bne.n	8001a82 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 80a6 	beq.w	8001bfc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ab4:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10d      	bne.n	8001adc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac0:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	4a26      	ldr	r2, [pc, #152]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 8001ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aca:	6593      	str	r3, [r2, #88]	; 0x58
 8001acc:	4b24      	ldr	r3, [pc, #144]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 8001ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001adc:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d118      	bne.n	8001b1a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a1d      	ldr	r2, [pc, #116]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af4:	f7ff fa4e 	bl	8000f94 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001afc:	f7ff fa4a 	bl	8000f94 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e1b2      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_RCC_OscConfig+0x508>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d108      	bne.n	8001b34 <HAL_RCC_OscConfig+0x4d8>
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 8001b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b32:	e029      	b.n	8001b88 <HAL_RCC_OscConfig+0x52c>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b05      	cmp	r3, #5
 8001b3a:	d115      	bne.n	8001b68 <HAL_RCC_OscConfig+0x50c>
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 8001b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b42:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 8001b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b52:	4a03      	ldr	r2, [pc, #12]	; (8001b60 <HAL_RCC_OscConfig+0x504>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b5c:	e014      	b.n	8001b88 <HAL_RCC_OscConfig+0x52c>
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000
 8001b64:	40007000 	.word	0x40007000
 8001b68:	4b9a      	ldr	r3, [pc, #616]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6e:	4a99      	ldr	r2, [pc, #612]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001b70:	f023 0301 	bic.w	r3, r3, #1
 8001b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b78:	4b96      	ldr	r3, [pc, #600]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7e:	4a95      	ldr	r2, [pc, #596]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001b80:	f023 0304 	bic.w	r3, r3, #4
 8001b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d016      	beq.n	8001bbe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b90:	f7ff fa00 	bl	8000f94 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b98:	f7ff f9fc 	bl	8000f94 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e162      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bae:	4b89      	ldr	r3, [pc, #548]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0ed      	beq.n	8001b98 <HAL_RCC_OscConfig+0x53c>
 8001bbc:	e015      	b.n	8001bea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbe:	f7ff f9e9 	bl	8000f94 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bc4:	e00a      	b.n	8001bdc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc6:	f7ff f9e5 	bl	8000f94 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e14b      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bdc:	4b7d      	ldr	r3, [pc, #500]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1ed      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bea:	7ffb      	ldrb	r3, [r7, #31]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d105      	bne.n	8001bfc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf0:	4b78      	ldr	r3, [pc, #480]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf4:	4a77      	ldr	r2, [pc, #476]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0320 	and.w	r3, r3, #32
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d03c      	beq.n	8001c82 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d01c      	beq.n	8001c4a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c10:	4b70      	ldr	r3, [pc, #448]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001c12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c16:	4a6f      	ldr	r2, [pc, #444]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c20:	f7ff f9b8 	bl	8000f94 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c28:	f7ff f9b4 	bl	8000f94 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e11c      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c3a:	4b66      	ldr	r3, [pc, #408]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001c3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0ef      	beq.n	8001c28 <HAL_RCC_OscConfig+0x5cc>
 8001c48:	e01b      	b.n	8001c82 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c4a:	4b62      	ldr	r3, [pc, #392]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001c4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c50:	4a60      	ldr	r2, [pc, #384]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001c52:	f023 0301 	bic.w	r3, r3, #1
 8001c56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5a:	f7ff f99b 	bl	8000f94 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c62:	f7ff f997 	bl	8000f94 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e0ff      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c74:	4b57      	ldr	r3, [pc, #348]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001c76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1ef      	bne.n	8001c62 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 80f3 	beq.w	8001e72 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	f040 80c9 	bne.w	8001e28 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c96:	4b4f      	ldr	r3, [pc, #316]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f003 0203 	and.w	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d12c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d123      	bne.n	8001d04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d11b      	bne.n	8001d04 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d113      	bne.n	8001d04 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce6:	085b      	lsrs	r3, r3, #1
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d109      	bne.n	8001d04 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	085b      	lsrs	r3, r3, #1
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d06b      	beq.n	8001ddc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	d062      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d0a:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e0ac      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d1a:	4b2e      	ldr	r3, [pc, #184]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a2d      	ldr	r2, [pc, #180]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001d20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d24:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d26:	f7ff f935 	bl	8000f94 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2e:	f7ff f931 	bl	8000f94 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e099      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f0      	bne.n	8001d2e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d4c:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <HAL_RCC_OscConfig+0x77c>)
 8001d52:	4013      	ands	r3, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d5c:	3a01      	subs	r2, #1
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	4311      	orrs	r1, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d66:	0212      	lsls	r2, r2, #8
 8001d68:	4311      	orrs	r1, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d6e:	0852      	lsrs	r2, r2, #1
 8001d70:	3a01      	subs	r2, #1
 8001d72:	0552      	lsls	r2, r2, #21
 8001d74:	4311      	orrs	r1, r2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d7a:	0852      	lsrs	r2, r2, #1
 8001d7c:	3a01      	subs	r2, #1
 8001d7e:	0652      	lsls	r2, r2, #25
 8001d80:	4311      	orrs	r1, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d86:	06d2      	lsls	r2, r2, #27
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	4912      	ldr	r1, [pc, #72]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d90:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0f      	ldr	r2, [pc, #60]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d9c:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	4a0c      	ldr	r2, [pc, #48]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001da2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001da8:	f7ff f8f4 	bl	8000f94 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db0:	f7ff f8f0 	bl	8000f94 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e058      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc2:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <HAL_RCC_OscConfig+0x778>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dce:	e050      	b.n	8001e72 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e04f      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ddc:	4b27      	ldr	r3, [pc, #156]	; (8001e7c <HAL_RCC_OscConfig+0x820>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d144      	bne.n	8001e72 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001de8:	4b24      	ldr	r3, [pc, #144]	; (8001e7c <HAL_RCC_OscConfig+0x820>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a23      	ldr	r2, [pc, #140]	; (8001e7c <HAL_RCC_OscConfig+0x820>)
 8001dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001df4:	4b21      	ldr	r3, [pc, #132]	; (8001e7c <HAL_RCC_OscConfig+0x820>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	4a20      	ldr	r2, [pc, #128]	; (8001e7c <HAL_RCC_OscConfig+0x820>)
 8001dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dfe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e00:	f7ff f8c8 	bl	8000f94 <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e08:	f7ff f8c4 	bl	8000f94 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e02c      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_RCC_OscConfig+0x820>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x7ac>
 8001e26:	e024      	b.n	8001e72 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2b0c      	cmp	r3, #12
 8001e2c:	d01f      	beq.n	8001e6e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2e:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <HAL_RCC_OscConfig+0x820>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <HAL_RCC_OscConfig+0x820>)
 8001e34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3a:	f7ff f8ab 	bl	8000f94 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e42:	f7ff f8a7 	bl	8000f94 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e00f      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_RCC_OscConfig+0x820>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1f0      	bne.n	8001e42 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_RCC_OscConfig+0x820>)
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	4905      	ldr	r1, [pc, #20]	; (8001e7c <HAL_RCC_OscConfig+0x820>)
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <HAL_RCC_OscConfig+0x824>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60cb      	str	r3, [r1, #12]
 8001e6c:	e001      	b.n	8001e72 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3720      	adds	r7, #32
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	feeefffc 	.word	0xfeeefffc

08001e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0e7      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b75      	ldr	r3, [pc, #468]	; (8002070 <HAL_RCC_ClockConfig+0x1ec>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d910      	bls.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b72      	ldr	r3, [pc, #456]	; (8002070 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 0207 	bic.w	r2, r3, #7
 8001eae:	4970      	ldr	r1, [pc, #448]	; (8002070 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb6:	4b6e      	ldr	r3, [pc, #440]	; (8002070 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0cf      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d010      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	4b66      	ldr	r3, [pc, #408]	; (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d908      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee4:	4b63      	ldr	r3, [pc, #396]	; (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	4960      	ldr	r1, [pc, #384]	; (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d04c      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d107      	bne.n	8001f1a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0a:	4b5a      	ldr	r3, [pc, #360]	; (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d121      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e0a6      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f22:	4b54      	ldr	r3, [pc, #336]	; (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d115      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e09a      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d107      	bne.n	8001f4a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f3a:	4b4e      	ldr	r3, [pc, #312]	; (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e08e      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f4a:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e086      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f5a:	4b46      	ldr	r3, [pc, #280]	; (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f023 0203 	bic.w	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4943      	ldr	r1, [pc, #268]	; (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f6c:	f7ff f812 	bl	8000f94 <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	e00a      	b.n	8001f8a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f74:	f7ff f80e 	bl	8000f94 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e06e      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8a:	4b3a      	ldr	r3, [pc, #232]	; (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 020c 	and.w	r2, r3, #12
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1eb      	bne.n	8001f74 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d010      	beq.n	8001fca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	4b31      	ldr	r3, [pc, #196]	; (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d208      	bcs.n	8001fca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb8:	4b2e      	ldr	r3, [pc, #184]	; (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	492b      	ldr	r1, [pc, #172]	; (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fca:	4b29      	ldr	r3, [pc, #164]	; (8002070 <HAL_RCC_ClockConfig+0x1ec>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d210      	bcs.n	8001ffa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd8:	4b25      	ldr	r3, [pc, #148]	; (8002070 <HAL_RCC_ClockConfig+0x1ec>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f023 0207 	bic.w	r2, r3, #7
 8001fe0:	4923      	ldr	r1, [pc, #140]	; (8002070 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe8:	4b21      	ldr	r3, [pc, #132]	; (8002070 <HAL_RCC_ClockConfig+0x1ec>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e036      	b.n	8002068 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b00      	cmp	r3, #0
 8002004:	d008      	beq.n	8002018 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002006:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	4918      	ldr	r1, [pc, #96]	; (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8002014:	4313      	orrs	r3, r2
 8002016:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b00      	cmp	r3, #0
 8002022:	d009      	beq.n	8002038 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4910      	ldr	r1, [pc, #64]	; (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002038:	f000 f824 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 800203c:	4602      	mov	r2, r0
 800203e:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <HAL_RCC_ClockConfig+0x1f0>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	091b      	lsrs	r3, r3, #4
 8002044:	f003 030f 	and.w	r3, r3, #15
 8002048:	490b      	ldr	r1, [pc, #44]	; (8002078 <HAL_RCC_ClockConfig+0x1f4>)
 800204a:	5ccb      	ldrb	r3, [r1, r3]
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	fa22 f303 	lsr.w	r3, r2, r3
 8002054:	4a09      	ldr	r2, [pc, #36]	; (800207c <HAL_RCC_ClockConfig+0x1f8>)
 8002056:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002058:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_RCC_ClockConfig+0x1fc>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fe05 	bl	8000c6c <HAL_InitTick>
 8002062:	4603      	mov	r3, r0
 8002064:	72fb      	strb	r3, [r7, #11]

  return status;
 8002066:	7afb      	ldrb	r3, [r7, #11]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40022000 	.word	0x40022000
 8002074:	40021000 	.word	0x40021000
 8002078:	08008558 	.word	0x08008558
 800207c:	20000004 	.word	0x20000004
 8002080:	20000008 	.word	0x20000008

08002084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	2300      	movs	r3, #0
 8002090:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002092:	4b3e      	ldr	r3, [pc, #248]	; (800218c <HAL_RCC_GetSysClockFreq+0x108>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800209c:	4b3b      	ldr	r3, [pc, #236]	; (800218c <HAL_RCC_GetSysClockFreq+0x108>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0x34>
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2b0c      	cmp	r3, #12
 80020b0:	d121      	bne.n	80020f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d11e      	bne.n	80020f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020b8:	4b34      	ldr	r3, [pc, #208]	; (800218c <HAL_RCC_GetSysClockFreq+0x108>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d107      	bne.n	80020d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020c4:	4b31      	ldr	r3, [pc, #196]	; (800218c <HAL_RCC_GetSysClockFreq+0x108>)
 80020c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ca:	0a1b      	lsrs	r3, r3, #8
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	e005      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020d4:	4b2d      	ldr	r3, [pc, #180]	; (800218c <HAL_RCC_GetSysClockFreq+0x108>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020e0:	4a2b      	ldr	r2, [pc, #172]	; (8002190 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10d      	bne.n	800210c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020f4:	e00a      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d102      	bne.n	8002102 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020fc:	4b25      	ldr	r3, [pc, #148]	; (8002194 <HAL_RCC_GetSysClockFreq+0x110>)
 80020fe:	61bb      	str	r3, [r7, #24]
 8002100:	e004      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	2b08      	cmp	r3, #8
 8002106:	d101      	bne.n	800210c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002108:	4b23      	ldr	r3, [pc, #140]	; (8002198 <HAL_RCC_GetSysClockFreq+0x114>)
 800210a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	2b0c      	cmp	r3, #12
 8002110:	d134      	bne.n	800217c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002112:	4b1e      	ldr	r3, [pc, #120]	; (800218c <HAL_RCC_GetSysClockFreq+0x108>)
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d003      	beq.n	800212a <HAL_RCC_GetSysClockFreq+0xa6>
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d003      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0xac>
 8002128:	e005      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800212a:	4b1a      	ldr	r3, [pc, #104]	; (8002194 <HAL_RCC_GetSysClockFreq+0x110>)
 800212c:	617b      	str	r3, [r7, #20]
      break;
 800212e:	e005      	b.n	800213c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_RCC_GetSysClockFreq+0x114>)
 8002132:	617b      	str	r3, [r7, #20]
      break;
 8002134:	e002      	b.n	800213c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	617b      	str	r3, [r7, #20]
      break;
 800213a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800213c:	4b13      	ldr	r3, [pc, #76]	; (800218c <HAL_RCC_GetSysClockFreq+0x108>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	3301      	adds	r3, #1
 8002148:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <HAL_RCC_GetSysClockFreq+0x108>)
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	fb03 f202 	mul.w	r2, r3, r2
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002160:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_RCC_GetSysClockFreq+0x108>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	0e5b      	lsrs	r3, r3, #25
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	3301      	adds	r3, #1
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	fbb2 f3f3 	udiv	r3, r2, r3
 800217a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800217c:	69bb      	ldr	r3, [r7, #24]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3724      	adds	r7, #36	; 0x24
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	08008570 	.word	0x08008570
 8002194:	00f42400 	.word	0x00f42400
 8002198:	007a1200 	.word	0x007a1200

0800219c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000004 	.word	0x20000004

080021b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021b8:	f7ff fff0 	bl	800219c <HAL_RCC_GetHCLKFreq>
 80021bc:	4602      	mov	r2, r0
 80021be:	4b06      	ldr	r3, [pc, #24]	; (80021d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	4904      	ldr	r1, [pc, #16]	; (80021dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80021ca:	5ccb      	ldrb	r3, [r1, r3]
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40021000 	.word	0x40021000
 80021dc:	08008568 	.word	0x08008568

080021e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021e4:	f7ff ffda 	bl	800219c <HAL_RCC_GetHCLKFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	0adb      	lsrs	r3, r3, #11
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	4904      	ldr	r1, [pc, #16]	; (8002208 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	08008568 	.word	0x08008568

0800220c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	220f      	movs	r2, #15
 800221a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800221c:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_RCC_GetClockConfig+0x5c>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 0203 	and.w	r2, r3, #3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002228:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <HAL_RCC_GetClockConfig+0x5c>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <HAL_RCC_GetClockConfig+0x5c>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002240:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_RCC_GetClockConfig+0x5c>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	08db      	lsrs	r3, r3, #3
 8002246:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <HAL_RCC_GetClockConfig+0x60>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0207 	and.w	r2, r3, #7
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	601a      	str	r2, [r3, #0]
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000
 800226c:	40022000 	.word	0x40022000

08002270 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002278:	2300      	movs	r3, #0
 800227a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800227c:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002288:	f7ff f984 	bl	8001594 <HAL_PWREx_GetVoltageRange>
 800228c:	6178      	str	r0, [r7, #20]
 800228e:	e014      	b.n	80022ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002290:	4b25      	ldr	r3, [pc, #148]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	4a24      	ldr	r2, [pc, #144]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229a:	6593      	str	r3, [r2, #88]	; 0x58
 800229c:	4b22      	ldr	r3, [pc, #136]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022a8:	f7ff f974 	bl	8001594 <HAL_PWREx_GetVoltageRange>
 80022ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022ae:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022c0:	d10b      	bne.n	80022da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b80      	cmp	r3, #128	; 0x80
 80022c6:	d919      	bls.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2ba0      	cmp	r3, #160	; 0xa0
 80022cc:	d902      	bls.n	80022d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ce:	2302      	movs	r3, #2
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	e013      	b.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022d4:	2301      	movs	r3, #1
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	e010      	b.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b80      	cmp	r3, #128	; 0x80
 80022de:	d902      	bls.n	80022e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022e0:	2303      	movs	r3, #3
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	e00a      	b.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b80      	cmp	r3, #128	; 0x80
 80022ea:	d102      	bne.n	80022f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ec:	2302      	movs	r3, #2
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	e004      	b.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b70      	cmp	r3, #112	; 0x70
 80022f6:	d101      	bne.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022f8:	2301      	movs	r3, #1
 80022fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 0207 	bic.w	r2, r3, #7
 8002304:	4909      	ldr	r1, [pc, #36]	; (800232c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800230c:	4b07      	ldr	r3, [pc, #28]	; (800232c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	429a      	cmp	r2, r3
 8002318:	d001      	beq.n	800231e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000
 800232c:	40022000 	.word	0x40022000

08002330 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002338:	2300      	movs	r3, #0
 800233a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800233c:	2300      	movs	r3, #0
 800233e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002348:	2b00      	cmp	r3, #0
 800234a:	d031      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002350:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002354:	d01a      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002356:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800235a:	d814      	bhi.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800235c:	2b00      	cmp	r3, #0
 800235e:	d009      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002360:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002364:	d10f      	bne.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002366:	4b5d      	ldr	r3, [pc, #372]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	4a5c      	ldr	r2, [pc, #368]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800236c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002370:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002372:	e00c      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3304      	adds	r3, #4
 8002378:	2100      	movs	r1, #0
 800237a:	4618      	mov	r0, r3
 800237c:	f000 f9de 	bl	800273c <RCCEx_PLLSAI1_Config>
 8002380:	4603      	mov	r3, r0
 8002382:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002384:	e003      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	74fb      	strb	r3, [r7, #19]
      break;
 800238a:	e000      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800238c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800238e:	7cfb      	ldrb	r3, [r7, #19]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10b      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002394:	4b51      	ldr	r3, [pc, #324]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a2:	494e      	ldr	r1, [pc, #312]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023aa:	e001      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023ac:	7cfb      	ldrb	r3, [r7, #19]
 80023ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 809e 	beq.w	80024fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023c2:	4b46      	ldr	r3, [pc, #280]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80023d2:	2300      	movs	r3, #0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00d      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023d8:	4b40      	ldr	r3, [pc, #256]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023dc:	4a3f      	ldr	r2, [pc, #252]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e2:	6593      	str	r3, [r2, #88]	; 0x58
 80023e4:	4b3d      	ldr	r3, [pc, #244]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f0:	2301      	movs	r3, #1
 80023f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023f4:	4b3a      	ldr	r3, [pc, #232]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a39      	ldr	r2, [pc, #228]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002400:	f7fe fdc8 	bl	8000f94 <HAL_GetTick>
 8002404:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002406:	e009      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002408:	f7fe fdc4 	bl	8000f94 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d902      	bls.n	800241c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	74fb      	strb	r3, [r7, #19]
        break;
 800241a:	e005      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800241c:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0ef      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002428:	7cfb      	ldrb	r3, [r7, #19]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d15a      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800242e:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002438:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01e      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	429a      	cmp	r2, r3
 8002448:	d019      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800244a:	4b24      	ldr	r3, [pc, #144]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800244c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002454:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002456:	4b21      	ldr	r3, [pc, #132]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245c:	4a1f      	ldr	r2, [pc, #124]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800245e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002466:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246c:	4a1b      	ldr	r2, [pc, #108]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800246e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002472:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002476:	4a19      	ldr	r2, [pc, #100]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d016      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7fe fd84 	bl	8000f94 <HAL_GetTick>
 800248c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800248e:	e00b      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002490:	f7fe fd80 	bl	8000f94 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	; 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d902      	bls.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	74fb      	strb	r3, [r7, #19]
            break;
 80024a6:	e006      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0ec      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80024b6:	7cfb      	ldrb	r3, [r7, #19]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10b      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024bc:	4b07      	ldr	r3, [pc, #28]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ca:	4904      	ldr	r1, [pc, #16]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024d2:	e009      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024d4:	7cfb      	ldrb	r3, [r7, #19]
 80024d6:	74bb      	strb	r3, [r7, #18]
 80024d8:	e006      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80024da:	bf00      	nop
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024e4:	7cfb      	ldrb	r3, [r7, #19]
 80024e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024e8:	7c7b      	ldrb	r3, [r7, #17]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d105      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ee:	4b8a      	ldr	r3, [pc, #552]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f2:	4a89      	ldr	r2, [pc, #548]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002506:	4b84      	ldr	r3, [pc, #528]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250c:	f023 0203 	bic.w	r2, r3, #3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	4980      	ldr	r1, [pc, #512]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002528:	4b7b      	ldr	r3, [pc, #492]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	f023 020c 	bic.w	r2, r3, #12
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	4978      	ldr	r1, [pc, #480]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0320 	and.w	r3, r3, #32
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800254a:	4b73      	ldr	r3, [pc, #460]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800254c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002550:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	496f      	ldr	r1, [pc, #444]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800256c:	4b6a      	ldr	r3, [pc, #424]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257a:	4967      	ldr	r1, [pc, #412]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800258e:	4b62      	ldr	r3, [pc, #392]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002594:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259c:	495e      	ldr	r1, [pc, #376]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00a      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025b0:	4b59      	ldr	r3, [pc, #356]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025be:	4956      	ldr	r1, [pc, #344]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025d2:	4b51      	ldr	r3, [pc, #324]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	494d      	ldr	r1, [pc, #308]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d028      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025f4:	4b48      	ldr	r3, [pc, #288]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	4945      	ldr	r1, [pc, #276]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002612:	d106      	bne.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002614:	4b40      	ldr	r3, [pc, #256]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4a3f      	ldr	r2, [pc, #252]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800261a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800261e:	60d3      	str	r3, [r2, #12]
 8002620:	e011      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800262a:	d10c      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3304      	adds	r3, #4
 8002630:	2101      	movs	r1, #1
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f882 	bl	800273c <RCCEx_PLLSAI1_Config>
 8002638:	4603      	mov	r3, r0
 800263a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800263c:	7cfb      	ldrb	r3, [r7, #19]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002642:	7cfb      	ldrb	r3, [r7, #19]
 8002644:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d028      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002652:	4b31      	ldr	r3, [pc, #196]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002658:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002660:	492d      	ldr	r1, [pc, #180]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002670:	d106      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002672:	4b29      	ldr	r3, [pc, #164]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	4a28      	ldr	r2, [pc, #160]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800267c:	60d3      	str	r3, [r2, #12]
 800267e:	e011      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002684:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002688:	d10c      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3304      	adds	r3, #4
 800268e:	2101      	movs	r1, #1
 8002690:	4618      	mov	r0, r3
 8002692:	f000 f853 	bl	800273c <RCCEx_PLLSAI1_Config>
 8002696:	4603      	mov	r3, r0
 8002698:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80026a0:	7cfb      	ldrb	r3, [r7, #19]
 80026a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d01c      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026b0:	4b19      	ldr	r3, [pc, #100]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026be:	4916      	ldr	r1, [pc, #88]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026ce:	d10c      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3304      	adds	r3, #4
 80026d4:	2102      	movs	r1, #2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f830 	bl	800273c <RCCEx_PLLSAI1_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026e0:	7cfb      	ldrb	r3, [r7, #19]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00a      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026f6:	4b08      	ldr	r3, [pc, #32]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002704:	4904      	ldr	r1, [pc, #16]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800270c:	7cbb      	ldrb	r3, [r7, #18]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000

0800271c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a04      	ldr	r2, [pc, #16]	; (8002738 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002726:	f043 0304 	orr.w	r3, r3, #4
 800272a:	6013      	str	r3, [r2, #0]
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000

0800273c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800274a:	4b74      	ldr	r3, [pc, #464]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d018      	beq.n	8002788 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002756:	4b71      	ldr	r3, [pc, #452]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f003 0203 	and.w	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	429a      	cmp	r2, r3
 8002764:	d10d      	bne.n	8002782 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
       ||
 800276a:	2b00      	cmp	r3, #0
 800276c:	d009      	beq.n	8002782 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800276e:	4b6b      	ldr	r3, [pc, #428]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	091b      	lsrs	r3, r3, #4
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
       ||
 800277e:	429a      	cmp	r2, r3
 8002780:	d047      	beq.n	8002812 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	73fb      	strb	r3, [r7, #15]
 8002786:	e044      	b.n	8002812 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d018      	beq.n	80027c2 <RCCEx_PLLSAI1_Config+0x86>
 8002790:	2b03      	cmp	r3, #3
 8002792:	d825      	bhi.n	80027e0 <RCCEx_PLLSAI1_Config+0xa4>
 8002794:	2b01      	cmp	r3, #1
 8002796:	d002      	beq.n	800279e <RCCEx_PLLSAI1_Config+0x62>
 8002798:	2b02      	cmp	r3, #2
 800279a:	d009      	beq.n	80027b0 <RCCEx_PLLSAI1_Config+0x74>
 800279c:	e020      	b.n	80027e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800279e:	4b5f      	ldr	r3, [pc, #380]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d11d      	bne.n	80027e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ae:	e01a      	b.n	80027e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027b0:	4b5a      	ldr	r3, [pc, #360]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d116      	bne.n	80027ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c0:	e013      	b.n	80027ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027c2:	4b56      	ldr	r3, [pc, #344]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10f      	bne.n	80027ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027ce:	4b53      	ldr	r3, [pc, #332]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d109      	bne.n	80027ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027de:	e006      	b.n	80027ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
      break;
 80027e4:	e004      	b.n	80027f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027e6:	bf00      	nop
 80027e8:	e002      	b.n	80027f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ea:	bf00      	nop
 80027ec:	e000      	b.n	80027f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10d      	bne.n	8002812 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027f6:	4b49      	ldr	r3, [pc, #292]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6819      	ldr	r1, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	430b      	orrs	r3, r1
 800280c:	4943      	ldr	r1, [pc, #268]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 800280e:	4313      	orrs	r3, r2
 8002810:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d17c      	bne.n	8002912 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002818:	4b40      	ldr	r3, [pc, #256]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a3f      	ldr	r2, [pc, #252]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 800281e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002822:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002824:	f7fe fbb6 	bl	8000f94 <HAL_GetTick>
 8002828:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800282a:	e009      	b.n	8002840 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800282c:	f7fe fbb2 	bl	8000f94 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d902      	bls.n	8002840 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	73fb      	strb	r3, [r7, #15]
        break;
 800283e:	e005      	b.n	800284c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002840:	4b36      	ldr	r3, [pc, #216]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1ef      	bne.n	800282c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d15f      	bne.n	8002912 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d110      	bne.n	800287a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002858:	4b30      	ldr	r3, [pc, #192]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002860:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6892      	ldr	r2, [r2, #8]
 8002868:	0211      	lsls	r1, r2, #8
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68d2      	ldr	r2, [r2, #12]
 800286e:	06d2      	lsls	r2, r2, #27
 8002870:	430a      	orrs	r2, r1
 8002872:	492a      	ldr	r1, [pc, #168]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002874:	4313      	orrs	r3, r2
 8002876:	610b      	str	r3, [r1, #16]
 8002878:	e027      	b.n	80028ca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d112      	bne.n	80028a6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002880:	4b26      	ldr	r3, [pc, #152]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002888:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6892      	ldr	r2, [r2, #8]
 8002890:	0211      	lsls	r1, r2, #8
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6912      	ldr	r2, [r2, #16]
 8002896:	0852      	lsrs	r2, r2, #1
 8002898:	3a01      	subs	r2, #1
 800289a:	0552      	lsls	r2, r2, #21
 800289c:	430a      	orrs	r2, r1
 800289e:	491f      	ldr	r1, [pc, #124]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	610b      	str	r3, [r1, #16]
 80028a4:	e011      	b.n	80028ca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028a6:	4b1d      	ldr	r3, [pc, #116]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6892      	ldr	r2, [r2, #8]
 80028b6:	0211      	lsls	r1, r2, #8
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6952      	ldr	r2, [r2, #20]
 80028bc:	0852      	lsrs	r2, r2, #1
 80028be:	3a01      	subs	r2, #1
 80028c0:	0652      	lsls	r2, r2, #25
 80028c2:	430a      	orrs	r2, r1
 80028c4:	4915      	ldr	r1, [pc, #84]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028ca:	4b14      	ldr	r3, [pc, #80]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a13      	ldr	r2, [pc, #76]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d6:	f7fe fb5d 	bl	8000f94 <HAL_GetTick>
 80028da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028dc:	e009      	b.n	80028f2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028de:	f7fe fb59 	bl	8000f94 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d902      	bls.n	80028f2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	73fb      	strb	r3, [r7, #15]
          break;
 80028f0:	e005      	b.n	80028fe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028f2:	4b0a      	ldr	r3, [pc, #40]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0ef      	beq.n	80028de <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d106      	bne.n	8002912 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002904:	4b05      	ldr	r3, [pc, #20]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	4903      	ldr	r1, [pc, #12]	; (800291c <RCCEx_PLLSAI1_Config+0x1e0>)
 800290e:	4313      	orrs	r3, r2
 8002910:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002912:	7bfb      	ldrb	r3, [r7, #15]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40021000 	.word	0x40021000

08002920 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e049      	b.n	80029c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d106      	bne.n	800294c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f841 	bl	80029ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3304      	adds	r3, #4
 800295c:	4619      	mov	r1, r3
 800295e:	4610      	mov	r0, r2
 8002960:	f000 f9be 	bl	8002ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d001      	beq.n	80029fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e03b      	b.n	8002a74 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d009      	beq.n	8002a32 <HAL_TIM_Base_Start_IT+0x4e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a26:	d004      	beq.n	8002a32 <HAL_TIM_Base_Start_IT+0x4e>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a15      	ldr	r2, [pc, #84]	; (8002a84 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d115      	bne.n	8002a5e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	4b13      	ldr	r3, [pc, #76]	; (8002a88 <HAL_TIM_Base_Start_IT+0xa4>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2b06      	cmp	r3, #6
 8002a42:	d015      	beq.n	8002a70 <HAL_TIM_Base_Start_IT+0x8c>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a4a:	d011      	beq.n	8002a70 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5c:	e008      	b.n	8002a70 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0201 	orr.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	e000      	b.n	8002a72 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	40012c00 	.word	0x40012c00
 8002a84:	40014000 	.word	0x40014000
 8002a88:	00010007 	.word	0x00010007

08002a8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d020      	beq.n	8002af0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01b      	beq.n	8002af0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0202 	mvn.w	r2, #2
 8002ac0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f8e4 	bl	8002ca4 <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f8d6 	bl	8002c90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f8e7 	bl	8002cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d020      	beq.n	8002b3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01b      	beq.n	8002b3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0204 	mvn.w	r2, #4
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2202      	movs	r2, #2
 8002b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f8be 	bl	8002ca4 <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f8b0 	bl	8002c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f8c1 	bl	8002cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d020      	beq.n	8002b88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01b      	beq.n	8002b88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f06f 0208 	mvn.w	r2, #8
 8002b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2204      	movs	r2, #4
 8002b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f898 	bl	8002ca4 <HAL_TIM_IC_CaptureCallback>
 8002b74:	e005      	b.n	8002b82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f88a 	bl	8002c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f89b 	bl	8002cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d020      	beq.n	8002bd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d01b      	beq.n	8002bd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0210 	mvn.w	r2, #16
 8002ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2208      	movs	r2, #8
 8002baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f872 	bl	8002ca4 <HAL_TIM_IC_CaptureCallback>
 8002bc0:	e005      	b.n	8002bce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f864 	bl	8002c90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f875 	bl	8002cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00c      	beq.n	8002bf8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d007      	beq.n	8002bf8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f06f 0201 	mvn.w	r2, #1
 8002bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fd ff88 	bl	8000b08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00c      	beq.n	8002c1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f8d0 	bl	8002dbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00c      	beq.n	8002c40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d007      	beq.n	8002c40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f8c8 	bl	8002dd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00c      	beq.n	8002c64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d007      	beq.n	8002c64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f834 	bl	8002ccc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f003 0320 	and.w	r3, r3, #32
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00c      	beq.n	8002c88 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f003 0320 	and.w	r3, r3, #32
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d007      	beq.n	8002c88 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0220 	mvn.w	r2, #32
 8002c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f890 	bl	8002da8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c88:	bf00      	nop
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a2a      	ldr	r2, [pc, #168]	; (8002d9c <TIM_Base_SetConfig+0xbc>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d003      	beq.n	8002d00 <TIM_Base_SetConfig+0x20>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cfe:	d108      	bne.n	8002d12 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a21      	ldr	r2, [pc, #132]	; (8002d9c <TIM_Base_SetConfig+0xbc>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00b      	beq.n	8002d32 <TIM_Base_SetConfig+0x52>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d20:	d007      	beq.n	8002d32 <TIM_Base_SetConfig+0x52>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a1e      	ldr	r2, [pc, #120]	; (8002da0 <TIM_Base_SetConfig+0xc0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d003      	beq.n	8002d32 <TIM_Base_SetConfig+0x52>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a1d      	ldr	r2, [pc, #116]	; (8002da4 <TIM_Base_SetConfig+0xc4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d108      	bne.n	8002d44 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a0c      	ldr	r2, [pc, #48]	; (8002d9c <TIM_Base_SetConfig+0xbc>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d007      	beq.n	8002d80 <TIM_Base_SetConfig+0xa0>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a0b      	ldr	r2, [pc, #44]	; (8002da0 <TIM_Base_SetConfig+0xc0>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d003      	beq.n	8002d80 <TIM_Base_SetConfig+0xa0>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	; (8002da4 <TIM_Base_SetConfig+0xc4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d103      	bne.n	8002d88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	615a      	str	r2, [r3, #20]
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40012c00 	.word	0x40012c00
 8002da0:	40014000 	.word	0x40014000
 8002da4:	40014400 	.word	0x40014400

08002da8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e040      	b.n	8002e78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fd febe 	bl	8000b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2224      	movs	r2, #36	; 0x24
 8002e10:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0201 	bic.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fe48 	bl	8003ac0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fc19 	bl	8003668 <UART_SetConfig>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e01b      	b.n	8002e78 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fec7 	bl	8003c04 <UART_CheckIdleState>
 8002e76:	4603      	mov	r3, r0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08a      	sub	sp, #40	; 0x28
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e94:	2b20      	cmp	r3, #32
 8002e96:	d178      	bne.n	8002f8a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_UART_Transmit+0x24>
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e071      	b.n	8002f8c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2221      	movs	r2, #33	; 0x21
 8002eb4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eb6:	f7fe f86d 	bl	8000f94 <HAL_GetTick>
 8002eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	88fa      	ldrh	r2, [r7, #6]
 8002ec0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed4:	d108      	bne.n	8002ee8 <HAL_UART_Transmit+0x68>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d104      	bne.n	8002ee8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	61bb      	str	r3, [r7, #24]
 8002ee6:	e003      	b.n	8002ef0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ef0:	e030      	b.n	8002f54 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2180      	movs	r1, #128	; 0x80
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 ff29 	bl	8003d54 <UART_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d004      	beq.n	8002f12 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e03c      	b.n	8002f8c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10b      	bne.n	8002f30 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	881a      	ldrh	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f24:	b292      	uxth	r2, r2
 8002f26:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	3302      	adds	r3, #2
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	e008      	b.n	8002f42 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	b292      	uxth	r2, r2
 8002f3a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1c8      	bne.n	8002ef2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2200      	movs	r2, #0
 8002f68:	2140      	movs	r1, #64	; 0x40
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fef2 	bl	8003d54 <UART_WaitOnFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d004      	beq.n	8002f80 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e005      	b.n	8002f8c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e000      	b.n	8002f8c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002f8a:	2302      	movs	r3, #2
  }
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3720      	adds	r7, #32
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08a      	sub	sp, #40	; 0x28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	d137      	bne.n	800301c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <HAL_UART_Receive_IT+0x24>
 8002fb2:	88fb      	ldrh	r3, [r7, #6]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e030      	b.n	800301e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a18      	ldr	r2, [pc, #96]	; (8003028 <HAL_UART_Receive_IT+0x94>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d01f      	beq.n	800300c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d018      	beq.n	800300c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	e853 3f00 	ldrex	r3, [r3]
 8002fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	623b      	str	r3, [r7, #32]
 8002ffa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffc:	69f9      	ldr	r1, [r7, #28]
 8002ffe:	6a3a      	ldr	r2, [r7, #32]
 8003000:	e841 2300 	strex	r3, r2, [r1]
 8003004:	61bb      	str	r3, [r7, #24]
   return(result);
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1e6      	bne.n	8002fda <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	461a      	mov	r2, r3
 8003010:	68b9      	ldr	r1, [r7, #8]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 ff06 	bl	8003e24 <UART_Start_Receive_IT>
 8003018:	4603      	mov	r3, r0
 800301a:	e000      	b.n	800301e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800301c:	2302      	movs	r3, #2
  }
}
 800301e:	4618      	mov	r0, r3
 8003020:	3728      	adds	r7, #40	; 0x28
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40008000 	.word	0x40008000

0800302c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b0ba      	sub	sp, #232	; 0xe8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003052:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003056:	f640 030f 	movw	r3, #2063	; 0x80f
 800305a:	4013      	ands	r3, r2
 800305c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d115      	bne.n	8003094 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003068:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00f      	beq.n	8003094 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	2b00      	cmp	r3, #0
 800307e:	d009      	beq.n	8003094 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 82ae 	beq.w	80035e6 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	4798      	blx	r3
      }
      return;
 8003092:	e2a8      	b.n	80035e6 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003094:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8117 	beq.w	80032cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800309e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80030aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80030ae:	4b85      	ldr	r3, [pc, #532]	; (80032c4 <HAL_UART_IRQHandler+0x298>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 810a 	beq.w	80032cc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d011      	beq.n	80030e8 <HAL_UART_IRQHandler+0xbc>
 80030c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00b      	beq.n	80030e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2201      	movs	r2, #1
 80030d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030de:	f043 0201 	orr.w	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d011      	beq.n	8003118 <HAL_UART_IRQHandler+0xec>
 80030f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00b      	beq.n	8003118 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2202      	movs	r2, #2
 8003106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800310e:	f043 0204 	orr.w	r2, r3, #4
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d011      	beq.n	8003148 <HAL_UART_IRQHandler+0x11c>
 8003124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00b      	beq.n	8003148 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2204      	movs	r2, #4
 8003136:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800313e:	f043 0202 	orr.w	r2, r3, #2
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314c:	f003 0308 	and.w	r3, r3, #8
 8003150:	2b00      	cmp	r3, #0
 8003152:	d017      	beq.n	8003184 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b00      	cmp	r3, #0
 800315e:	d105      	bne.n	800316c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003164:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00b      	beq.n	8003184 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2208      	movs	r2, #8
 8003172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800317a:	f043 0208 	orr.w	r2, r3, #8
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800318c:	2b00      	cmp	r3, #0
 800318e:	d012      	beq.n	80031b6 <HAL_UART_IRQHandler+0x18a>
 8003190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003194:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00c      	beq.n	80031b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ac:	f043 0220 	orr.w	r2, r3, #32
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 8214 	beq.w	80035ea <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031c6:	f003 0320 	and.w	r3, r3, #32
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00d      	beq.n	80031ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d007      	beq.n	80031ea <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fe:	2b40      	cmp	r3, #64	; 0x40
 8003200:	d005      	beq.n	800320e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003202:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003206:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800320a:	2b00      	cmp	r3, #0
 800320c:	d04f      	beq.n	80032ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fece 	bl	8003fb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800321e:	2b40      	cmp	r3, #64	; 0x40
 8003220:	d141      	bne.n	80032a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3308      	adds	r3, #8
 8003228:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003230:	e853 3f00 	ldrex	r3, [r3]
 8003234:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003238:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800323c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3308      	adds	r3, #8
 800324a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800324e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003252:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003256:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800325a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800325e:	e841 2300 	strex	r3, r2, [r1]
 8003262:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003266:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1d9      	bne.n	8003222 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003272:	2b00      	cmp	r3, #0
 8003274:	d013      	beq.n	800329e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327a:	4a13      	ldr	r2, [pc, #76]	; (80032c8 <HAL_UART_IRQHandler+0x29c>)
 800327c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003282:	4618      	mov	r0, r3
 8003284:	f7fd ffb2 	bl	80011ec <HAL_DMA_Abort_IT>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d017      	beq.n	80032be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003298:	4610      	mov	r0, r2
 800329a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329c:	e00f      	b.n	80032be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f9b8 	bl	8003614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a4:	e00b      	b.n	80032be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f9b4 	bl	8003614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ac:	e007      	b.n	80032be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f9b0 	bl	8003614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80032bc:	e195      	b.n	80035ea <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032be:	bf00      	nop
    return;
 80032c0:	e193      	b.n	80035ea <HAL_UART_IRQHandler+0x5be>
 80032c2:	bf00      	nop
 80032c4:	04000120 	.word	0x04000120
 80032c8:	08004079 	.word	0x08004079

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	f040 814e 	bne.w	8003572 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8147 	beq.w	8003572 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 8140 	beq.w	8003572 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2210      	movs	r2, #16
 80032f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003304:	2b40      	cmp	r3, #64	; 0x40
 8003306:	f040 80b8 	bne.w	800347a <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003316:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 8167 	beq.w	80035ee <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003326:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800332a:	429a      	cmp	r2, r3
 800332c:	f080 815f 	bcs.w	80035ee <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003336:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b00      	cmp	r3, #0
 8003348:	f040 8086 	bne.w	8003458 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003354:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003360:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003368:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003376:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800337a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003382:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003386:	e841 2300 	strex	r3, r2, [r1]
 800338a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800338e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1da      	bne.n	800334c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3308      	adds	r3, #8
 800339c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033a0:	e853 3f00 	ldrex	r3, [r3]
 80033a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033a8:	f023 0301 	bic.w	r3, r3, #1
 80033ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3308      	adds	r3, #8
 80033b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e1      	bne.n	8003396 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3308      	adds	r3, #8
 80033d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3308      	adds	r3, #8
 80033f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1e3      	bne.n	80033d2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2220      	movs	r2, #32
 800340e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003428:	f023 0310 	bic.w	r3, r3, #16
 800342c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	461a      	mov	r2, r3
 8003436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800343a:	65bb      	str	r3, [r7, #88]	; 0x58
 800343c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003440:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003442:	e841 2300 	strex	r3, r2, [r1]
 8003446:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1e4      	bne.n	8003418 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003452:	4618      	mov	r0, r3
 8003454:	f7fd fe8c 	bl	8001170 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800346a:	b29b      	uxth	r3, r3
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	b29b      	uxth	r3, r3
 8003470:	4619      	mov	r1, r3
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f8d8 	bl	8003628 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003478:	e0b9      	b.n	80035ee <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003486:	b29b      	uxth	r3, r3
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003494:	b29b      	uxth	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 80ab 	beq.w	80035f2 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 800349c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80a6 	beq.w	80035f2 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ae:	e853 3f00 	ldrex	r3, [r3]
 80034b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	461a      	mov	r2, r3
 80034c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034c8:	647b      	str	r3, [r7, #68]	; 0x44
 80034ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034d0:	e841 2300 	strex	r3, r2, [r1]
 80034d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1e4      	bne.n	80034a6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3308      	adds	r3, #8
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	e853 3f00 	ldrex	r3, [r3]
 80034ea:	623b      	str	r3, [r7, #32]
   return(result);
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	f023 0301 	bic.w	r3, r3, #1
 80034f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3308      	adds	r3, #8
 80034fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003500:	633a      	str	r2, [r7, #48]	; 0x30
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003504:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003508:	e841 2300 	strex	r3, r2, [r1]
 800350c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800350e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1e3      	bne.n	80034dc <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2220      	movs	r2, #32
 8003518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	e853 3f00 	ldrex	r3, [r3]
 8003534:	60fb      	str	r3, [r7, #12]
   return(result);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f023 0310 	bic.w	r3, r3, #16
 800353c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800354a:	61fb      	str	r3, [r7, #28]
 800354c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354e:	69b9      	ldr	r1, [r7, #24]
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	e841 2300 	strex	r3, r2, [r1]
 8003556:	617b      	str	r3, [r7, #20]
   return(result);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1e4      	bne.n	8003528 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2202      	movs	r2, #2
 8003562:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003564:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003568:	4619      	mov	r1, r3
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f85c 	bl	8003628 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003570:	e03f      	b.n	80035f2 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00e      	beq.n	800359c <HAL_UART_IRQHandler+0x570>
 800357e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d008      	beq.n	800359c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003592:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 ff6b 	bl	8004470 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800359a:	e02d      	b.n	80035f8 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800359c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00e      	beq.n	80035c6 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01c      	beq.n	80035f6 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	4798      	blx	r3
    }
    return;
 80035c4:	e017      	b.n	80035f6 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d012      	beq.n	80035f8 <HAL_UART_IRQHandler+0x5cc>
 80035d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00c      	beq.n	80035f8 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fd60 	bl	80040a4 <UART_EndTransmit_IT>
    return;
 80035e4:	e008      	b.n	80035f8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80035e6:	bf00      	nop
 80035e8:	e006      	b.n	80035f8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80035ea:	bf00      	nop
 80035ec:	e004      	b.n	80035f8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80035ee:	bf00      	nop
 80035f0:	e002      	b.n	80035f8 <HAL_UART_IRQHandler+0x5cc>
      return;
 80035f2:	bf00      	nop
 80035f4:	e000      	b.n	80035f8 <HAL_UART_IRQHandler+0x5cc>
    return;
 80035f6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80035f8:	37e8      	adds	r7, #232	; 0xe8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop

08003600 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800364c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003654:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4313      	orrs	r3, r2
}
 800365c:	4618      	mov	r0, r3
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800366c:	b08a      	sub	sp, #40	; 0x28
 800366e:	af00      	add	r7, sp, #0
 8003670:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	431a      	orrs	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	431a      	orrs	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	4313      	orrs	r3, r2
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4bb4      	ldr	r3, [pc, #720]	; (8003968 <UART_SetConfig+0x300>)
 8003698:	4013      	ands	r3, r2
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4aa9      	ldr	r2, [pc, #676]	; (800396c <UART_SetConfig+0x304>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d004      	beq.n	80036d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d0:	4313      	orrs	r3, r2
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e4:	430a      	orrs	r2, r1
 80036e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4aa0      	ldr	r2, [pc, #640]	; (8003970 <UART_SetConfig+0x308>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d126      	bne.n	8003740 <UART_SetConfig+0xd8>
 80036f2:	4ba0      	ldr	r3, [pc, #640]	; (8003974 <UART_SetConfig+0x30c>)
 80036f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d81b      	bhi.n	8003738 <UART_SetConfig+0xd0>
 8003700:	a201      	add	r2, pc, #4	; (adr r2, 8003708 <UART_SetConfig+0xa0>)
 8003702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003706:	bf00      	nop
 8003708:	08003719 	.word	0x08003719
 800370c:	08003729 	.word	0x08003729
 8003710:	08003721 	.word	0x08003721
 8003714:	08003731 	.word	0x08003731
 8003718:	2301      	movs	r3, #1
 800371a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800371e:	e080      	b.n	8003822 <UART_SetConfig+0x1ba>
 8003720:	2302      	movs	r3, #2
 8003722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003726:	e07c      	b.n	8003822 <UART_SetConfig+0x1ba>
 8003728:	2304      	movs	r3, #4
 800372a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800372e:	e078      	b.n	8003822 <UART_SetConfig+0x1ba>
 8003730:	2308      	movs	r3, #8
 8003732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003736:	e074      	b.n	8003822 <UART_SetConfig+0x1ba>
 8003738:	2310      	movs	r3, #16
 800373a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800373e:	e070      	b.n	8003822 <UART_SetConfig+0x1ba>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a8c      	ldr	r2, [pc, #560]	; (8003978 <UART_SetConfig+0x310>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d138      	bne.n	80037bc <UART_SetConfig+0x154>
 800374a:	4b8a      	ldr	r3, [pc, #552]	; (8003974 <UART_SetConfig+0x30c>)
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003750:	f003 030c 	and.w	r3, r3, #12
 8003754:	2b0c      	cmp	r3, #12
 8003756:	d82d      	bhi.n	80037b4 <UART_SetConfig+0x14c>
 8003758:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <UART_SetConfig+0xf8>)
 800375a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375e:	bf00      	nop
 8003760:	08003795 	.word	0x08003795
 8003764:	080037b5 	.word	0x080037b5
 8003768:	080037b5 	.word	0x080037b5
 800376c:	080037b5 	.word	0x080037b5
 8003770:	080037a5 	.word	0x080037a5
 8003774:	080037b5 	.word	0x080037b5
 8003778:	080037b5 	.word	0x080037b5
 800377c:	080037b5 	.word	0x080037b5
 8003780:	0800379d 	.word	0x0800379d
 8003784:	080037b5 	.word	0x080037b5
 8003788:	080037b5 	.word	0x080037b5
 800378c:	080037b5 	.word	0x080037b5
 8003790:	080037ad 	.word	0x080037ad
 8003794:	2300      	movs	r3, #0
 8003796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800379a:	e042      	b.n	8003822 <UART_SetConfig+0x1ba>
 800379c:	2302      	movs	r3, #2
 800379e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a2:	e03e      	b.n	8003822 <UART_SetConfig+0x1ba>
 80037a4:	2304      	movs	r3, #4
 80037a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037aa:	e03a      	b.n	8003822 <UART_SetConfig+0x1ba>
 80037ac:	2308      	movs	r3, #8
 80037ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b2:	e036      	b.n	8003822 <UART_SetConfig+0x1ba>
 80037b4:	2310      	movs	r3, #16
 80037b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ba:	e032      	b.n	8003822 <UART_SetConfig+0x1ba>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a6a      	ldr	r2, [pc, #424]	; (800396c <UART_SetConfig+0x304>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d12a      	bne.n	800381c <UART_SetConfig+0x1b4>
 80037c6:	4b6b      	ldr	r3, [pc, #428]	; (8003974 <UART_SetConfig+0x30c>)
 80037c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037d4:	d01a      	beq.n	800380c <UART_SetConfig+0x1a4>
 80037d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037da:	d81b      	bhi.n	8003814 <UART_SetConfig+0x1ac>
 80037dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e0:	d00c      	beq.n	80037fc <UART_SetConfig+0x194>
 80037e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e6:	d815      	bhi.n	8003814 <UART_SetConfig+0x1ac>
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <UART_SetConfig+0x18c>
 80037ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f0:	d008      	beq.n	8003804 <UART_SetConfig+0x19c>
 80037f2:	e00f      	b.n	8003814 <UART_SetConfig+0x1ac>
 80037f4:	2300      	movs	r3, #0
 80037f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037fa:	e012      	b.n	8003822 <UART_SetConfig+0x1ba>
 80037fc:	2302      	movs	r3, #2
 80037fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003802:	e00e      	b.n	8003822 <UART_SetConfig+0x1ba>
 8003804:	2304      	movs	r3, #4
 8003806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800380a:	e00a      	b.n	8003822 <UART_SetConfig+0x1ba>
 800380c:	2308      	movs	r3, #8
 800380e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003812:	e006      	b.n	8003822 <UART_SetConfig+0x1ba>
 8003814:	2310      	movs	r3, #16
 8003816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800381a:	e002      	b.n	8003822 <UART_SetConfig+0x1ba>
 800381c:	2310      	movs	r3, #16
 800381e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a51      	ldr	r2, [pc, #324]	; (800396c <UART_SetConfig+0x304>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d17a      	bne.n	8003922 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800382c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003830:	2b08      	cmp	r3, #8
 8003832:	d824      	bhi.n	800387e <UART_SetConfig+0x216>
 8003834:	a201      	add	r2, pc, #4	; (adr r2, 800383c <UART_SetConfig+0x1d4>)
 8003836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383a:	bf00      	nop
 800383c:	08003861 	.word	0x08003861
 8003840:	0800387f 	.word	0x0800387f
 8003844:	08003869 	.word	0x08003869
 8003848:	0800387f 	.word	0x0800387f
 800384c:	0800386f 	.word	0x0800386f
 8003850:	0800387f 	.word	0x0800387f
 8003854:	0800387f 	.word	0x0800387f
 8003858:	0800387f 	.word	0x0800387f
 800385c:	08003877 	.word	0x08003877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003860:	f7fe fca8 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8003864:	61f8      	str	r0, [r7, #28]
        break;
 8003866:	e010      	b.n	800388a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003868:	4b44      	ldr	r3, [pc, #272]	; (800397c <UART_SetConfig+0x314>)
 800386a:	61fb      	str	r3, [r7, #28]
        break;
 800386c:	e00d      	b.n	800388a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800386e:	f7fe fc09 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8003872:	61f8      	str	r0, [r7, #28]
        break;
 8003874:	e009      	b.n	800388a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800387a:	61fb      	str	r3, [r7, #28]
        break;
 800387c:	e005      	b.n	800388a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003888:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8107 	beq.w	8003aa0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4413      	add	r3, r2
 800389c:	69fa      	ldr	r2, [r7, #28]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d305      	bcc.n	80038ae <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d903      	bls.n	80038b6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038b4:	e0f4      	b.n	8003aa0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	2200      	movs	r2, #0
 80038ba:	461c      	mov	r4, r3
 80038bc:	4615      	mov	r5, r2
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	022b      	lsls	r3, r5, #8
 80038c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038cc:	0222      	lsls	r2, r4, #8
 80038ce:	68f9      	ldr	r1, [r7, #12]
 80038d0:	6849      	ldr	r1, [r1, #4]
 80038d2:	0849      	lsrs	r1, r1, #1
 80038d4:	2000      	movs	r0, #0
 80038d6:	4688      	mov	r8, r1
 80038d8:	4681      	mov	r9, r0
 80038da:	eb12 0a08 	adds.w	sl, r2, r8
 80038de:	eb43 0b09 	adc.w	fp, r3, r9
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	603b      	str	r3, [r7, #0]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038f0:	4650      	mov	r0, sl
 80038f2:	4659      	mov	r1, fp
 80038f4:	f7fc fcbc 	bl	8000270 <__aeabi_uldivmod>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4613      	mov	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003906:	d308      	bcc.n	800391a <UART_SetConfig+0x2b2>
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800390e:	d204      	bcs.n	800391a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	60da      	str	r2, [r3, #12]
 8003918:	e0c2      	b.n	8003aa0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003920:	e0be      	b.n	8003aa0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800392a:	d16a      	bne.n	8003a02 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800392c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003930:	2b08      	cmp	r3, #8
 8003932:	d834      	bhi.n	800399e <UART_SetConfig+0x336>
 8003934:	a201      	add	r2, pc, #4	; (adr r2, 800393c <UART_SetConfig+0x2d4>)
 8003936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393a:	bf00      	nop
 800393c:	08003961 	.word	0x08003961
 8003940:	08003981 	.word	0x08003981
 8003944:	08003989 	.word	0x08003989
 8003948:	0800399f 	.word	0x0800399f
 800394c:	0800398f 	.word	0x0800398f
 8003950:	0800399f 	.word	0x0800399f
 8003954:	0800399f 	.word	0x0800399f
 8003958:	0800399f 	.word	0x0800399f
 800395c:	08003997 	.word	0x08003997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003960:	f7fe fc28 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8003964:	61f8      	str	r0, [r7, #28]
        break;
 8003966:	e020      	b.n	80039aa <UART_SetConfig+0x342>
 8003968:	efff69f3 	.word	0xefff69f3
 800396c:	40008000 	.word	0x40008000
 8003970:	40013800 	.word	0x40013800
 8003974:	40021000 	.word	0x40021000
 8003978:	40004400 	.word	0x40004400
 800397c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003980:	f7fe fc2e 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 8003984:	61f8      	str	r0, [r7, #28]
        break;
 8003986:	e010      	b.n	80039aa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003988:	4b4c      	ldr	r3, [pc, #304]	; (8003abc <UART_SetConfig+0x454>)
 800398a:	61fb      	str	r3, [r7, #28]
        break;
 800398c:	e00d      	b.n	80039aa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800398e:	f7fe fb79 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8003992:	61f8      	str	r0, [r7, #28]
        break;
 8003994:	e009      	b.n	80039aa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800399a:	61fb      	str	r3, [r7, #28]
        break;
 800399c:	e005      	b.n	80039aa <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d077      	beq.n	8003aa0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	005a      	lsls	r2, r3, #1
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	085b      	lsrs	r3, r3, #1
 80039ba:	441a      	add	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b0f      	cmp	r3, #15
 80039ca:	d916      	bls.n	80039fa <UART_SetConfig+0x392>
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d2:	d212      	bcs.n	80039fa <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	f023 030f 	bic.w	r3, r3, #15
 80039dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	085b      	lsrs	r3, r3, #1
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	8afb      	ldrh	r3, [r7, #22]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	8afa      	ldrh	r2, [r7, #22]
 80039f6:	60da      	str	r2, [r3, #12]
 80039f8:	e052      	b.n	8003aa0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a00:	e04e      	b.n	8003aa0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d827      	bhi.n	8003a5a <UART_SetConfig+0x3f2>
 8003a0a:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <UART_SetConfig+0x3a8>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a35 	.word	0x08003a35
 8003a14:	08003a3d 	.word	0x08003a3d
 8003a18:	08003a45 	.word	0x08003a45
 8003a1c:	08003a5b 	.word	0x08003a5b
 8003a20:	08003a4b 	.word	0x08003a4b
 8003a24:	08003a5b 	.word	0x08003a5b
 8003a28:	08003a5b 	.word	0x08003a5b
 8003a2c:	08003a5b 	.word	0x08003a5b
 8003a30:	08003a53 	.word	0x08003a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a34:	f7fe fbbe 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8003a38:	61f8      	str	r0, [r7, #28]
        break;
 8003a3a:	e014      	b.n	8003a66 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a3c:	f7fe fbd0 	bl	80021e0 <HAL_RCC_GetPCLK2Freq>
 8003a40:	61f8      	str	r0, [r7, #28]
        break;
 8003a42:	e010      	b.n	8003a66 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a44:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <UART_SetConfig+0x454>)
 8003a46:	61fb      	str	r3, [r7, #28]
        break;
 8003a48:	e00d      	b.n	8003a66 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a4a:	f7fe fb1b 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8003a4e:	61f8      	str	r0, [r7, #28]
        break;
 8003a50:	e009      	b.n	8003a66 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a56:	61fb      	str	r3, [r7, #28]
        break;
 8003a58:	e005      	b.n	8003a66 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a64:	bf00      	nop
    }

    if (pclk != 0U)
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d019      	beq.n	8003aa0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	085a      	lsrs	r2, r3, #1
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	441a      	add	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	2b0f      	cmp	r3, #15
 8003a84:	d909      	bls.n	8003a9a <UART_SetConfig+0x432>
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8c:	d205      	bcs.n	8003a9a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	60da      	str	r2, [r3, #12]
 8003a98:	e002      	b.n	8003aa0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003aac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3728      	adds	r7, #40	; 0x28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aba:	bf00      	nop
 8003abc:	00f42400 	.word	0x00f42400

08003ac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01a      	beq.n	8003bd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bbe:	d10a      	bne.n	8003bd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	605a      	str	r2, [r3, #4]
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b098      	sub	sp, #96	; 0x60
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c14:	f7fd f9be 	bl	8000f94 <HAL_GetTick>
 8003c18:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d12e      	bne.n	8003c86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c30:	2200      	movs	r2, #0
 8003c32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f88c 	bl	8003d54 <UART_WaitOnFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d021      	beq.n	8003c86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4a:	e853 3f00 	ldrex	r3, [r3]
 8003c4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c56:	653b      	str	r3, [r7, #80]	; 0x50
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c60:	647b      	str	r3, [r7, #68]	; 0x44
 8003c62:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c68:	e841 2300 	strex	r3, r2, [r1]
 8003c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1e6      	bne.n	8003c42 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e062      	b.n	8003d4c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d149      	bne.n	8003d28 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f856 	bl	8003d54 <UART_WaitOnFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d03c      	beq.n	8003d28 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb6:	e853 3f00 	ldrex	r3, [r3]
 8003cba:	623b      	str	r3, [r7, #32]
   return(result);
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ccc:	633b      	str	r3, [r7, #48]	; 0x30
 8003cce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cd4:	e841 2300 	strex	r3, r2, [r1]
 8003cd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1e6      	bne.n	8003cae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	e853 3f00 	ldrex	r3, [r3]
 8003cee:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0301 	bic.w	r3, r3, #1
 8003cf6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3308      	adds	r3, #8
 8003cfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d00:	61fa      	str	r2, [r7, #28]
 8003d02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d04:	69b9      	ldr	r1, [r7, #24]
 8003d06:	69fa      	ldr	r2, [r7, #28]
 8003d08:	e841 2300 	strex	r3, r2, [r1]
 8003d0c:	617b      	str	r3, [r7, #20]
   return(result);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1e5      	bne.n	8003ce0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e011      	b.n	8003d4c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3758      	adds	r7, #88	; 0x58
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	4613      	mov	r3, r2
 8003d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d64:	e049      	b.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6c:	d045      	beq.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d6e:	f7fd f911 	bl	8000f94 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d302      	bcc.n	8003d84 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e048      	b.n	8003e1a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d031      	beq.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d110      	bne.n	8003dc6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2208      	movs	r2, #8
 8003daa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f000 f8ff 	bl	8003fb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2208      	movs	r2, #8
 8003db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e029      	b.n	8003e1a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd4:	d111      	bne.n	8003dfa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f8e5 	bl	8003fb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e00f      	b.n	8003e1a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	4013      	ands	r3, r2
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	bf0c      	ite	eq
 8003e0a:	2301      	moveq	r3, #1
 8003e0c:	2300      	movne	r3, #0
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	461a      	mov	r2, r3
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d0a6      	beq.n	8003d66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b097      	sub	sp, #92	; 0x5c
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	88fa      	ldrh	r2, [r7, #6]
 8003e3c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	88fa      	ldrh	r2, [r7, #6]
 8003e44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e56:	d10e      	bne.n	8003e76 <UART_Start_Receive_IT+0x52>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d105      	bne.n	8003e6c <UART_Start_Receive_IT+0x48>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e6a:	e02d      	b.n	8003ec8 <UART_Start_Receive_IT+0xa4>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	22ff      	movs	r2, #255	; 0xff
 8003e70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e74:	e028      	b.n	8003ec8 <UART_Start_Receive_IT+0xa4>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10d      	bne.n	8003e9a <UART_Start_Receive_IT+0x76>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d104      	bne.n	8003e90 <UART_Start_Receive_IT+0x6c>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	22ff      	movs	r2, #255	; 0xff
 8003e8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e8e:	e01b      	b.n	8003ec8 <UART_Start_Receive_IT+0xa4>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	227f      	movs	r2, #127	; 0x7f
 8003e94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e98:	e016      	b.n	8003ec8 <UART_Start_Receive_IT+0xa4>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ea2:	d10d      	bne.n	8003ec0 <UART_Start_Receive_IT+0x9c>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d104      	bne.n	8003eb6 <UART_Start_Receive_IT+0x92>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	227f      	movs	r2, #127	; 0x7f
 8003eb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003eb4:	e008      	b.n	8003ec8 <UART_Start_Receive_IT+0xa4>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	223f      	movs	r2, #63	; 0x3f
 8003eba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ebe:	e003      	b.n	8003ec8 <UART_Start_Receive_IT+0xa4>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2222      	movs	r2, #34	; 0x22
 8003ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3308      	adds	r3, #8
 8003ede:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee2:	e853 3f00 	ldrex	r3, [r3]
 8003ee6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	657b      	str	r3, [r7, #84]	; 0x54
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ef8:	64ba      	str	r2, [r7, #72]	; 0x48
 8003efa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003efe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f00:	e841 2300 	strex	r3, r2, [r1]
 8003f04:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1e5      	bne.n	8003ed8 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f14:	d107      	bne.n	8003f26 <UART_Start_Receive_IT+0x102>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d103      	bne.n	8003f26 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4a21      	ldr	r2, [pc, #132]	; (8003fa8 <UART_Start_Receive_IT+0x184>)
 8003f22:	669a      	str	r2, [r3, #104]	; 0x68
 8003f24:	e002      	b.n	8003f2c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4a20      	ldr	r2, [pc, #128]	; (8003fac <UART_Start_Receive_IT+0x188>)
 8003f2a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d019      	beq.n	8003f68 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3c:	e853 3f00 	ldrex	r3, [r3]
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003f48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f52:	637b      	str	r3, [r7, #52]	; 0x34
 8003f54:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1e6      	bne.n	8003f34 <UART_Start_Receive_IT+0x110>
 8003f66:	e018      	b.n	8003f9a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	613b      	str	r3, [r7, #16]
   return(result);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f043 0320 	orr.w	r3, r3, #32
 8003f7c:	653b      	str	r3, [r7, #80]	; 0x50
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f86:	623b      	str	r3, [r7, #32]
 8003f88:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8a:	69f9      	ldr	r1, [r7, #28]
 8003f8c:	6a3a      	ldr	r2, [r7, #32]
 8003f8e:	e841 2300 	strex	r3, r2, [r1]
 8003f92:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1e6      	bne.n	8003f68 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	375c      	adds	r7, #92	; 0x5c
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	080042b5 	.word	0x080042b5
 8003fac:	080040f9 	.word	0x080040f9

08003fb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b095      	sub	sp, #84	; 0x54
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd6:	643b      	str	r3, [r7, #64]	; 0x40
 8003fd8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fde:	e841 2300 	strex	r3, r2, [r1]
 8003fe2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1e6      	bne.n	8003fb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3308      	adds	r3, #8
 8003ff0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	64bb      	str	r3, [r7, #72]	; 0x48
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3308      	adds	r3, #8
 8004008:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800400a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800400c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e5      	bne.n	8003fea <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004022:	2b01      	cmp	r3, #1
 8004024:	d118      	bne.n	8004058 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	e853 3f00 	ldrex	r3, [r3]
 8004032:	60bb      	str	r3, [r7, #8]
   return(result);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f023 0310 	bic.w	r3, r3, #16
 800403a:	647b      	str	r3, [r7, #68]	; 0x44
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004048:	6979      	ldr	r1, [r7, #20]
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	e841 2300 	strex	r3, r2, [r1]
 8004050:	613b      	str	r3, [r7, #16]
   return(result);
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e6      	bne.n	8004026 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800406c:	bf00      	nop
 800406e:	3754      	adds	r7, #84	; 0x54
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004084:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f7ff fabc 	bl	8003614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800409c:	bf00      	nop
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040c0:	61fb      	str	r3, [r7, #28]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	6979      	ldr	r1, [r7, #20]
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	613b      	str	r3, [r7, #16]
   return(result);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e6      	bne.n	80040ac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2220      	movs	r2, #32
 80040e2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff fa88 	bl	8003600 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040f0:	bf00      	nop
 80040f2:	3720      	adds	r7, #32
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b09c      	sub	sp, #112	; 0x70
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004106:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004110:	2b22      	cmp	r3, #34	; 0x22
 8004112:	f040 80be 	bne.w	8004292 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800411c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004120:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004124:	b2d9      	uxtb	r1, r3
 8004126:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800412a:	b2da      	uxtb	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004130:	400a      	ands	r2, r1
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	f040 80a3 	bne.w	80042a6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800416e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004170:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004174:	66bb      	str	r3, [r7, #104]	; 0x68
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800417e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004180:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004184:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800418c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e6      	bne.n	8004160 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3308      	adds	r3, #8
 8004198:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a4:	f023 0301 	bic.w	r3, r3, #1
 80041a8:	667b      	str	r3, [r7, #100]	; 0x64
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3308      	adds	r3, #8
 80041b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80041b2:	647a      	str	r2, [r7, #68]	; 0x44
 80041b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e5      	bne.n	8004192 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a34      	ldr	r2, [pc, #208]	; (80042b0 <UART_RxISR_8BIT+0x1b8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d01f      	beq.n	8004224 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d018      	beq.n	8004224 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	e853 3f00 	ldrex	r3, [r3]
 80041fe:	623b      	str	r3, [r7, #32]
   return(result);
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004206:	663b      	str	r3, [r7, #96]	; 0x60
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004210:	633b      	str	r3, [r7, #48]	; 0x30
 8004212:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004214:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004218:	e841 2300 	strex	r3, r2, [r1]
 800421c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1e6      	bne.n	80041f2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004228:	2b01      	cmp	r3, #1
 800422a:	d12e      	bne.n	800428a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0310 	bic.w	r3, r3, #16
 8004246:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	69b9      	ldr	r1, [r7, #24]
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	617b      	str	r3, [r7, #20]
   return(result);
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e6      	bne.n	8004232 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f003 0310 	and.w	r3, r3, #16
 800426e:	2b10      	cmp	r3, #16
 8004270:	d103      	bne.n	800427a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2210      	movs	r2, #16
 8004278:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004280:	4619      	mov	r1, r3
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff f9d0 	bl	8003628 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004288:	e00d      	b.n	80042a6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fc fb16 	bl	80008bc <HAL_UART_RxCpltCallback>
}
 8004290:	e009      	b.n	80042a6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	8b1b      	ldrh	r3, [r3, #24]
 8004298:	b29a      	uxth	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0208 	orr.w	r2, r2, #8
 80042a2:	b292      	uxth	r2, r2
 80042a4:	831a      	strh	r2, [r3, #24]
}
 80042a6:	bf00      	nop
 80042a8:	3770      	adds	r7, #112	; 0x70
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40008000 	.word	0x40008000

080042b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b09c      	sub	sp, #112	; 0x70
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042c2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042cc:	2b22      	cmp	r3, #34	; 0x22
 80042ce:	f040 80be 	bne.w	800444e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80042d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80042e2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80042e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80042ea:	4013      	ands	r3, r2
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f6:	1c9a      	adds	r2, r3, #2
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004302:	b29b      	uxth	r3, r3
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	f040 80a3 	bne.w	8004462 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800432a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800432c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004330:	667b      	str	r3, [r7, #100]	; 0x64
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800433a:	657b      	str	r3, [r7, #84]	; 0x54
 800433c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004340:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e6      	bne.n	800431c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3308      	adds	r3, #8
 8004354:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	663b      	str	r3, [r7, #96]	; 0x60
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3308      	adds	r3, #8
 800436c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800436e:	643a      	str	r2, [r7, #64]	; 0x40
 8004370:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004374:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004376:	e841 2300 	strex	r3, r2, [r1]
 800437a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800437c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e5      	bne.n	800434e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2220      	movs	r2, #32
 8004386:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a34      	ldr	r2, [pc, #208]	; (800446c <UART_RxISR_16BIT+0x1b8>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d01f      	beq.n	80043e0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d018      	beq.n	80043e0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ce:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e6      	bne.n	80043ae <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d12e      	bne.n	8004446 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f023 0310 	bic.w	r3, r3, #16
 8004402:	65bb      	str	r3, [r7, #88]	; 0x58
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800440c:	61bb      	str	r3, [r7, #24]
 800440e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	6979      	ldr	r1, [r7, #20]
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	613b      	str	r3, [r7, #16]
   return(result);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e6      	bne.n	80043ee <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f003 0310 	and.w	r3, r3, #16
 800442a:	2b10      	cmp	r3, #16
 800442c:	d103      	bne.n	8004436 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2210      	movs	r2, #16
 8004434:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800443c:	4619      	mov	r1, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7ff f8f2 	bl	8003628 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004444:	e00d      	b.n	8004462 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fc fa38 	bl	80008bc <HAL_UART_RxCpltCallback>
}
 800444c:	e009      	b.n	8004462 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	8b1b      	ldrh	r3, [r3, #24]
 8004454:	b29a      	uxth	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0208 	orr.w	r2, r2, #8
 800445e:	b292      	uxth	r2, r2
 8004460:	831a      	strh	r2, [r3, #24]
}
 8004462:	bf00      	nop
 8004464:	3770      	adds	r7, #112	; 0x70
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40008000 	.word	0x40008000

08004470 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <__NVIC_SetPriority>:
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	6039      	str	r1, [r7, #0]
 800448e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004494:	2b00      	cmp	r3, #0
 8004496:	db0a      	blt.n	80044ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	b2da      	uxtb	r2, r3
 800449c:	490c      	ldr	r1, [pc, #48]	; (80044d0 <__NVIC_SetPriority+0x4c>)
 800449e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044a2:	0112      	lsls	r2, r2, #4
 80044a4:	b2d2      	uxtb	r2, r2
 80044a6:	440b      	add	r3, r1
 80044a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80044ac:	e00a      	b.n	80044c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	4908      	ldr	r1, [pc, #32]	; (80044d4 <__NVIC_SetPriority+0x50>)
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	3b04      	subs	r3, #4
 80044bc:	0112      	lsls	r2, r2, #4
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	440b      	add	r3, r1
 80044c2:	761a      	strb	r2, [r3, #24]
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	e000e100 	.word	0xe000e100
 80044d4:	e000ed00 	.word	0xe000ed00

080044d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80044dc:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <SysTick_Handler+0x1c>)
 80044de:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80044e0:	f001 ff22 	bl	8006328 <xTaskGetSchedulerState>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d001      	beq.n	80044ee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80044ea:	f002 fd0d 	bl	8006f08 <xPortSysTickHandler>
  }
}
 80044ee:	bf00      	nop
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	e000e010 	.word	0xe000e010

080044f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80044fc:	2100      	movs	r1, #0
 80044fe:	f06f 0004 	mvn.w	r0, #4
 8004502:	f7ff ffbf 	bl	8004484 <__NVIC_SetPriority>
#endif
}
 8004506:	bf00      	nop
 8004508:	bd80      	pop	{r7, pc}
	...

0800450c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004512:	f3ef 8305 	mrs	r3, IPSR
 8004516:	603b      	str	r3, [r7, #0]
  return(result);
 8004518:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800451e:	f06f 0305 	mvn.w	r3, #5
 8004522:	607b      	str	r3, [r7, #4]
 8004524:	e00c      	b.n	8004540 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <osKernelInitialize+0x44>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d105      	bne.n	800453a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800452e:	4b08      	ldr	r3, [pc, #32]	; (8004550 <osKernelInitialize+0x44>)
 8004530:	2201      	movs	r2, #1
 8004532:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004534:	2300      	movs	r3, #0
 8004536:	607b      	str	r3, [r7, #4]
 8004538:	e002      	b.n	8004540 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800453a:	f04f 33ff 	mov.w	r3, #4294967295
 800453e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004540:	687b      	ldr	r3, [r7, #4]
}
 8004542:	4618      	mov	r0, r3
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	20000194 	.word	0x20000194

08004554 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800455a:	f3ef 8305 	mrs	r3, IPSR
 800455e:	603b      	str	r3, [r7, #0]
  return(result);
 8004560:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004566:	f06f 0305 	mvn.w	r3, #5
 800456a:	607b      	str	r3, [r7, #4]
 800456c:	e010      	b.n	8004590 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800456e:	4b0b      	ldr	r3, [pc, #44]	; (800459c <osKernelStart+0x48>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d109      	bne.n	800458a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004576:	f7ff ffbf 	bl	80044f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800457a:	4b08      	ldr	r3, [pc, #32]	; (800459c <osKernelStart+0x48>)
 800457c:	2202      	movs	r2, #2
 800457e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004580:	f001 fa66 	bl	8005a50 <vTaskStartScheduler>
      stat = osOK;
 8004584:	2300      	movs	r3, #0
 8004586:	607b      	str	r3, [r7, #4]
 8004588:	e002      	b.n	8004590 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800458a:	f04f 33ff 	mov.w	r3, #4294967295
 800458e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004590:	687b      	ldr	r3, [r7, #4]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000194 	.word	0x20000194

080045a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08e      	sub	sp, #56	; 0x38
 80045a4:	af04      	add	r7, sp, #16
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045b0:	f3ef 8305 	mrs	r3, IPSR
 80045b4:	617b      	str	r3, [r7, #20]
  return(result);
 80045b6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d17e      	bne.n	80046ba <osThreadNew+0x11a>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d07b      	beq.n	80046ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80045c6:	2318      	movs	r3, #24
 80045c8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80045ce:	f04f 33ff 	mov.w	r3, #4294967295
 80045d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d045      	beq.n	8004666 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <osThreadNew+0x48>
        name = attr->name;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <osThreadNew+0x6e>
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	2b38      	cmp	r3, #56	; 0x38
 8004600:	d805      	bhi.n	800460e <osThreadNew+0x6e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <osThreadNew+0x72>
        return (NULL);
 800460e:	2300      	movs	r3, #0
 8004610:	e054      	b.n	80046bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	089b      	lsrs	r3, r3, #2
 8004620:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00e      	beq.n	8004648 <osThreadNew+0xa8>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2ba7      	cmp	r3, #167	; 0xa7
 8004630:	d90a      	bls.n	8004648 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004636:	2b00      	cmp	r3, #0
 8004638:	d006      	beq.n	8004648 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <osThreadNew+0xa8>
        mem = 1;
 8004642:	2301      	movs	r3, #1
 8004644:	61bb      	str	r3, [r7, #24]
 8004646:	e010      	b.n	800466a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10c      	bne.n	800466a <osThreadNew+0xca>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d108      	bne.n	800466a <osThreadNew+0xca>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d104      	bne.n	800466a <osThreadNew+0xca>
          mem = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	61bb      	str	r3, [r7, #24]
 8004664:	e001      	b.n	800466a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d110      	bne.n	8004692 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004678:	9202      	str	r2, [sp, #8]
 800467a:	9301      	str	r3, [sp, #4]
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	6a3a      	ldr	r2, [r7, #32]
 8004684:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 fff6 	bl	8005678 <xTaskCreateStatic>
 800468c:	4603      	mov	r3, r0
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	e013      	b.n	80046ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d110      	bne.n	80046ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	b29a      	uxth	r2, r3
 800469c:	f107 0310 	add.w	r3, r7, #16
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f001 f841 	bl	8005732 <xTaskCreate>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d001      	beq.n	80046ba <osThreadNew+0x11a>
            hTask = NULL;
 80046b6:	2300      	movs	r3, #0
 80046b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80046ba:	693b      	ldr	r3, [r7, #16]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3728      	adds	r7, #40	; 0x28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046cc:	f3ef 8305 	mrs	r3, IPSR
 80046d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80046d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <osDelay+0x1c>
    stat = osErrorISR;
 80046d8:	f06f 0305 	mvn.w	r3, #5
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	e007      	b.n	80046f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f001 f97c 	bl	80059e8 <vTaskDelay>
    }
  }

  return (stat);
 80046f0:	68fb      	ldr	r3, [r7, #12]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b08a      	sub	sp, #40	; 0x28
 80046fe:	af02      	add	r7, sp, #8
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800470a:	f3ef 8305 	mrs	r3, IPSR
 800470e:	613b      	str	r3, [r7, #16]
  return(result);
 8004710:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004712:	2b00      	cmp	r3, #0
 8004714:	d15f      	bne.n	80047d6 <osMessageQueueNew+0xdc>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d05c      	beq.n	80047d6 <osMessageQueueNew+0xdc>
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d059      	beq.n	80047d6 <osMessageQueueNew+0xdc>
    mem = -1;
 8004722:	f04f 33ff 	mov.w	r3, #4294967295
 8004726:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d029      	beq.n	8004782 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d012      	beq.n	800475c <osMessageQueueNew+0x62>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b4f      	cmp	r3, #79	; 0x4f
 800473c:	d90e      	bls.n	800475c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695a      	ldr	r2, [r3, #20]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	fb01 f303 	mul.w	r3, r1, r3
 8004752:	429a      	cmp	r2, r3
 8004754:	d302      	bcc.n	800475c <osMessageQueueNew+0x62>
        mem = 1;
 8004756:	2301      	movs	r3, #1
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	e014      	b.n	8004786 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d110      	bne.n	8004786 <osMessageQueueNew+0x8c>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10c      	bne.n	8004786 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004770:	2b00      	cmp	r3, #0
 8004772:	d108      	bne.n	8004786 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d104      	bne.n	8004786 <osMessageQueueNew+0x8c>
          mem = 0;
 800477c:	2300      	movs	r3, #0
 800477e:	61bb      	str	r3, [r7, #24]
 8004780:	e001      	b.n	8004786 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d10b      	bne.n	80047a4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2100      	movs	r1, #0
 8004796:	9100      	str	r1, [sp, #0]
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 fa2e 	bl	8004bfc <xQueueGenericCreateStatic>
 80047a0:	61f8      	str	r0, [r7, #28]
 80047a2:	e008      	b.n	80047b6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d105      	bne.n	80047b6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80047aa:	2200      	movs	r2, #0
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 fa9c 	bl	8004cec <xQueueGenericCreate>
 80047b4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00c      	beq.n	80047d6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <osMessageQueueNew+0xd0>
        name = attr->name;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e001      	b.n	80047ce <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80047ce:	6979      	ldr	r1, [r7, #20]
 80047d0:	69f8      	ldr	r0, [r7, #28]
 80047d2:	f000 fef3 	bl	80055bc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80047d6:	69fb      	ldr	r3, [r7, #28]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3720      	adds	r7, #32
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b088      	sub	sp, #32
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	4613      	mov	r3, r2
 80047ee:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047f8:	f3ef 8305 	mrs	r3, IPSR
 80047fc:	617b      	str	r3, [r7, #20]
  return(result);
 80047fe:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004800:	2b00      	cmp	r3, #0
 8004802:	d028      	beq.n	8004856 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <osMessageQueuePut+0x36>
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <osMessageQueuePut+0x36>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004816:	f06f 0303 	mvn.w	r3, #3
 800481a:	61fb      	str	r3, [r7, #28]
 800481c:	e038      	b.n	8004890 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800481e:	2300      	movs	r3, #0
 8004820:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004822:	f107 0210 	add.w	r2, r7, #16
 8004826:	2300      	movs	r3, #0
 8004828:	68b9      	ldr	r1, [r7, #8]
 800482a:	69b8      	ldr	r0, [r7, #24]
 800482c:	f000 fbba 	bl	8004fa4 <xQueueGenericSendFromISR>
 8004830:	4603      	mov	r3, r0
 8004832:	2b01      	cmp	r3, #1
 8004834:	d003      	beq.n	800483e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004836:	f06f 0302 	mvn.w	r3, #2
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	e028      	b.n	8004890 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d025      	beq.n	8004890 <osMessageQueuePut+0xb0>
 8004844:	4b15      	ldr	r3, [pc, #84]	; (800489c <osMessageQueuePut+0xbc>)
 8004846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	e01c      	b.n	8004890 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <osMessageQueuePut+0x82>
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d103      	bne.n	800486a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004862:	f06f 0303 	mvn.w	r3, #3
 8004866:	61fb      	str	r3, [r7, #28]
 8004868:	e012      	b.n	8004890 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800486a:	2300      	movs	r3, #0
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	68b9      	ldr	r1, [r7, #8]
 8004870:	69b8      	ldr	r0, [r7, #24]
 8004872:	f000 fa99 	bl	8004da8 <xQueueGenericSend>
 8004876:	4603      	mov	r3, r0
 8004878:	2b01      	cmp	r3, #1
 800487a:	d009      	beq.n	8004890 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004882:	f06f 0301 	mvn.w	r3, #1
 8004886:	61fb      	str	r3, [r7, #28]
 8004888:	e002      	b.n	8004890 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800488a:	f06f 0302 	mvn.w	r3, #2
 800488e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004890:	69fb      	ldr	r3, [r7, #28]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3720      	adds	r7, #32
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	e000ed04 	.word	0xe000ed04

080048a0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048b6:	f3ef 8305 	mrs	r3, IPSR
 80048ba:	617b      	str	r3, [r7, #20]
  return(result);
 80048bc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d028      	beq.n	8004914 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <osMessageQueueGet+0x34>
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <osMessageQueueGet+0x34>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80048d4:	f06f 0303 	mvn.w	r3, #3
 80048d8:	61fb      	str	r3, [r7, #28]
 80048da:	e037      	b.n	800494c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80048dc:	2300      	movs	r3, #0
 80048de:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80048e0:	f107 0310 	add.w	r3, r7, #16
 80048e4:	461a      	mov	r2, r3
 80048e6:	68b9      	ldr	r1, [r7, #8]
 80048e8:	69b8      	ldr	r0, [r7, #24]
 80048ea:	f000 fcd7 	bl	800529c <xQueueReceiveFromISR>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d003      	beq.n	80048fc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80048f4:	f06f 0302 	mvn.w	r3, #2
 80048f8:	61fb      	str	r3, [r7, #28]
 80048fa:	e027      	b.n	800494c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d024      	beq.n	800494c <osMessageQueueGet+0xac>
 8004902:	4b15      	ldr	r3, [pc, #84]	; (8004958 <osMessageQueueGet+0xb8>)
 8004904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	e01b      	b.n	800494c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <osMessageQueueGet+0x80>
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d103      	bne.n	8004928 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004920:	f06f 0303 	mvn.w	r3, #3
 8004924:	61fb      	str	r3, [r7, #28]
 8004926:	e011      	b.n	800494c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	68b9      	ldr	r1, [r7, #8]
 800492c:	69b8      	ldr	r0, [r7, #24]
 800492e:	f000 fbd5 	bl	80050dc <xQueueReceive>
 8004932:	4603      	mov	r3, r0
 8004934:	2b01      	cmp	r3, #1
 8004936:	d009      	beq.n	800494c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800493e:	f06f 0301 	mvn.w	r3, #1
 8004942:	61fb      	str	r3, [r7, #28]
 8004944:	e002      	b.n	800494c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004946:	f06f 0302 	mvn.w	r3, #2
 800494a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800494c:	69fb      	ldr	r3, [r7, #28]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3720      	adds	r7, #32
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4a07      	ldr	r2, [pc, #28]	; (8004988 <vApplicationGetIdleTaskMemory+0x2c>)
 800496c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	4a06      	ldr	r2, [pc, #24]	; (800498c <vApplicationGetIdleTaskMemory+0x30>)
 8004972:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2280      	movs	r2, #128	; 0x80
 8004978:	601a      	str	r2, [r3, #0]
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	20000198 	.word	0x20000198
 800498c:	20000240 	.word	0x20000240

08004990 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4a07      	ldr	r2, [pc, #28]	; (80049bc <vApplicationGetTimerTaskMemory+0x2c>)
 80049a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	4a06      	ldr	r2, [pc, #24]	; (80049c0 <vApplicationGetTimerTaskMemory+0x30>)
 80049a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049ae:	601a      	str	r2, [r3, #0]
}
 80049b0:	bf00      	nop
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	20000440 	.word	0x20000440
 80049c0:	200004e8 	.word	0x200004e8

080049c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f103 0208 	add.w	r2, r3, #8
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f04f 32ff 	mov.w	r2, #4294967295
 80049dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f103 0208 	add.w	r2, r3, #8
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f103 0208 	add.w	r2, r3, #8
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b085      	sub	sp, #20
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	683a      	ldr	r2, [r7, #0]
 8004a42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	601a      	str	r2, [r3, #0]
}
 8004a5a:	bf00      	nop
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a66:	b480      	push	{r7}
 8004a68:	b085      	sub	sp, #20
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
 8004a6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7c:	d103      	bne.n	8004a86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	e00c      	b.n	8004aa0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3308      	adds	r3, #8
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	e002      	b.n	8004a94 <vListInsert+0x2e>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d2f6      	bcs.n	8004a8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	1c5a      	adds	r2, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	601a      	str	r2, [r3, #0]
}
 8004acc:	bf00      	nop
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6892      	ldr	r2, [r2, #8]
 8004aee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6852      	ldr	r2, [r2, #4]
 8004af8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d103      	bne.n	8004b0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	1e5a      	subs	r2, r3, #1
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10a      	bne.n	8004b56 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004b56:	f002 f945 	bl	8006de4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b62:	68f9      	ldr	r1, [r7, #12]
 8004b64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b66:	fb01 f303 	mul.w	r3, r1, r3
 8004b6a:	441a      	add	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b86:	3b01      	subs	r3, #1
 8004b88:	68f9      	ldr	r1, [r7, #12]
 8004b8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b8c:	fb01 f303 	mul.w	r3, r1, r3
 8004b90:	441a      	add	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	22ff      	movs	r2, #255	; 0xff
 8004b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	22ff      	movs	r2, #255	; 0xff
 8004ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d114      	bne.n	8004bd6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01a      	beq.n	8004bea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	3310      	adds	r3, #16
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f001 f9f3 	bl	8005fa4 <xTaskRemoveFromEventList>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d012      	beq.n	8004bea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <xQueueGenericReset+0xcc>)
 8004bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	e009      	b.n	8004bea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3310      	adds	r3, #16
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff fef2 	bl	80049c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	3324      	adds	r3, #36	; 0x24
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff feed 	bl	80049c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004bea:	f002 f92b 	bl	8006e44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004bee:	2301      	movs	r3, #1
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	e000ed04 	.word	0xe000ed04

08004bfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08e      	sub	sp, #56	; 0x38
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10a      	bne.n	8004c26 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c22:	bf00      	nop
 8004c24:	e7fe      	b.n	8004c24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <xQueueGenericCreateStatic+0x52>
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <xQueueGenericCreateStatic+0x56>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <xQueueGenericCreateStatic+0x58>
 8004c52:	2300      	movs	r3, #0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10a      	bne.n	8004c6e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	623b      	str	r3, [r7, #32]
}
 8004c6a:	bf00      	nop
 8004c6c:	e7fe      	b.n	8004c6c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d102      	bne.n	8004c7a <xQueueGenericCreateStatic+0x7e>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <xQueueGenericCreateStatic+0x82>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <xQueueGenericCreateStatic+0x84>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10a      	bne.n	8004c9a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c88:	f383 8811 	msr	BASEPRI, r3
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	61fb      	str	r3, [r7, #28]
}
 8004c96:	bf00      	nop
 8004c98:	e7fe      	b.n	8004c98 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c9a:	2350      	movs	r3, #80	; 0x50
 8004c9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b50      	cmp	r3, #80	; 0x50
 8004ca2:	d00a      	beq.n	8004cba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca8:	f383 8811 	msr	BASEPRI, r3
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	61bb      	str	r3, [r7, #24]
}
 8004cb6:	bf00      	nop
 8004cb8:	e7fe      	b.n	8004cb8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004cba:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00d      	beq.n	8004ce2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cce:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f83f 	bl	8004d60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3730      	adds	r7, #48	; 0x30
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08a      	sub	sp, #40	; 0x28
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10a      	bne.n	8004d16 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	613b      	str	r3, [r7, #16]
}
 8004d12:	bf00      	nop
 8004d14:	e7fe      	b.n	8004d14 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	68ba      	ldr	r2, [r7, #8]
 8004d1a:	fb02 f303 	mul.w	r3, r2, r3
 8004d1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	3350      	adds	r3, #80	; 0x50
 8004d24:	4618      	mov	r0, r3
 8004d26:	f002 f97f 	bl	8007028 <pvPortMalloc>
 8004d2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d011      	beq.n	8004d56 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	3350      	adds	r3, #80	; 0x50
 8004d3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d44:	79fa      	ldrb	r2, [r7, #7]
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	68b9      	ldr	r1, [r7, #8]
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f000 f805 	bl	8004d60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d56:	69bb      	ldr	r3, [r7, #24]
	}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3720      	adds	r7, #32
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d103      	bne.n	8004d7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	e002      	b.n	8004d82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d8e:	2101      	movs	r1, #1
 8004d90:	69b8      	ldr	r0, [r7, #24]
 8004d92:	f7ff fecb 	bl	8004b2c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	78fa      	ldrb	r2, [r7, #3]
 8004d9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d9e:	bf00      	nop
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
	...

08004da8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08e      	sub	sp, #56	; 0x38
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004db6:	2300      	movs	r3, #0
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10a      	bne.n	8004dda <xQueueGenericSend+0x32>
	__asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d103      	bne.n	8004de8 <xQueueGenericSend+0x40>
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <xQueueGenericSend+0x44>
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <xQueueGenericSend+0x46>
 8004dec:	2300      	movs	r3, #0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10a      	bne.n	8004e08 <xQueueGenericSend+0x60>
	__asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e04:	bf00      	nop
 8004e06:	e7fe      	b.n	8004e06 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d103      	bne.n	8004e16 <xQueueGenericSend+0x6e>
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <xQueueGenericSend+0x72>
 8004e16:	2301      	movs	r3, #1
 8004e18:	e000      	b.n	8004e1c <xQueueGenericSend+0x74>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10a      	bne.n	8004e36 <xQueueGenericSend+0x8e>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	623b      	str	r3, [r7, #32]
}
 8004e32:	bf00      	nop
 8004e34:	e7fe      	b.n	8004e34 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e36:	f001 fa77 	bl	8006328 <xTaskGetSchedulerState>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d102      	bne.n	8004e46 <xQueueGenericSend+0x9e>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <xQueueGenericSend+0xa2>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <xQueueGenericSend+0xa4>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10a      	bne.n	8004e66 <xQueueGenericSend+0xbe>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	61fb      	str	r3, [r7, #28]
}
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e66:	f001 ffbd 	bl	8006de4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d302      	bcc.n	8004e7c <xQueueGenericSend+0xd4>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d129      	bne.n	8004ed0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	68b9      	ldr	r1, [r7, #8]
 8004e80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e82:	f000 fa8b 	bl	800539c <prvCopyDataToQueue>
 8004e86:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d010      	beq.n	8004eb2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	3324      	adds	r3, #36	; 0x24
 8004e94:	4618      	mov	r0, r3
 8004e96:	f001 f885 	bl	8005fa4 <xTaskRemoveFromEventList>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d013      	beq.n	8004ec8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ea0:	4b3f      	ldr	r3, [pc, #252]	; (8004fa0 <xQueueGenericSend+0x1f8>)
 8004ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	e00a      	b.n	8004ec8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d007      	beq.n	8004ec8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004eb8:	4b39      	ldr	r3, [pc, #228]	; (8004fa0 <xQueueGenericSend+0x1f8>)
 8004eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ec8:	f001 ffbc 	bl	8006e44 <vPortExitCritical>
				return pdPASS;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e063      	b.n	8004f98 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d103      	bne.n	8004ede <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ed6:	f001 ffb5 	bl	8006e44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	e05c      	b.n	8004f98 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d106      	bne.n	8004ef2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ee4:	f107 0314 	add.w	r3, r7, #20
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f001 f8bf 	bl	800606c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ef2:	f001 ffa7 	bl	8006e44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ef6:	f000 fe1b 	bl	8005b30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004efa:	f001 ff73 	bl	8006de4 <vPortEnterCritical>
 8004efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f04:	b25b      	sxtb	r3, r3
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d103      	bne.n	8004f14 <xQueueGenericSend+0x16c>
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f1a:	b25b      	sxtb	r3, r3
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f20:	d103      	bne.n	8004f2a <xQueueGenericSend+0x182>
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f2a:	f001 ff8b 	bl	8006e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f2e:	1d3a      	adds	r2, r7, #4
 8004f30:	f107 0314 	add.w	r3, r7, #20
 8004f34:	4611      	mov	r1, r2
 8004f36:	4618      	mov	r0, r3
 8004f38:	f001 f8ae 	bl	8006098 <xTaskCheckForTimeOut>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d124      	bne.n	8004f8c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f44:	f000 fb22 	bl	800558c <prvIsQueueFull>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d018      	beq.n	8004f80 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	3310      	adds	r3, #16
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	4611      	mov	r1, r2
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 ffd4 	bl	8005f04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f5e:	f000 faad 	bl	80054bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f62:	f000 fdf3 	bl	8005b4c <xTaskResumeAll>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f47f af7c 	bne.w	8004e66 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004f6e:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <xQueueGenericSend+0x1f8>)
 8004f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	e772      	b.n	8004e66 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f82:	f000 fa9b 	bl	80054bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f86:	f000 fde1 	bl	8005b4c <xTaskResumeAll>
 8004f8a:	e76c      	b.n	8004e66 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f8e:	f000 fa95 	bl	80054bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f92:	f000 fddb 	bl	8005b4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3738      	adds	r7, #56	; 0x38
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	e000ed04 	.word	0xe000ed04

08004fa4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b090      	sub	sp, #64	; 0x40
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10a      	bne.n	8004fd2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004fce:	bf00      	nop
 8004fd0:	e7fe      	b.n	8004fd0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d103      	bne.n	8004fe0 <xQueueGenericSendFromISR+0x3c>
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <xQueueGenericSendFromISR+0x40>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <xQueueGenericSendFromISR+0x42>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10a      	bne.n	8005000 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ffc:	bf00      	nop
 8004ffe:	e7fe      	b.n	8004ffe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d103      	bne.n	800500e <xQueueGenericSendFromISR+0x6a>
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500a:	2b01      	cmp	r3, #1
 800500c:	d101      	bne.n	8005012 <xQueueGenericSendFromISR+0x6e>
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <xQueueGenericSendFromISR+0x70>
 8005012:	2300      	movs	r3, #0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10a      	bne.n	800502e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	623b      	str	r3, [r7, #32]
}
 800502a:	bf00      	nop
 800502c:	e7fe      	b.n	800502c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800502e:	f001 ffbb 	bl	8006fa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005032:	f3ef 8211 	mrs	r2, BASEPRI
 8005036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	61fa      	str	r2, [r7, #28]
 8005048:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800504a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800504c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800504e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005056:	429a      	cmp	r2, r3
 8005058:	d302      	bcc.n	8005060 <xQueueGenericSendFromISR+0xbc>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b02      	cmp	r3, #2
 800505e:	d12f      	bne.n	80050c0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005062:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800506a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005076:	f000 f991 	bl	800539c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800507a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800507e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005082:	d112      	bne.n	80050aa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	2b00      	cmp	r3, #0
 800508a:	d016      	beq.n	80050ba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800508c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508e:	3324      	adds	r3, #36	; 0x24
 8005090:	4618      	mov	r0, r3
 8005092:	f000 ff87 	bl	8005fa4 <xTaskRemoveFromEventList>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00e      	beq.n	80050ba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00b      	beq.n	80050ba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	e007      	b.n	80050ba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050ae:	3301      	adds	r3, #1
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	b25a      	sxtb	r2, r3
 80050b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80050ba:	2301      	movs	r3, #1
 80050bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80050be:	e001      	b.n	80050c4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80050ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3740      	adds	r7, #64	; 0x40
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08c      	sub	sp, #48	; 0x30
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80050e8:	2300      	movs	r3, #0
 80050ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80050f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10a      	bne.n	800510c <xQueueReceive+0x30>
	__asm volatile
 80050f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	623b      	str	r3, [r7, #32]
}
 8005108:	bf00      	nop
 800510a:	e7fe      	b.n	800510a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d103      	bne.n	800511a <xQueueReceive+0x3e>
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <xQueueReceive+0x42>
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <xQueueReceive+0x44>
 800511e:	2300      	movs	r3, #0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <xQueueReceive+0x5e>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	61fb      	str	r3, [r7, #28]
}
 8005136:	bf00      	nop
 8005138:	e7fe      	b.n	8005138 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800513a:	f001 f8f5 	bl	8006328 <xTaskGetSchedulerState>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <xQueueReceive+0x6e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <xQueueReceive+0x72>
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <xQueueReceive+0x74>
 800514e:	2300      	movs	r3, #0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <xQueueReceive+0x8e>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	61bb      	str	r3, [r7, #24]
}
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800516a:	f001 fe3b 	bl	8006de4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	2b00      	cmp	r3, #0
 8005178:	d01f      	beq.n	80051ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800517a:	68b9      	ldr	r1, [r7, #8]
 800517c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800517e:	f000 f977 	bl	8005470 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	1e5a      	subs	r2, r3, #1
 8005186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005188:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00f      	beq.n	80051b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	3310      	adds	r3, #16
 8005196:	4618      	mov	r0, r3
 8005198:	f000 ff04 	bl	8005fa4 <xTaskRemoveFromEventList>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d007      	beq.n	80051b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80051a2:	4b3d      	ldr	r3, [pc, #244]	; (8005298 <xQueueReceive+0x1bc>)
 80051a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80051b2:	f001 fe47 	bl	8006e44 <vPortExitCritical>
				return pdPASS;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e069      	b.n	800528e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d103      	bne.n	80051c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051c0:	f001 fe40 	bl	8006e44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e062      	b.n	800528e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051ce:	f107 0310 	add.w	r3, r7, #16
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 ff4a 	bl	800606c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051d8:	2301      	movs	r3, #1
 80051da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051dc:	f001 fe32 	bl	8006e44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051e0:	f000 fca6 	bl	8005b30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051e4:	f001 fdfe 	bl	8006de4 <vPortEnterCritical>
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051ee:	b25b      	sxtb	r3, r3
 80051f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f4:	d103      	bne.n	80051fe <xQueueReceive+0x122>
 80051f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005200:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005204:	b25b      	sxtb	r3, r3
 8005206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520a:	d103      	bne.n	8005214 <xQueueReceive+0x138>
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005214:	f001 fe16 	bl	8006e44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005218:	1d3a      	adds	r2, r7, #4
 800521a:	f107 0310 	add.w	r3, r7, #16
 800521e:	4611      	mov	r1, r2
 8005220:	4618      	mov	r0, r3
 8005222:	f000 ff39 	bl	8006098 <xTaskCheckForTimeOut>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d123      	bne.n	8005274 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800522c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800522e:	f000 f997 	bl	8005560 <prvIsQueueEmpty>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d017      	beq.n	8005268 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523a:	3324      	adds	r3, #36	; 0x24
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	4611      	mov	r1, r2
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fe5f 	bl	8005f04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005248:	f000 f938 	bl	80054bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800524c:	f000 fc7e 	bl	8005b4c <xTaskResumeAll>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d189      	bne.n	800516a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005256:	4b10      	ldr	r3, [pc, #64]	; (8005298 <xQueueReceive+0x1bc>)
 8005258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	e780      	b.n	800516a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800526a:	f000 f927 	bl	80054bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800526e:	f000 fc6d 	bl	8005b4c <xTaskResumeAll>
 8005272:	e77a      	b.n	800516a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005276:	f000 f921 	bl	80054bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800527a:	f000 fc67 	bl	8005b4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800527e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005280:	f000 f96e 	bl	8005560 <prvIsQueueEmpty>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	f43f af6f 	beq.w	800516a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800528c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800528e:	4618      	mov	r0, r3
 8005290:	3730      	adds	r7, #48	; 0x30
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	e000ed04 	.word	0xe000ed04

0800529c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08e      	sub	sp, #56	; 0x38
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10a      	bne.n	80052c8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	623b      	str	r3, [r7, #32]
}
 80052c4:	bf00      	nop
 80052c6:	e7fe      	b.n	80052c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d103      	bne.n	80052d6 <xQueueReceiveFromISR+0x3a>
 80052ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <xQueueReceiveFromISR+0x3e>
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <xQueueReceiveFromISR+0x40>
 80052da:	2300      	movs	r3, #0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10a      	bne.n	80052f6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	61fb      	str	r3, [r7, #28]
}
 80052f2:	bf00      	nop
 80052f4:	e7fe      	b.n	80052f4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052f6:	f001 fe57 	bl	8006fa8 <vPortValidateInterruptPriority>
	__asm volatile
 80052fa:	f3ef 8211 	mrs	r2, BASEPRI
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	61ba      	str	r2, [r7, #24]
 8005310:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005312:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005314:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	2b00      	cmp	r3, #0
 8005320:	d02f      	beq.n	8005382 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800532c:	68b9      	ldr	r1, [r7, #8]
 800532e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005330:	f000 f89e 	bl	8005470 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	1e5a      	subs	r2, r3, #1
 8005338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800533c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005344:	d112      	bne.n	800536c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d016      	beq.n	800537c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	3310      	adds	r3, #16
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fe26 	bl	8005fa4 <xTaskRemoveFromEventList>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00e      	beq.n	800537c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00b      	beq.n	800537c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e007      	b.n	800537c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800536c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005370:	3301      	adds	r3, #1
 8005372:	b2db      	uxtb	r3, r3
 8005374:	b25a      	sxtb	r2, r3
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800537c:	2301      	movs	r3, #1
 800537e:	637b      	str	r3, [r7, #52]	; 0x34
 8005380:	e001      	b.n	8005386 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005382:	2300      	movs	r3, #0
 8005384:	637b      	str	r3, [r7, #52]	; 0x34
 8005386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005388:	613b      	str	r3, [r7, #16]
	__asm volatile
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f383 8811 	msr	BASEPRI, r3
}
 8005390:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005394:	4618      	mov	r0, r3
 8005396:	3738      	adds	r7, #56	; 0x38
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10d      	bne.n	80053d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d14d      	bne.n	800545e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 ffcc 	bl	8006364 <xTaskPriorityDisinherit>
 80053cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	609a      	str	r2, [r3, #8]
 80053d4:	e043      	b.n	800545e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d119      	bne.n	8005410 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6858      	ldr	r0, [r3, #4]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	461a      	mov	r2, r3
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	f002 face 	bl	8007988 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	441a      	add	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	429a      	cmp	r2, r3
 8005404:	d32b      	bcc.n	800545e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	605a      	str	r2, [r3, #4]
 800540e:	e026      	b.n	800545e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	68d8      	ldr	r0, [r3, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	461a      	mov	r2, r3
 800541a:	68b9      	ldr	r1, [r7, #8]
 800541c:	f002 fab4 	bl	8007988 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	425b      	negs	r3, r3
 800542a:	441a      	add	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	68da      	ldr	r2, [r3, #12]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d207      	bcs.n	800544c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	425b      	negs	r3, r3
 8005446:	441a      	add	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b02      	cmp	r3, #2
 8005450:	d105      	bne.n	800545e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d002      	beq.n	800545e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	3b01      	subs	r3, #1
 800545c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005466:	697b      	ldr	r3, [r7, #20]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	d018      	beq.n	80054b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	441a      	add	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	429a      	cmp	r2, r3
 800549a:	d303      	bcc.n	80054a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68d9      	ldr	r1, [r3, #12]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	461a      	mov	r2, r3
 80054ae:	6838      	ldr	r0, [r7, #0]
 80054b0:	f002 fa6a 	bl	8007988 <memcpy>
	}
}
 80054b4:	bf00      	nop
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054c4:	f001 fc8e 	bl	8006de4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054d0:	e011      	b.n	80054f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d012      	beq.n	8005500 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3324      	adds	r3, #36	; 0x24
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fd60 	bl	8005fa4 <xTaskRemoveFromEventList>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054ea:	f000 fe37 	bl	800615c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	dce9      	bgt.n	80054d2 <prvUnlockQueue+0x16>
 80054fe:	e000      	b.n	8005502 <prvUnlockQueue+0x46>
					break;
 8005500:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	22ff      	movs	r2, #255	; 0xff
 8005506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800550a:	f001 fc9b 	bl	8006e44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800550e:	f001 fc69 	bl	8006de4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005518:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800551a:	e011      	b.n	8005540 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d012      	beq.n	800554a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3310      	adds	r3, #16
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fd3b 	bl	8005fa4 <xTaskRemoveFromEventList>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d001      	beq.n	8005538 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005534:	f000 fe12 	bl	800615c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005538:	7bbb      	ldrb	r3, [r7, #14]
 800553a:	3b01      	subs	r3, #1
 800553c:	b2db      	uxtb	r3, r3
 800553e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005544:	2b00      	cmp	r3, #0
 8005546:	dce9      	bgt.n	800551c <prvUnlockQueue+0x60>
 8005548:	e000      	b.n	800554c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800554a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	22ff      	movs	r2, #255	; 0xff
 8005550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005554:	f001 fc76 	bl	8006e44 <vPortExitCritical>
}
 8005558:	bf00      	nop
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005568:	f001 fc3c 	bl	8006de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005570:	2b00      	cmp	r3, #0
 8005572:	d102      	bne.n	800557a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005574:	2301      	movs	r3, #1
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	e001      	b.n	800557e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800557e:	f001 fc61 	bl	8006e44 <vPortExitCritical>

	return xReturn;
 8005582:	68fb      	ldr	r3, [r7, #12]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005594:	f001 fc26 	bl	8006de4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d102      	bne.n	80055aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80055a4:	2301      	movs	r3, #1
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	e001      	b.n	80055ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055ae:	f001 fc49 	bl	8006e44 <vPortExitCritical>

	return xReturn;
 80055b2:	68fb      	ldr	r3, [r7, #12]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	e014      	b.n	80055f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80055cc:	4a0f      	ldr	r2, [pc, #60]	; (800560c <vQueueAddToRegistry+0x50>)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10b      	bne.n	80055f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80055d8:	490c      	ldr	r1, [pc, #48]	; (800560c <vQueueAddToRegistry+0x50>)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80055e2:	4a0a      	ldr	r2, [pc, #40]	; (800560c <vQueueAddToRegistry+0x50>)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	4413      	add	r3, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80055ee:	e006      	b.n	80055fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3301      	adds	r3, #1
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b07      	cmp	r3, #7
 80055fa:	d9e7      	bls.n	80055cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055fc:	bf00      	nop
 80055fe:	bf00      	nop
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	200008e8 	.word	0x200008e8

08005610 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005620:	f001 fbe0 	bl	8006de4 <vPortEnterCritical>
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800562a:	b25b      	sxtb	r3, r3
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d103      	bne.n	800563a <vQueueWaitForMessageRestricted+0x2a>
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005640:	b25b      	sxtb	r3, r3
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005646:	d103      	bne.n	8005650 <vQueueWaitForMessageRestricted+0x40>
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005650:	f001 fbf8 	bl	8006e44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	3324      	adds	r3, #36	; 0x24
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	68b9      	ldr	r1, [r7, #8]
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fc71 	bl	8005f4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800566a:	6978      	ldr	r0, [r7, #20]
 800566c:	f7ff ff26 	bl	80054bc <prvUnlockQueue>
	}
 8005670:	bf00      	nop
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08e      	sub	sp, #56	; 0x38
 800567c:	af04      	add	r7, sp, #16
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	623b      	str	r3, [r7, #32]
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <xTaskCreateStatic+0x46>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	61fb      	str	r3, [r7, #28]
}
 80056ba:	bf00      	nop
 80056bc:	e7fe      	b.n	80056bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056be:	23a8      	movs	r3, #168	; 0xa8
 80056c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	2ba8      	cmp	r3, #168	; 0xa8
 80056c6:	d00a      	beq.n	80056de <xTaskCreateStatic+0x66>
	__asm volatile
 80056c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056cc:	f383 8811 	msr	BASEPRI, r3
 80056d0:	f3bf 8f6f 	isb	sy
 80056d4:	f3bf 8f4f 	dsb	sy
 80056d8:	61bb      	str	r3, [r7, #24]
}
 80056da:	bf00      	nop
 80056dc:	e7fe      	b.n	80056dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80056de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d01e      	beq.n	8005724 <xTaskCreateStatic+0xac>
 80056e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01b      	beq.n	8005724 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	2202      	movs	r2, #2
 80056fa:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056fe:	2300      	movs	r3, #0
 8005700:	9303      	str	r3, [sp, #12]
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	9302      	str	r3, [sp, #8]
 8005706:	f107 0314 	add.w	r3, r7, #20
 800570a:	9301      	str	r3, [sp, #4]
 800570c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570e:	9300      	str	r3, [sp, #0]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 f850 	bl	80057bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800571c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800571e:	f000 f8f3 	bl	8005908 <prvAddNewTaskToReadyList>
 8005722:	e001      	b.n	8005728 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005724:	2300      	movs	r3, #0
 8005726:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005728:	697b      	ldr	r3, [r7, #20]
	}
 800572a:	4618      	mov	r0, r3
 800572c:	3728      	adds	r7, #40	; 0x28
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}

08005732 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005732:	b580      	push	{r7, lr}
 8005734:	b08c      	sub	sp, #48	; 0x30
 8005736:	af04      	add	r7, sp, #16
 8005738:	60f8      	str	r0, [r7, #12]
 800573a:	60b9      	str	r1, [r7, #8]
 800573c:	603b      	str	r3, [r7, #0]
 800573e:	4613      	mov	r3, r2
 8005740:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005742:	88fb      	ldrh	r3, [r7, #6]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4618      	mov	r0, r3
 8005748:	f001 fc6e 	bl	8007028 <pvPortMalloc>
 800574c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00e      	beq.n	8005772 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005754:	20a8      	movs	r0, #168	; 0xa8
 8005756:	f001 fc67 	bl	8007028 <pvPortMalloc>
 800575a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	631a      	str	r2, [r3, #48]	; 0x30
 8005768:	e005      	b.n	8005776 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800576a:	6978      	ldr	r0, [r7, #20]
 800576c:	f001 fd28 	bl	80071c0 <vPortFree>
 8005770:	e001      	b.n	8005776 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005772:	2300      	movs	r3, #0
 8005774:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d017      	beq.n	80057ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005784:	88fa      	ldrh	r2, [r7, #6]
 8005786:	2300      	movs	r3, #0
 8005788:	9303      	str	r3, [sp, #12]
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	9302      	str	r3, [sp, #8]
 800578e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68b9      	ldr	r1, [r7, #8]
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 f80e 	bl	80057bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057a0:	69f8      	ldr	r0, [r7, #28]
 80057a2:	f000 f8b1 	bl	8005908 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057a6:	2301      	movs	r3, #1
 80057a8:	61bb      	str	r3, [r7, #24]
 80057aa:	e002      	b.n	80057b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057ac:	f04f 33ff 	mov.w	r3, #4294967295
 80057b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057b2:	69bb      	ldr	r3, [r7, #24]
	}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3720      	adds	r7, #32
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	461a      	mov	r2, r3
 80057d4:	21a5      	movs	r1, #165	; 0xa5
 80057d6:	f002 f807 	bl	80077e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057e4:	3b01      	subs	r3, #1
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	f023 0307 	bic.w	r3, r3, #7
 80057f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	f003 0307 	and.w	r3, r3, #7
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00a      	beq.n	8005814 <prvInitialiseNewTask+0x58>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	617b      	str	r3, [r7, #20]
}
 8005810:	bf00      	nop
 8005812:	e7fe      	b.n	8005812 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d01f      	beq.n	800585a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800581a:	2300      	movs	r3, #0
 800581c:	61fb      	str	r3, [r7, #28]
 800581e:	e012      	b.n	8005846 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	4413      	add	r3, r2
 8005826:	7819      	ldrb	r1, [r3, #0]
 8005828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	4413      	add	r3, r2
 800582e:	3334      	adds	r3, #52	; 0x34
 8005830:	460a      	mov	r2, r1
 8005832:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d006      	beq.n	800584e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	3301      	adds	r3, #1
 8005844:	61fb      	str	r3, [r7, #28]
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	2b0f      	cmp	r3, #15
 800584a:	d9e9      	bls.n	8005820 <prvInitialiseNewTask+0x64>
 800584c:	e000      	b.n	8005850 <prvInitialiseNewTask+0x94>
			{
				break;
 800584e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005858:	e003      	b.n	8005862 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005864:	2b37      	cmp	r3, #55	; 0x37
 8005866:	d901      	bls.n	800586c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005868:	2337      	movs	r3, #55	; 0x37
 800586a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005870:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005876:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587a:	2200      	movs	r2, #0
 800587c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005880:	3304      	adds	r3, #4
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff f8be 	bl	8004a04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588a:	3318      	adds	r3, #24
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff f8b9 	bl	8004a04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005896:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	3354      	adds	r3, #84	; 0x54
 80058bc:	224c      	movs	r2, #76	; 0x4c
 80058be:	2100      	movs	r1, #0
 80058c0:	4618      	mov	r0, r3
 80058c2:	f001 ff91 	bl	80077e8 <memset>
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	4a0c      	ldr	r2, [pc, #48]	; (80058fc <prvInitialiseNewTask+0x140>)
 80058ca:	659a      	str	r2, [r3, #88]	; 0x58
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	4a0c      	ldr	r2, [pc, #48]	; (8005900 <prvInitialiseNewTask+0x144>)
 80058d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d4:	4a0b      	ldr	r2, [pc, #44]	; (8005904 <prvInitialiseNewTask+0x148>)
 80058d6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	68f9      	ldr	r1, [r7, #12]
 80058dc:	69b8      	ldr	r0, [r7, #24]
 80058de:	f001 f951 	bl	8006b84 <pxPortInitialiseStack>
 80058e2:	4602      	mov	r2, r0
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058f4:	bf00      	nop
 80058f6:	3720      	adds	r7, #32
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	200084ac 	.word	0x200084ac
 8005900:	20008514 	.word	0x20008514
 8005904:	2000857c 	.word	0x2000857c

08005908 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005910:	f001 fa68 	bl	8006de4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005914:	4b2d      	ldr	r3, [pc, #180]	; (80059cc <prvAddNewTaskToReadyList+0xc4>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	3301      	adds	r3, #1
 800591a:	4a2c      	ldr	r2, [pc, #176]	; (80059cc <prvAddNewTaskToReadyList+0xc4>)
 800591c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800591e:	4b2c      	ldr	r3, [pc, #176]	; (80059d0 <prvAddNewTaskToReadyList+0xc8>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005926:	4a2a      	ldr	r2, [pc, #168]	; (80059d0 <prvAddNewTaskToReadyList+0xc8>)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800592c:	4b27      	ldr	r3, [pc, #156]	; (80059cc <prvAddNewTaskToReadyList+0xc4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d110      	bne.n	8005956 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005934:	f000 fc36 	bl	80061a4 <prvInitialiseTaskLists>
 8005938:	e00d      	b.n	8005956 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800593a:	4b26      	ldr	r3, [pc, #152]	; (80059d4 <prvAddNewTaskToReadyList+0xcc>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d109      	bne.n	8005956 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005942:	4b23      	ldr	r3, [pc, #140]	; (80059d0 <prvAddNewTaskToReadyList+0xc8>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	429a      	cmp	r2, r3
 800594e:	d802      	bhi.n	8005956 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005950:	4a1f      	ldr	r2, [pc, #124]	; (80059d0 <prvAddNewTaskToReadyList+0xc8>)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005956:	4b20      	ldr	r3, [pc, #128]	; (80059d8 <prvAddNewTaskToReadyList+0xd0>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3301      	adds	r3, #1
 800595c:	4a1e      	ldr	r2, [pc, #120]	; (80059d8 <prvAddNewTaskToReadyList+0xd0>)
 800595e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005960:	4b1d      	ldr	r3, [pc, #116]	; (80059d8 <prvAddNewTaskToReadyList+0xd0>)
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596c:	4b1b      	ldr	r3, [pc, #108]	; (80059dc <prvAddNewTaskToReadyList+0xd4>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d903      	bls.n	800597c <prvAddNewTaskToReadyList+0x74>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005978:	4a18      	ldr	r2, [pc, #96]	; (80059dc <prvAddNewTaskToReadyList+0xd4>)
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4a15      	ldr	r2, [pc, #84]	; (80059e0 <prvAddNewTaskToReadyList+0xd8>)
 800598a:	441a      	add	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	3304      	adds	r3, #4
 8005990:	4619      	mov	r1, r3
 8005992:	4610      	mov	r0, r2
 8005994:	f7ff f843 	bl	8004a1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005998:	f001 fa54 	bl	8006e44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800599c:	4b0d      	ldr	r3, [pc, #52]	; (80059d4 <prvAddNewTaskToReadyList+0xcc>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00e      	beq.n	80059c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059a4:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <prvAddNewTaskToReadyList+0xc8>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d207      	bcs.n	80059c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059b2:	4b0c      	ldr	r3, [pc, #48]	; (80059e4 <prvAddNewTaskToReadyList+0xdc>)
 80059b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20000dfc 	.word	0x20000dfc
 80059d0:	20000928 	.word	0x20000928
 80059d4:	20000e08 	.word	0x20000e08
 80059d8:	20000e18 	.word	0x20000e18
 80059dc:	20000e04 	.word	0x20000e04
 80059e0:	2000092c 	.word	0x2000092c
 80059e4:	e000ed04 	.word	0xe000ed04

080059e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d017      	beq.n	8005a2a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059fa:	4b13      	ldr	r3, [pc, #76]	; (8005a48 <vTaskDelay+0x60>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <vTaskDelay+0x30>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	60bb      	str	r3, [r7, #8]
}
 8005a14:	bf00      	nop
 8005a16:	e7fe      	b.n	8005a16 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a18:	f000 f88a 	bl	8005b30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fd0e 	bl	8006440 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a24:	f000 f892 	bl	8005b4c <xTaskResumeAll>
 8005a28:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d107      	bne.n	8005a40 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005a30:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <vTaskDelay+0x64>)
 8005a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a40:	bf00      	nop
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	20000e24 	.word	0x20000e24
 8005a4c:	e000ed04 	.word	0xe000ed04

08005a50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08a      	sub	sp, #40	; 0x28
 8005a54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a5e:	463a      	mov	r2, r7
 8005a60:	1d39      	adds	r1, r7, #4
 8005a62:	f107 0308 	add.w	r3, r7, #8
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fe ff78 	bl	800495c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a6c:	6839      	ldr	r1, [r7, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	9202      	str	r2, [sp, #8]
 8005a74:	9301      	str	r3, [sp, #4]
 8005a76:	2300      	movs	r3, #0
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	460a      	mov	r2, r1
 8005a7e:	4924      	ldr	r1, [pc, #144]	; (8005b10 <vTaskStartScheduler+0xc0>)
 8005a80:	4824      	ldr	r0, [pc, #144]	; (8005b14 <vTaskStartScheduler+0xc4>)
 8005a82:	f7ff fdf9 	bl	8005678 <xTaskCreateStatic>
 8005a86:	4603      	mov	r3, r0
 8005a88:	4a23      	ldr	r2, [pc, #140]	; (8005b18 <vTaskStartScheduler+0xc8>)
 8005a8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a8c:	4b22      	ldr	r3, [pc, #136]	; (8005b18 <vTaskStartScheduler+0xc8>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a94:	2301      	movs	r3, #1
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	e001      	b.n	8005a9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d102      	bne.n	8005aaa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005aa4:	f000 fd20 	bl	80064e8 <xTimerCreateTimerTask>
 8005aa8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d11b      	bne.n	8005ae8 <vTaskStartScheduler+0x98>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	613b      	str	r3, [r7, #16]
}
 8005ac2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ac4:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <vTaskStartScheduler+0xcc>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3354      	adds	r3, #84	; 0x54
 8005aca:	4a15      	ldr	r2, [pc, #84]	; (8005b20 <vTaskStartScheduler+0xd0>)
 8005acc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ace:	4b15      	ldr	r3, [pc, #84]	; (8005b24 <vTaskStartScheduler+0xd4>)
 8005ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ad6:	4b14      	ldr	r3, [pc, #80]	; (8005b28 <vTaskStartScheduler+0xd8>)
 8005ad8:	2201      	movs	r2, #1
 8005ada:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005adc:	4b13      	ldr	r3, [pc, #76]	; (8005b2c <vTaskStartScheduler+0xdc>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ae2:	f001 f8dd 	bl	8006ca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ae6:	e00e      	b.n	8005b06 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aee:	d10a      	bne.n	8005b06 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	60fb      	str	r3, [r7, #12]
}
 8005b02:	bf00      	nop
 8005b04:	e7fe      	b.n	8005b04 <vTaskStartScheduler+0xb4>
}
 8005b06:	bf00      	nop
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	080084b0 	.word	0x080084b0
 8005b14:	08006175 	.word	0x08006175
 8005b18:	20000e20 	.word	0x20000e20
 8005b1c:	20000928 	.word	0x20000928
 8005b20:	2000006c 	.word	0x2000006c
 8005b24:	20000e1c 	.word	0x20000e1c
 8005b28:	20000e08 	.word	0x20000e08
 8005b2c:	20000e00 	.word	0x20000e00

08005b30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b34:	4b04      	ldr	r3, [pc, #16]	; (8005b48 <vTaskSuspendAll+0x18>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	4a03      	ldr	r2, [pc, #12]	; (8005b48 <vTaskSuspendAll+0x18>)
 8005b3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b3e:	bf00      	nop
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	20000e24 	.word	0x20000e24

08005b4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b5a:	4b42      	ldr	r3, [pc, #264]	; (8005c64 <xTaskResumeAll+0x118>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10a      	bne.n	8005b78 <xTaskResumeAll+0x2c>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	603b      	str	r3, [r7, #0]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b78:	f001 f934 	bl	8006de4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b7c:	4b39      	ldr	r3, [pc, #228]	; (8005c64 <xTaskResumeAll+0x118>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	4a38      	ldr	r2, [pc, #224]	; (8005c64 <xTaskResumeAll+0x118>)
 8005b84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b86:	4b37      	ldr	r3, [pc, #220]	; (8005c64 <xTaskResumeAll+0x118>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d162      	bne.n	8005c54 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b8e:	4b36      	ldr	r3, [pc, #216]	; (8005c68 <xTaskResumeAll+0x11c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d05e      	beq.n	8005c54 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b96:	e02f      	b.n	8005bf8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b98:	4b34      	ldr	r3, [pc, #208]	; (8005c6c <xTaskResumeAll+0x120>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3318      	adds	r3, #24
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fe ff97 	bl	8004ad8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3304      	adds	r3, #4
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7fe ff92 	bl	8004ad8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb8:	4b2d      	ldr	r3, [pc, #180]	; (8005c70 <xTaskResumeAll+0x124>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d903      	bls.n	8005bc8 <xTaskResumeAll+0x7c>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	4a2a      	ldr	r2, [pc, #168]	; (8005c70 <xTaskResumeAll+0x124>)
 8005bc6:	6013      	str	r3, [r2, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bcc:	4613      	mov	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4a27      	ldr	r2, [pc, #156]	; (8005c74 <xTaskResumeAll+0x128>)
 8005bd6:	441a      	add	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3304      	adds	r3, #4
 8005bdc:	4619      	mov	r1, r3
 8005bde:	4610      	mov	r0, r2
 8005be0:	f7fe ff1d 	bl	8004a1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be8:	4b23      	ldr	r3, [pc, #140]	; (8005c78 <xTaskResumeAll+0x12c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d302      	bcc.n	8005bf8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005bf2:	4b22      	ldr	r3, [pc, #136]	; (8005c7c <xTaskResumeAll+0x130>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bf8:	4b1c      	ldr	r3, [pc, #112]	; (8005c6c <xTaskResumeAll+0x120>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1cb      	bne.n	8005b98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c06:	f000 fb6f 	bl	80062e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c0a:	4b1d      	ldr	r3, [pc, #116]	; (8005c80 <xTaskResumeAll+0x134>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d010      	beq.n	8005c38 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c16:	f000 f847 	bl	8005ca8 <xTaskIncrementTick>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005c20:	4b16      	ldr	r3, [pc, #88]	; (8005c7c <xTaskResumeAll+0x130>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1f1      	bne.n	8005c16 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005c32:	4b13      	ldr	r3, [pc, #76]	; (8005c80 <xTaskResumeAll+0x134>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c38:	4b10      	ldr	r3, [pc, #64]	; (8005c7c <xTaskResumeAll+0x130>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d009      	beq.n	8005c54 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c40:	2301      	movs	r3, #1
 8005c42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c44:	4b0f      	ldr	r3, [pc, #60]	; (8005c84 <xTaskResumeAll+0x138>)
 8005c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c54:	f001 f8f6 	bl	8006e44 <vPortExitCritical>

	return xAlreadyYielded;
 8005c58:	68bb      	ldr	r3, [r7, #8]
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20000e24 	.word	0x20000e24
 8005c68:	20000dfc 	.word	0x20000dfc
 8005c6c:	20000dbc 	.word	0x20000dbc
 8005c70:	20000e04 	.word	0x20000e04
 8005c74:	2000092c 	.word	0x2000092c
 8005c78:	20000928 	.word	0x20000928
 8005c7c:	20000e10 	.word	0x20000e10
 8005c80:	20000e0c 	.word	0x20000e0c
 8005c84:	e000ed04 	.word	0xe000ed04

08005c88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005c8e:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <xTaskGetTickCount+0x1c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005c94:	687b      	ldr	r3, [r7, #4]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	20000e00 	.word	0x20000e00

08005ca8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cb2:	4b4f      	ldr	r3, [pc, #316]	; (8005df0 <xTaskIncrementTick+0x148>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f040 808f 	bne.w	8005dda <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005cbc:	4b4d      	ldr	r3, [pc, #308]	; (8005df4 <xTaskIncrementTick+0x14c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005cc4:	4a4b      	ldr	r2, [pc, #300]	; (8005df4 <xTaskIncrementTick+0x14c>)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d120      	bne.n	8005d12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cd0:	4b49      	ldr	r3, [pc, #292]	; (8005df8 <xTaskIncrementTick+0x150>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00a      	beq.n	8005cf0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	603b      	str	r3, [r7, #0]
}
 8005cec:	bf00      	nop
 8005cee:	e7fe      	b.n	8005cee <xTaskIncrementTick+0x46>
 8005cf0:	4b41      	ldr	r3, [pc, #260]	; (8005df8 <xTaskIncrementTick+0x150>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	4b41      	ldr	r3, [pc, #260]	; (8005dfc <xTaskIncrementTick+0x154>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a3f      	ldr	r2, [pc, #252]	; (8005df8 <xTaskIncrementTick+0x150>)
 8005cfc:	6013      	str	r3, [r2, #0]
 8005cfe:	4a3f      	ldr	r2, [pc, #252]	; (8005dfc <xTaskIncrementTick+0x154>)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	4b3e      	ldr	r3, [pc, #248]	; (8005e00 <xTaskIncrementTick+0x158>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	4a3d      	ldr	r2, [pc, #244]	; (8005e00 <xTaskIncrementTick+0x158>)
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	f000 faeb 	bl	80062e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d12:	4b3c      	ldr	r3, [pc, #240]	; (8005e04 <xTaskIncrementTick+0x15c>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d349      	bcc.n	8005db0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d1c:	4b36      	ldr	r3, [pc, #216]	; (8005df8 <xTaskIncrementTick+0x150>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d104      	bne.n	8005d30 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d26:	4b37      	ldr	r3, [pc, #220]	; (8005e04 <xTaskIncrementTick+0x15c>)
 8005d28:	f04f 32ff 	mov.w	r2, #4294967295
 8005d2c:	601a      	str	r2, [r3, #0]
					break;
 8005d2e:	e03f      	b.n	8005db0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d30:	4b31      	ldr	r3, [pc, #196]	; (8005df8 <xTaskIncrementTick+0x150>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d203      	bcs.n	8005d50 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d48:	4a2e      	ldr	r2, [pc, #184]	; (8005e04 <xTaskIncrementTick+0x15c>)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d4e:	e02f      	b.n	8005db0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	3304      	adds	r3, #4
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fe febf 	bl	8004ad8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d004      	beq.n	8005d6c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	3318      	adds	r3, #24
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fe feb6 	bl	8004ad8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d70:	4b25      	ldr	r3, [pc, #148]	; (8005e08 <xTaskIncrementTick+0x160>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d903      	bls.n	8005d80 <xTaskIncrementTick+0xd8>
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7c:	4a22      	ldr	r2, [pc, #136]	; (8005e08 <xTaskIncrementTick+0x160>)
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	4a1f      	ldr	r2, [pc, #124]	; (8005e0c <xTaskIncrementTick+0x164>)
 8005d8e:	441a      	add	r2, r3
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	3304      	adds	r3, #4
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f7fe fe41 	bl	8004a1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da0:	4b1b      	ldr	r3, [pc, #108]	; (8005e10 <xTaskIncrementTick+0x168>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d3b8      	bcc.n	8005d1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005daa:	2301      	movs	r3, #1
 8005dac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dae:	e7b5      	b.n	8005d1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005db0:	4b17      	ldr	r3, [pc, #92]	; (8005e10 <xTaskIncrementTick+0x168>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db6:	4915      	ldr	r1, [pc, #84]	; (8005e0c <xTaskIncrementTick+0x164>)
 8005db8:	4613      	mov	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	440b      	add	r3, r1
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d901      	bls.n	8005dcc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005dcc:	4b11      	ldr	r3, [pc, #68]	; (8005e14 <xTaskIncrementTick+0x16c>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d007      	beq.n	8005de4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	617b      	str	r3, [r7, #20]
 8005dd8:	e004      	b.n	8005de4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005dda:	4b0f      	ldr	r3, [pc, #60]	; (8005e18 <xTaskIncrementTick+0x170>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	3301      	adds	r3, #1
 8005de0:	4a0d      	ldr	r2, [pc, #52]	; (8005e18 <xTaskIncrementTick+0x170>)
 8005de2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005de4:	697b      	ldr	r3, [r7, #20]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	20000e24 	.word	0x20000e24
 8005df4:	20000e00 	.word	0x20000e00
 8005df8:	20000db4 	.word	0x20000db4
 8005dfc:	20000db8 	.word	0x20000db8
 8005e00:	20000e14 	.word	0x20000e14
 8005e04:	20000e1c 	.word	0x20000e1c
 8005e08:	20000e04 	.word	0x20000e04
 8005e0c:	2000092c 	.word	0x2000092c
 8005e10:	20000928 	.word	0x20000928
 8005e14:	20000e10 	.word	0x20000e10
 8005e18:	20000e0c 	.word	0x20000e0c

08005e1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e22:	4b32      	ldr	r3, [pc, #200]	; (8005eec <vTaskSwitchContext+0xd0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e2a:	4b31      	ldr	r3, [pc, #196]	; (8005ef0 <vTaskSwitchContext+0xd4>)
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e30:	e057      	b.n	8005ee2 <vTaskSwitchContext+0xc6>
		xYieldPending = pdFALSE;
 8005e32:	4b2f      	ldr	r3, [pc, #188]	; (8005ef0 <vTaskSwitchContext+0xd4>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8005e38:	4b2e      	ldr	r3, [pc, #184]	; (8005ef4 <vTaskSwitchContext+0xd8>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	4b2d      	ldr	r3, [pc, #180]	; (8005ef4 <vTaskSwitchContext+0xd8>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d808      	bhi.n	8005e5a <vTaskSwitchContext+0x3e>
 8005e48:	4b2a      	ldr	r3, [pc, #168]	; (8005ef4 <vTaskSwitchContext+0xd8>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	4b29      	ldr	r3, [pc, #164]	; (8005ef4 <vTaskSwitchContext+0xd8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3334      	adds	r3, #52	; 0x34
 8005e52:	4619      	mov	r1, r3
 8005e54:	4610      	mov	r0, r2
 8005e56:	f7fa fb89 	bl	800056c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e5a:	4b27      	ldr	r3, [pc, #156]	; (8005ef8 <vTaskSwitchContext+0xdc>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	60fb      	str	r3, [r7, #12]
 8005e60:	e010      	b.n	8005e84 <vTaskSwitchContext+0x68>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <vTaskSwitchContext+0x62>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	607b      	str	r3, [r7, #4]
}
 8005e7a:	bf00      	nop
 8005e7c:	e7fe      	b.n	8005e7c <vTaskSwitchContext+0x60>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	491d      	ldr	r1, [pc, #116]	; (8005efc <vTaskSwitchContext+0xe0>)
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	440b      	add	r3, r1
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0e4      	beq.n	8005e62 <vTaskSwitchContext+0x46>
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4a16      	ldr	r2, [pc, #88]	; (8005efc <vTaskSwitchContext+0xe0>)
 8005ea4:	4413      	add	r3, r2
 8005ea6:	60bb      	str	r3, [r7, #8]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	605a      	str	r2, [r3, #4]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	3308      	adds	r3, #8
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d104      	bne.n	8005ec8 <vTaskSwitchContext+0xac>
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	605a      	str	r2, [r3, #4]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	4a09      	ldr	r2, [pc, #36]	; (8005ef4 <vTaskSwitchContext+0xd8>)
 8005ed0:	6013      	str	r3, [r2, #0]
 8005ed2:	4a09      	ldr	r2, [pc, #36]	; (8005ef8 <vTaskSwitchContext+0xdc>)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ed8:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <vTaskSwitchContext+0xd8>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3354      	adds	r3, #84	; 0x54
 8005ede:	4a08      	ldr	r2, [pc, #32]	; (8005f00 <vTaskSwitchContext+0xe4>)
 8005ee0:	6013      	str	r3, [r2, #0]
}
 8005ee2:	bf00      	nop
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000e24 	.word	0x20000e24
 8005ef0:	20000e10 	.word	0x20000e10
 8005ef4:	20000928 	.word	0x20000928
 8005ef8:	20000e04 	.word	0x20000e04
 8005efc:	2000092c 	.word	0x2000092c
 8005f00:	2000006c 	.word	0x2000006c

08005f04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	60fb      	str	r3, [r7, #12]
}
 8005f26:	bf00      	nop
 8005f28:	e7fe      	b.n	8005f28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f2a:	4b07      	ldr	r3, [pc, #28]	; (8005f48 <vTaskPlaceOnEventList+0x44>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3318      	adds	r3, #24
 8005f30:	4619      	mov	r1, r3
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7fe fd97 	bl	8004a66 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f38:	2101      	movs	r1, #1
 8005f3a:	6838      	ldr	r0, [r7, #0]
 8005f3c:	f000 fa80 	bl	8006440 <prvAddCurrentTaskToDelayedList>
}
 8005f40:	bf00      	nop
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	20000928 	.word	0x20000928

08005f4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10a      	bne.n	8005f74 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f62:	f383 8811 	msr	BASEPRI, r3
 8005f66:	f3bf 8f6f 	isb	sy
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	617b      	str	r3, [r7, #20]
}
 8005f70:	bf00      	nop
 8005f72:	e7fe      	b.n	8005f72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f74:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3318      	adds	r3, #24
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f7fe fd4e 	bl	8004a1e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d002      	beq.n	8005f8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005f88:	f04f 33ff 	mov.w	r3, #4294967295
 8005f8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	68b8      	ldr	r0, [r7, #8]
 8005f92:	f000 fa55 	bl	8006440 <prvAddCurrentTaskToDelayedList>
	}
 8005f96:	bf00      	nop
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20000928 	.word	0x20000928

08005fa4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10a      	bne.n	8005fd0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	60fb      	str	r3, [r7, #12]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	3318      	adds	r3, #24
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7fe fd7f 	bl	8004ad8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fda:	4b1e      	ldr	r3, [pc, #120]	; (8006054 <xTaskRemoveFromEventList+0xb0>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d11d      	bne.n	800601e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	3304      	adds	r3, #4
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fe fd76 	bl	8004ad8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff0:	4b19      	ldr	r3, [pc, #100]	; (8006058 <xTaskRemoveFromEventList+0xb4>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d903      	bls.n	8006000 <xTaskRemoveFromEventList+0x5c>
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffc:	4a16      	ldr	r2, [pc, #88]	; (8006058 <xTaskRemoveFromEventList+0xb4>)
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006004:	4613      	mov	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4a13      	ldr	r2, [pc, #76]	; (800605c <xTaskRemoveFromEventList+0xb8>)
 800600e:	441a      	add	r2, r3
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	3304      	adds	r3, #4
 8006014:	4619      	mov	r1, r3
 8006016:	4610      	mov	r0, r2
 8006018:	f7fe fd01 	bl	8004a1e <vListInsertEnd>
 800601c:	e005      	b.n	800602a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	3318      	adds	r3, #24
 8006022:	4619      	mov	r1, r3
 8006024:	480e      	ldr	r0, [pc, #56]	; (8006060 <xTaskRemoveFromEventList+0xbc>)
 8006026:	f7fe fcfa 	bl	8004a1e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602e:	4b0d      	ldr	r3, [pc, #52]	; (8006064 <xTaskRemoveFromEventList+0xc0>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	429a      	cmp	r2, r3
 8006036:	d905      	bls.n	8006044 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006038:	2301      	movs	r3, #1
 800603a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800603c:	4b0a      	ldr	r3, [pc, #40]	; (8006068 <xTaskRemoveFromEventList+0xc4>)
 800603e:	2201      	movs	r2, #1
 8006040:	601a      	str	r2, [r3, #0]
 8006042:	e001      	b.n	8006048 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006048:	697b      	ldr	r3, [r7, #20]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20000e24 	.word	0x20000e24
 8006058:	20000e04 	.word	0x20000e04
 800605c:	2000092c 	.word	0x2000092c
 8006060:	20000dbc 	.word	0x20000dbc
 8006064:	20000928 	.word	0x20000928
 8006068:	20000e10 	.word	0x20000e10

0800606c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006074:	4b06      	ldr	r3, [pc, #24]	; (8006090 <vTaskInternalSetTimeOutState+0x24>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <vTaskInternalSetTimeOutState+0x28>)
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	605a      	str	r2, [r3, #4]
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	20000e14 	.word	0x20000e14
 8006094:	20000e00 	.word	0x20000e00

08006098 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10a      	bne.n	80060be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80060a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	613b      	str	r3, [r7, #16]
}
 80060ba:	bf00      	nop
 80060bc:	e7fe      	b.n	80060bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10a      	bne.n	80060da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	60fb      	str	r3, [r7, #12]
}
 80060d6:	bf00      	nop
 80060d8:	e7fe      	b.n	80060d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80060da:	f000 fe83 	bl	8006de4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80060de:	4b1d      	ldr	r3, [pc, #116]	; (8006154 <xTaskCheckForTimeOut+0xbc>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f6:	d102      	bne.n	80060fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80060f8:	2300      	movs	r3, #0
 80060fa:	61fb      	str	r3, [r7, #28]
 80060fc:	e023      	b.n	8006146 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	4b15      	ldr	r3, [pc, #84]	; (8006158 <xTaskCheckForTimeOut+0xc0>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	429a      	cmp	r2, r3
 8006108:	d007      	beq.n	800611a <xTaskCheckForTimeOut+0x82>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	429a      	cmp	r2, r3
 8006112:	d302      	bcc.n	800611a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006114:	2301      	movs	r3, #1
 8006116:	61fb      	str	r3, [r7, #28]
 8006118:	e015      	b.n	8006146 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	429a      	cmp	r2, r3
 8006122:	d20b      	bcs.n	800613c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	1ad2      	subs	r2, r2, r3
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff ff9b 	bl	800606c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006136:	2300      	movs	r3, #0
 8006138:	61fb      	str	r3, [r7, #28]
 800613a:	e004      	b.n	8006146 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006142:	2301      	movs	r3, #1
 8006144:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006146:	f000 fe7d 	bl	8006e44 <vPortExitCritical>

	return xReturn;
 800614a:	69fb      	ldr	r3, [r7, #28]
}
 800614c:	4618      	mov	r0, r3
 800614e:	3720      	adds	r7, #32
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	20000e00 	.word	0x20000e00
 8006158:	20000e14 	.word	0x20000e14

0800615c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006160:	4b03      	ldr	r3, [pc, #12]	; (8006170 <vTaskMissedYield+0x14>)
 8006162:	2201      	movs	r2, #1
 8006164:	601a      	str	r2, [r3, #0]
}
 8006166:	bf00      	nop
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	20000e10 	.word	0x20000e10

08006174 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800617c:	f000 f852 	bl	8006224 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006180:	4b06      	ldr	r3, [pc, #24]	; (800619c <prvIdleTask+0x28>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d9f9      	bls.n	800617c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006188:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <prvIdleTask+0x2c>)
 800618a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006198:	e7f0      	b.n	800617c <prvIdleTask+0x8>
 800619a:	bf00      	nop
 800619c:	2000092c 	.word	0x2000092c
 80061a0:	e000ed04 	.word	0xe000ed04

080061a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061aa:	2300      	movs	r3, #0
 80061ac:	607b      	str	r3, [r7, #4]
 80061ae:	e00c      	b.n	80061ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	4613      	mov	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4a12      	ldr	r2, [pc, #72]	; (8006204 <prvInitialiseTaskLists+0x60>)
 80061bc:	4413      	add	r3, r2
 80061be:	4618      	mov	r0, r3
 80061c0:	f7fe fc00 	bl	80049c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3301      	adds	r3, #1
 80061c8:	607b      	str	r3, [r7, #4]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b37      	cmp	r3, #55	; 0x37
 80061ce:	d9ef      	bls.n	80061b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80061d0:	480d      	ldr	r0, [pc, #52]	; (8006208 <prvInitialiseTaskLists+0x64>)
 80061d2:	f7fe fbf7 	bl	80049c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80061d6:	480d      	ldr	r0, [pc, #52]	; (800620c <prvInitialiseTaskLists+0x68>)
 80061d8:	f7fe fbf4 	bl	80049c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80061dc:	480c      	ldr	r0, [pc, #48]	; (8006210 <prvInitialiseTaskLists+0x6c>)
 80061de:	f7fe fbf1 	bl	80049c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80061e2:	480c      	ldr	r0, [pc, #48]	; (8006214 <prvInitialiseTaskLists+0x70>)
 80061e4:	f7fe fbee 	bl	80049c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80061e8:	480b      	ldr	r0, [pc, #44]	; (8006218 <prvInitialiseTaskLists+0x74>)
 80061ea:	f7fe fbeb 	bl	80049c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80061ee:	4b0b      	ldr	r3, [pc, #44]	; (800621c <prvInitialiseTaskLists+0x78>)
 80061f0:	4a05      	ldr	r2, [pc, #20]	; (8006208 <prvInitialiseTaskLists+0x64>)
 80061f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80061f4:	4b0a      	ldr	r3, [pc, #40]	; (8006220 <prvInitialiseTaskLists+0x7c>)
 80061f6:	4a05      	ldr	r2, [pc, #20]	; (800620c <prvInitialiseTaskLists+0x68>)
 80061f8:	601a      	str	r2, [r3, #0]
}
 80061fa:	bf00      	nop
 80061fc:	3708      	adds	r7, #8
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	2000092c 	.word	0x2000092c
 8006208:	20000d8c 	.word	0x20000d8c
 800620c:	20000da0 	.word	0x20000da0
 8006210:	20000dbc 	.word	0x20000dbc
 8006214:	20000dd0 	.word	0x20000dd0
 8006218:	20000de8 	.word	0x20000de8
 800621c:	20000db4 	.word	0x20000db4
 8006220:	20000db8 	.word	0x20000db8

08006224 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800622a:	e019      	b.n	8006260 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800622c:	f000 fdda 	bl	8006de4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006230:	4b10      	ldr	r3, [pc, #64]	; (8006274 <prvCheckTasksWaitingTermination+0x50>)
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3304      	adds	r3, #4
 800623c:	4618      	mov	r0, r3
 800623e:	f7fe fc4b 	bl	8004ad8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006242:	4b0d      	ldr	r3, [pc, #52]	; (8006278 <prvCheckTasksWaitingTermination+0x54>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3b01      	subs	r3, #1
 8006248:	4a0b      	ldr	r2, [pc, #44]	; (8006278 <prvCheckTasksWaitingTermination+0x54>)
 800624a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800624c:	4b0b      	ldr	r3, [pc, #44]	; (800627c <prvCheckTasksWaitingTermination+0x58>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3b01      	subs	r3, #1
 8006252:	4a0a      	ldr	r2, [pc, #40]	; (800627c <prvCheckTasksWaitingTermination+0x58>)
 8006254:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006256:	f000 fdf5 	bl	8006e44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f810 	bl	8006280 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006260:	4b06      	ldr	r3, [pc, #24]	; (800627c <prvCheckTasksWaitingTermination+0x58>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1e1      	bne.n	800622c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006268:	bf00      	nop
 800626a:	bf00      	nop
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20000dd0 	.word	0x20000dd0
 8006278:	20000dfc 	.word	0x20000dfc
 800627c:	20000de4 	.word	0x20000de4

08006280 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	3354      	adds	r3, #84	; 0x54
 800628c:	4618      	mov	r0, r3
 800628e:	f001 fac3 	bl	8007818 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006298:	2b00      	cmp	r3, #0
 800629a:	d108      	bne.n	80062ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 ff8d 	bl	80071c0 <vPortFree>
				vPortFree( pxTCB );
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 ff8a 	bl	80071c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80062ac:	e018      	b.n	80062e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d103      	bne.n	80062c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 ff81 	bl	80071c0 <vPortFree>
	}
 80062be:	e00f      	b.n	80062e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d00a      	beq.n	80062e0 <prvDeleteTCB+0x60>
	__asm volatile
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	60fb      	str	r3, [r7, #12]
}
 80062dc:	bf00      	nop
 80062de:	e7fe      	b.n	80062de <prvDeleteTCB+0x5e>
	}
 80062e0:	bf00      	nop
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062ee:	4b0c      	ldr	r3, [pc, #48]	; (8006320 <prvResetNextTaskUnblockTime+0x38>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d104      	bne.n	8006302 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80062f8:	4b0a      	ldr	r3, [pc, #40]	; (8006324 <prvResetNextTaskUnblockTime+0x3c>)
 80062fa:	f04f 32ff 	mov.w	r2, #4294967295
 80062fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006300:	e008      	b.n	8006314 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006302:	4b07      	ldr	r3, [pc, #28]	; (8006320 <prvResetNextTaskUnblockTime+0x38>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	4a04      	ldr	r2, [pc, #16]	; (8006324 <prvResetNextTaskUnblockTime+0x3c>)
 8006312:	6013      	str	r3, [r2, #0]
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	20000db4 	.word	0x20000db4
 8006324:	20000e1c 	.word	0x20000e1c

08006328 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800632e:	4b0b      	ldr	r3, [pc, #44]	; (800635c <xTaskGetSchedulerState+0x34>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d102      	bne.n	800633c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006336:	2301      	movs	r3, #1
 8006338:	607b      	str	r3, [r7, #4]
 800633a:	e008      	b.n	800634e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800633c:	4b08      	ldr	r3, [pc, #32]	; (8006360 <xTaskGetSchedulerState+0x38>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d102      	bne.n	800634a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006344:	2302      	movs	r3, #2
 8006346:	607b      	str	r3, [r7, #4]
 8006348:	e001      	b.n	800634e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800634a:	2300      	movs	r3, #0
 800634c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800634e:	687b      	ldr	r3, [r7, #4]
	}
 8006350:	4618      	mov	r0, r3
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	20000e08 	.word	0x20000e08
 8006360:	20000e24 	.word	0x20000e24

08006364 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006370:	2300      	movs	r3, #0
 8006372:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d056      	beq.n	8006428 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800637a:	4b2e      	ldr	r3, [pc, #184]	; (8006434 <xTaskPriorityDisinherit+0xd0>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	429a      	cmp	r2, r3
 8006382:	d00a      	beq.n	800639a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	f383 8811 	msr	BASEPRI, r3
 800638c:	f3bf 8f6f 	isb	sy
 8006390:	f3bf 8f4f 	dsb	sy
 8006394:	60fb      	str	r3, [r7, #12]
}
 8006396:	bf00      	nop
 8006398:	e7fe      	b.n	8006398 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10a      	bne.n	80063b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	60bb      	str	r3, [r7, #8]
}
 80063b4:	bf00      	nop
 80063b6:	e7fe      	b.n	80063b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063bc:	1e5a      	subs	r2, r3, #1
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d02c      	beq.n	8006428 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d128      	bne.n	8006428 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	3304      	adds	r3, #4
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fe fb7c 	bl	8004ad8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f8:	4b0f      	ldr	r3, [pc, #60]	; (8006438 <xTaskPriorityDisinherit+0xd4>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d903      	bls.n	8006408 <xTaskPriorityDisinherit+0xa4>
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006404:	4a0c      	ldr	r2, [pc, #48]	; (8006438 <xTaskPriorityDisinherit+0xd4>)
 8006406:	6013      	str	r3, [r2, #0]
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800640c:	4613      	mov	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4a09      	ldr	r2, [pc, #36]	; (800643c <xTaskPriorityDisinherit+0xd8>)
 8006416:	441a      	add	r2, r3
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	3304      	adds	r3, #4
 800641c:	4619      	mov	r1, r3
 800641e:	4610      	mov	r0, r2
 8006420:	f7fe fafd 	bl	8004a1e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006424:	2301      	movs	r3, #1
 8006426:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006428:	697b      	ldr	r3, [r7, #20]
	}
 800642a:	4618      	mov	r0, r3
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20000928 	.word	0x20000928
 8006438:	20000e04 	.word	0x20000e04
 800643c:	2000092c 	.word	0x2000092c

08006440 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800644a:	4b21      	ldr	r3, [pc, #132]	; (80064d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006450:	4b20      	ldr	r3, [pc, #128]	; (80064d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3304      	adds	r3, #4
 8006456:	4618      	mov	r0, r3
 8006458:	f7fe fb3e 	bl	8004ad8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006462:	d10a      	bne.n	800647a <prvAddCurrentTaskToDelayedList+0x3a>
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d007      	beq.n	800647a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800646a:	4b1a      	ldr	r3, [pc, #104]	; (80064d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3304      	adds	r3, #4
 8006470:	4619      	mov	r1, r3
 8006472:	4819      	ldr	r0, [pc, #100]	; (80064d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006474:	f7fe fad3 	bl	8004a1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006478:	e026      	b.n	80064c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4413      	add	r3, r2
 8006480:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006482:	4b14      	ldr	r3, [pc, #80]	; (80064d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	429a      	cmp	r2, r3
 8006490:	d209      	bcs.n	80064a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006492:	4b12      	ldr	r3, [pc, #72]	; (80064dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	4b0f      	ldr	r3, [pc, #60]	; (80064d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3304      	adds	r3, #4
 800649c:	4619      	mov	r1, r3
 800649e:	4610      	mov	r0, r2
 80064a0:	f7fe fae1 	bl	8004a66 <vListInsert>
}
 80064a4:	e010      	b.n	80064c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064a6:	4b0e      	ldr	r3, [pc, #56]	; (80064e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	4b0a      	ldr	r3, [pc, #40]	; (80064d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3304      	adds	r3, #4
 80064b0:	4619      	mov	r1, r3
 80064b2:	4610      	mov	r0, r2
 80064b4:	f7fe fad7 	bl	8004a66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80064b8:	4b0a      	ldr	r3, [pc, #40]	; (80064e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d202      	bcs.n	80064c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80064c2:	4a08      	ldr	r2, [pc, #32]	; (80064e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	6013      	str	r3, [r2, #0]
}
 80064c8:	bf00      	nop
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	20000e00 	.word	0x20000e00
 80064d4:	20000928 	.word	0x20000928
 80064d8:	20000de8 	.word	0x20000de8
 80064dc:	20000db8 	.word	0x20000db8
 80064e0:	20000db4 	.word	0x20000db4
 80064e4:	20000e1c 	.word	0x20000e1c

080064e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08a      	sub	sp, #40	; 0x28
 80064ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80064f2:	f000 fb07 	bl	8006b04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80064f6:	4b1c      	ldr	r3, [pc, #112]	; (8006568 <xTimerCreateTimerTask+0x80>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d021      	beq.n	8006542 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006502:	2300      	movs	r3, #0
 8006504:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006506:	1d3a      	adds	r2, r7, #4
 8006508:	f107 0108 	add.w	r1, r7, #8
 800650c:	f107 030c 	add.w	r3, r7, #12
 8006510:	4618      	mov	r0, r3
 8006512:	f7fe fa3d 	bl	8004990 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006516:	6879      	ldr	r1, [r7, #4]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	9202      	str	r2, [sp, #8]
 800651e:	9301      	str	r3, [sp, #4]
 8006520:	2302      	movs	r3, #2
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	2300      	movs	r3, #0
 8006526:	460a      	mov	r2, r1
 8006528:	4910      	ldr	r1, [pc, #64]	; (800656c <xTimerCreateTimerTask+0x84>)
 800652a:	4811      	ldr	r0, [pc, #68]	; (8006570 <xTimerCreateTimerTask+0x88>)
 800652c:	f7ff f8a4 	bl	8005678 <xTaskCreateStatic>
 8006530:	4603      	mov	r3, r0
 8006532:	4a10      	ldr	r2, [pc, #64]	; (8006574 <xTimerCreateTimerTask+0x8c>)
 8006534:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006536:	4b0f      	ldr	r3, [pc, #60]	; (8006574 <xTimerCreateTimerTask+0x8c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d001      	beq.n	8006542 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800653e:	2301      	movs	r3, #1
 8006540:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10a      	bne.n	800655e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	613b      	str	r3, [r7, #16]
}
 800655a:	bf00      	nop
 800655c:	e7fe      	b.n	800655c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800655e:	697b      	ldr	r3, [r7, #20]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	20000e58 	.word	0x20000e58
 800656c:	080084b8 	.word	0x080084b8
 8006570:	080066ad 	.word	0x080066ad
 8006574:	20000e5c 	.word	0x20000e5c

08006578 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08a      	sub	sp, #40	; 0x28
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006586:	2300      	movs	r3, #0
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	623b      	str	r3, [r7, #32]
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80065a6:	4b1a      	ldr	r3, [pc, #104]	; (8006610 <xTimerGenericCommand+0x98>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d02a      	beq.n	8006604 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2b05      	cmp	r3, #5
 80065be:	dc18      	bgt.n	80065f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80065c0:	f7ff feb2 	bl	8006328 <xTaskGetSchedulerState>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d109      	bne.n	80065de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80065ca:	4b11      	ldr	r3, [pc, #68]	; (8006610 <xTimerGenericCommand+0x98>)
 80065cc:	6818      	ldr	r0, [r3, #0]
 80065ce:	f107 0110 	add.w	r1, r7, #16
 80065d2:	2300      	movs	r3, #0
 80065d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d6:	f7fe fbe7 	bl	8004da8 <xQueueGenericSend>
 80065da:	6278      	str	r0, [r7, #36]	; 0x24
 80065dc:	e012      	b.n	8006604 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80065de:	4b0c      	ldr	r3, [pc, #48]	; (8006610 <xTimerGenericCommand+0x98>)
 80065e0:	6818      	ldr	r0, [r3, #0]
 80065e2:	f107 0110 	add.w	r1, r7, #16
 80065e6:	2300      	movs	r3, #0
 80065e8:	2200      	movs	r2, #0
 80065ea:	f7fe fbdd 	bl	8004da8 <xQueueGenericSend>
 80065ee:	6278      	str	r0, [r7, #36]	; 0x24
 80065f0:	e008      	b.n	8006604 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80065f2:	4b07      	ldr	r3, [pc, #28]	; (8006610 <xTimerGenericCommand+0x98>)
 80065f4:	6818      	ldr	r0, [r3, #0]
 80065f6:	f107 0110 	add.w	r1, r7, #16
 80065fa:	2300      	movs	r3, #0
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	f7fe fcd1 	bl	8004fa4 <xQueueGenericSendFromISR>
 8006602:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006606:	4618      	mov	r0, r3
 8006608:	3728      	adds	r7, #40	; 0x28
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20000e58 	.word	0x20000e58

08006614 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af02      	add	r7, sp, #8
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800661e:	4b22      	ldr	r3, [pc, #136]	; (80066a8 <prvProcessExpiredTimer+0x94>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	3304      	adds	r3, #4
 800662c:	4618      	mov	r0, r3
 800662e:	f7fe fa53 	bl	8004ad8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	d022      	beq.n	8006686 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	699a      	ldr	r2, [r3, #24]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	18d1      	adds	r1, r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	6978      	ldr	r0, [r7, #20]
 800664e:	f000 f8d1 	bl	80067f4 <prvInsertTimerInActiveList>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d01f      	beq.n	8006698 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006658:	2300      	movs	r3, #0
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	2300      	movs	r3, #0
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	2100      	movs	r1, #0
 8006662:	6978      	ldr	r0, [r7, #20]
 8006664:	f7ff ff88 	bl	8006578 <xTimerGenericCommand>
 8006668:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d113      	bne.n	8006698 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	60fb      	str	r3, [r7, #12]
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800668c:	f023 0301 	bic.w	r3, r3, #1
 8006690:	b2da      	uxtb	r2, r3
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	6978      	ldr	r0, [r7, #20]
 800669e:	4798      	blx	r3
}
 80066a0:	bf00      	nop
 80066a2:	3718      	adds	r7, #24
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	20000e50 	.word	0x20000e50

080066ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066b4:	f107 0308 	add.w	r3, r7, #8
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 f857 	bl	800676c <prvGetNextExpireTime>
 80066be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	4619      	mov	r1, r3
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f000 f803 	bl	80066d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80066ca:	f000 f8d5 	bl	8006878 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066ce:	e7f1      	b.n	80066b4 <prvTimerTask+0x8>

080066d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80066da:	f7ff fa29 	bl	8005b30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066de:	f107 0308 	add.w	r3, r7, #8
 80066e2:	4618      	mov	r0, r3
 80066e4:	f000 f866 	bl	80067b4 <prvSampleTimeNow>
 80066e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d130      	bne.n	8006752 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10a      	bne.n	800670c <prvProcessTimerOrBlockTask+0x3c>
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d806      	bhi.n	800670c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80066fe:	f7ff fa25 	bl	8005b4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006702:	68f9      	ldr	r1, [r7, #12]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7ff ff85 	bl	8006614 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800670a:	e024      	b.n	8006756 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d008      	beq.n	8006724 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006712:	4b13      	ldr	r3, [pc, #76]	; (8006760 <prvProcessTimerOrBlockTask+0x90>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <prvProcessTimerOrBlockTask+0x50>
 800671c:	2301      	movs	r3, #1
 800671e:	e000      	b.n	8006722 <prvProcessTimerOrBlockTask+0x52>
 8006720:	2300      	movs	r3, #0
 8006722:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006724:	4b0f      	ldr	r3, [pc, #60]	; (8006764 <prvProcessTimerOrBlockTask+0x94>)
 8006726:	6818      	ldr	r0, [r3, #0]
 8006728:	687a      	ldr	r2, [r7, #4]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	4619      	mov	r1, r3
 8006732:	f7fe ff6d 	bl	8005610 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006736:	f7ff fa09 	bl	8005b4c <xTaskResumeAll>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10a      	bne.n	8006756 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006740:	4b09      	ldr	r3, [pc, #36]	; (8006768 <prvProcessTimerOrBlockTask+0x98>)
 8006742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006746:	601a      	str	r2, [r3, #0]
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	f3bf 8f6f 	isb	sy
}
 8006750:	e001      	b.n	8006756 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006752:	f7ff f9fb 	bl	8005b4c <xTaskResumeAll>
}
 8006756:	bf00      	nop
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	20000e54 	.word	0x20000e54
 8006764:	20000e58 	.word	0x20000e58
 8006768:	e000ed04 	.word	0xe000ed04

0800676c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006774:	4b0e      	ldr	r3, [pc, #56]	; (80067b0 <prvGetNextExpireTime+0x44>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <prvGetNextExpireTime+0x16>
 800677e:	2201      	movs	r2, #1
 8006780:	e000      	b.n	8006784 <prvGetNextExpireTime+0x18>
 8006782:	2200      	movs	r2, #0
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d105      	bne.n	800679c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006790:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <prvGetNextExpireTime+0x44>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	e001      	b.n	80067a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800679c:	2300      	movs	r3, #0
 800679e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80067a0:	68fb      	ldr	r3, [r7, #12]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	20000e50 	.word	0x20000e50

080067b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80067bc:	f7ff fa64 	bl	8005c88 <xTaskGetTickCount>
 80067c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80067c2:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <prvSampleTimeNow+0x3c>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d205      	bcs.n	80067d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80067cc:	f000 f936 	bl	8006a3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	e002      	b.n	80067de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80067de:	4a04      	ldr	r2, [pc, #16]	; (80067f0 <prvSampleTimeNow+0x3c>)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80067e4:	68fb      	ldr	r3, [r7, #12]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20000e60 	.word	0x20000e60

080067f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006802:	2300      	movs	r3, #0
 8006804:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	429a      	cmp	r2, r3
 8006818:	d812      	bhi.n	8006840 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	1ad2      	subs	r2, r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	429a      	cmp	r2, r3
 8006826:	d302      	bcc.n	800682e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006828:	2301      	movs	r3, #1
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	e01b      	b.n	8006866 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800682e:	4b10      	ldr	r3, [pc, #64]	; (8006870 <prvInsertTimerInActiveList+0x7c>)
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3304      	adds	r3, #4
 8006836:	4619      	mov	r1, r3
 8006838:	4610      	mov	r0, r2
 800683a:	f7fe f914 	bl	8004a66 <vListInsert>
 800683e:	e012      	b.n	8006866 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	429a      	cmp	r2, r3
 8006846:	d206      	bcs.n	8006856 <prvInsertTimerInActiveList+0x62>
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	429a      	cmp	r2, r3
 800684e:	d302      	bcc.n	8006856 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006850:	2301      	movs	r3, #1
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	e007      	b.n	8006866 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006856:	4b07      	ldr	r3, [pc, #28]	; (8006874 <prvInsertTimerInActiveList+0x80>)
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3304      	adds	r3, #4
 800685e:	4619      	mov	r1, r3
 8006860:	4610      	mov	r0, r2
 8006862:	f7fe f900 	bl	8004a66 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006866:	697b      	ldr	r3, [r7, #20]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3718      	adds	r7, #24
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	20000e54 	.word	0x20000e54
 8006874:	20000e50 	.word	0x20000e50

08006878 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b08e      	sub	sp, #56	; 0x38
 800687c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800687e:	e0ca      	b.n	8006a16 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	da18      	bge.n	80068b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006886:	1d3b      	adds	r3, r7, #4
 8006888:	3304      	adds	r3, #4
 800688a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10a      	bne.n	80068a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	61fb      	str	r3, [r7, #28]
}
 80068a4:	bf00      	nop
 80068a6:	e7fe      	b.n	80068a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80068a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ae:	6850      	ldr	r0, [r2, #4]
 80068b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068b2:	6892      	ldr	r2, [r2, #8]
 80068b4:	4611      	mov	r1, r2
 80068b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f2c0 80ab 	blt.w	8006a16 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80068c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d004      	beq.n	80068d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ce:	3304      	adds	r3, #4
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fe f901 	bl	8004ad8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068d6:	463b      	mov	r3, r7
 80068d8:	4618      	mov	r0, r3
 80068da:	f7ff ff6b 	bl	80067b4 <prvSampleTimeNow>
 80068de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b09      	cmp	r3, #9
 80068e4:	f200 8096 	bhi.w	8006a14 <prvProcessReceivedCommands+0x19c>
 80068e8:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <prvProcessReceivedCommands+0x78>)
 80068ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ee:	bf00      	nop
 80068f0:	08006919 	.word	0x08006919
 80068f4:	08006919 	.word	0x08006919
 80068f8:	08006919 	.word	0x08006919
 80068fc:	0800698d 	.word	0x0800698d
 8006900:	080069a1 	.word	0x080069a1
 8006904:	080069eb 	.word	0x080069eb
 8006908:	08006919 	.word	0x08006919
 800690c:	08006919 	.word	0x08006919
 8006910:	0800698d 	.word	0x0800698d
 8006914:	080069a1 	.word	0x080069a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800691e:	f043 0301 	orr.w	r3, r3, #1
 8006922:	b2da      	uxtb	r2, r3
 8006924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006926:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	18d1      	adds	r1, r2, r3
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006938:	f7ff ff5c 	bl	80067f4 <prvInsertTimerInActiveList>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d069      	beq.n	8006a16 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006948:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b00      	cmp	r3, #0
 8006956:	d05e      	beq.n	8006a16 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	441a      	add	r2, r3
 8006960:	2300      	movs	r3, #0
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	2300      	movs	r3, #0
 8006966:	2100      	movs	r1, #0
 8006968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800696a:	f7ff fe05 	bl	8006578 <xTimerGenericCommand>
 800696e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006970:	6a3b      	ldr	r3, [r7, #32]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d14f      	bne.n	8006a16 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	61bb      	str	r3, [r7, #24]
}
 8006988:	bf00      	nop
 800698a:	e7fe      	b.n	800698a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006992:	f023 0301 	bic.w	r3, r3, #1
 8006996:	b2da      	uxtb	r2, r3
 8006998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800699e:	e03a      	b.n	8006a16 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069a6:	f043 0301 	orr.w	r3, r3, #1
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10a      	bne.n	80069d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80069c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	617b      	str	r3, [r7, #20]
}
 80069d2:	bf00      	nop
 80069d4:	e7fe      	b.n	80069d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80069d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d8:	699a      	ldr	r2, [r3, #24]
 80069da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069dc:	18d1      	adds	r1, r2, r3
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069e4:	f7ff ff06 	bl	80067f4 <prvInsertTimerInActiveList>
					break;
 80069e8:	e015      	b.n	8006a16 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80069ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069f0:	f003 0302 	and.w	r3, r3, #2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d103      	bne.n	8006a00 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80069f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069fa:	f000 fbe1 	bl	80071c0 <vPortFree>
 80069fe:	e00a      	b.n	8006a16 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a06:	f023 0301 	bic.w	r3, r3, #1
 8006a0a:	b2da      	uxtb	r2, r3
 8006a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a12:	e000      	b.n	8006a16 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006a14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a16:	4b08      	ldr	r3, [pc, #32]	; (8006a38 <prvProcessReceivedCommands+0x1c0>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	1d39      	adds	r1, r7, #4
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe fb5c 	bl	80050dc <xQueueReceive>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f47f af2a 	bne.w	8006880 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006a2c:	bf00      	nop
 8006a2e:	bf00      	nop
 8006a30:	3730      	adds	r7, #48	; 0x30
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000e58 	.word	0x20000e58

08006a3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b088      	sub	sp, #32
 8006a40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a42:	e048      	b.n	8006ad6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a44:	4b2d      	ldr	r3, [pc, #180]	; (8006afc <prvSwitchTimerLists+0xc0>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a4e:	4b2b      	ldr	r3, [pc, #172]	; (8006afc <prvSwitchTimerLists+0xc0>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fe f83b 	bl	8004ad8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a70:	f003 0304 	and.w	r3, r3, #4
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d02e      	beq.n	8006ad6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	4413      	add	r3, r2
 8006a80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d90e      	bls.n	8006aa8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a96:	4b19      	ldr	r3, [pc, #100]	; (8006afc <prvSwitchTimerLists+0xc0>)
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	f7fd ffe0 	bl	8004a66 <vListInsert>
 8006aa6:	e016      	b.n	8006ad6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	2300      	movs	r3, #0
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f7ff fd60 	bl	8006578 <xTimerGenericCommand>
 8006ab8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10a      	bne.n	8006ad6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	603b      	str	r3, [r7, #0]
}
 8006ad2:	bf00      	nop
 8006ad4:	e7fe      	b.n	8006ad4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ad6:	4b09      	ldr	r3, [pc, #36]	; (8006afc <prvSwitchTimerLists+0xc0>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1b1      	bne.n	8006a44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ae0:	4b06      	ldr	r3, [pc, #24]	; (8006afc <prvSwitchTimerLists+0xc0>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006ae6:	4b06      	ldr	r3, [pc, #24]	; (8006b00 <prvSwitchTimerLists+0xc4>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a04      	ldr	r2, [pc, #16]	; (8006afc <prvSwitchTimerLists+0xc0>)
 8006aec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006aee:	4a04      	ldr	r2, [pc, #16]	; (8006b00 <prvSwitchTimerLists+0xc4>)
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	6013      	str	r3, [r2, #0]
}
 8006af4:	bf00      	nop
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	20000e50 	.word	0x20000e50
 8006b00:	20000e54 	.word	0x20000e54

08006b04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b0a:	f000 f96b 	bl	8006de4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b0e:	4b15      	ldr	r3, [pc, #84]	; (8006b64 <prvCheckForValidListAndQueue+0x60>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d120      	bne.n	8006b58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b16:	4814      	ldr	r0, [pc, #80]	; (8006b68 <prvCheckForValidListAndQueue+0x64>)
 8006b18:	f7fd ff54 	bl	80049c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b1c:	4813      	ldr	r0, [pc, #76]	; (8006b6c <prvCheckForValidListAndQueue+0x68>)
 8006b1e:	f7fd ff51 	bl	80049c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b22:	4b13      	ldr	r3, [pc, #76]	; (8006b70 <prvCheckForValidListAndQueue+0x6c>)
 8006b24:	4a10      	ldr	r2, [pc, #64]	; (8006b68 <prvCheckForValidListAndQueue+0x64>)
 8006b26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b28:	4b12      	ldr	r3, [pc, #72]	; (8006b74 <prvCheckForValidListAndQueue+0x70>)
 8006b2a:	4a10      	ldr	r2, [pc, #64]	; (8006b6c <prvCheckForValidListAndQueue+0x68>)
 8006b2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b2e:	2300      	movs	r3, #0
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	4b11      	ldr	r3, [pc, #68]	; (8006b78 <prvCheckForValidListAndQueue+0x74>)
 8006b34:	4a11      	ldr	r2, [pc, #68]	; (8006b7c <prvCheckForValidListAndQueue+0x78>)
 8006b36:	2110      	movs	r1, #16
 8006b38:	200a      	movs	r0, #10
 8006b3a:	f7fe f85f 	bl	8004bfc <xQueueGenericCreateStatic>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	4a08      	ldr	r2, [pc, #32]	; (8006b64 <prvCheckForValidListAndQueue+0x60>)
 8006b42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b44:	4b07      	ldr	r3, [pc, #28]	; (8006b64 <prvCheckForValidListAndQueue+0x60>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d005      	beq.n	8006b58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b4c:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <prvCheckForValidListAndQueue+0x60>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	490b      	ldr	r1, [pc, #44]	; (8006b80 <prvCheckForValidListAndQueue+0x7c>)
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fe fd32 	bl	80055bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b58:	f000 f974 	bl	8006e44 <vPortExitCritical>
}
 8006b5c:	bf00      	nop
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	20000e58 	.word	0x20000e58
 8006b68:	20000e28 	.word	0x20000e28
 8006b6c:	20000e3c 	.word	0x20000e3c
 8006b70:	20000e50 	.word	0x20000e50
 8006b74:	20000e54 	.word	0x20000e54
 8006b78:	20000f04 	.word	0x20000f04
 8006b7c:	20000e64 	.word	0x20000e64
 8006b80:	080084c0 	.word	0x080084c0

08006b84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	3b04      	subs	r3, #4
 8006b94:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	3b04      	subs	r3, #4
 8006ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f023 0201 	bic.w	r2, r3, #1
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3b04      	subs	r3, #4
 8006bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006bb4:	4a0c      	ldr	r2, [pc, #48]	; (8006be8 <pxPortInitialiseStack+0x64>)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3b14      	subs	r3, #20
 8006bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	3b04      	subs	r3, #4
 8006bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f06f 0202 	mvn.w	r2, #2
 8006bd2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	3b20      	subs	r3, #32
 8006bd8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bda:	68fb      	ldr	r3, [r7, #12]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	08006bed 	.word	0x08006bed

08006bec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006bec:	b480      	push	{r7}
 8006bee:	b085      	sub	sp, #20
 8006bf0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006bf6:	4b12      	ldr	r3, [pc, #72]	; (8006c40 <prvTaskExitError+0x54>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfe:	d00a      	beq.n	8006c16 <prvTaskExitError+0x2a>
	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	60fb      	str	r3, [r7, #12]
}
 8006c12:	bf00      	nop
 8006c14:	e7fe      	b.n	8006c14 <prvTaskExitError+0x28>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	60bb      	str	r3, [r7, #8]
}
 8006c28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c2a:	bf00      	nop
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0fc      	beq.n	8006c2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c32:	bf00      	nop
 8006c34:	bf00      	nop
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	20000010 	.word	0x20000010
	...

08006c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c50:	4b07      	ldr	r3, [pc, #28]	; (8006c70 <pxCurrentTCBConst2>)
 8006c52:	6819      	ldr	r1, [r3, #0]
 8006c54:	6808      	ldr	r0, [r1, #0]
 8006c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c5a:	f380 8809 	msr	PSP, r0
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f04f 0000 	mov.w	r0, #0
 8006c66:	f380 8811 	msr	BASEPRI, r0
 8006c6a:	4770      	bx	lr
 8006c6c:	f3af 8000 	nop.w

08006c70 <pxCurrentTCBConst2>:
 8006c70:	20000928 	.word	0x20000928
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop

08006c78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c78:	4808      	ldr	r0, [pc, #32]	; (8006c9c <prvPortStartFirstTask+0x24>)
 8006c7a:	6800      	ldr	r0, [r0, #0]
 8006c7c:	6800      	ldr	r0, [r0, #0]
 8006c7e:	f380 8808 	msr	MSP, r0
 8006c82:	f04f 0000 	mov.w	r0, #0
 8006c86:	f380 8814 	msr	CONTROL, r0
 8006c8a:	b662      	cpsie	i
 8006c8c:	b661      	cpsie	f
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	df00      	svc	0
 8006c98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c9a:	bf00      	nop
 8006c9c:	e000ed08 	.word	0xe000ed08

08006ca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ca6:	4b46      	ldr	r3, [pc, #280]	; (8006dc0 <xPortStartScheduler+0x120>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a46      	ldr	r2, [pc, #280]	; (8006dc4 <xPortStartScheduler+0x124>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d10a      	bne.n	8006cc6 <xPortStartScheduler+0x26>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	613b      	str	r3, [r7, #16]
}
 8006cc2:	bf00      	nop
 8006cc4:	e7fe      	b.n	8006cc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006cc6:	4b3e      	ldr	r3, [pc, #248]	; (8006dc0 <xPortStartScheduler+0x120>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a3f      	ldr	r2, [pc, #252]	; (8006dc8 <xPortStartScheduler+0x128>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d10a      	bne.n	8006ce6 <xPortStartScheduler+0x46>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	60fb      	str	r3, [r7, #12]
}
 8006ce2:	bf00      	nop
 8006ce4:	e7fe      	b.n	8006ce4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ce6:	4b39      	ldr	r3, [pc, #228]	; (8006dcc <xPortStartScheduler+0x12c>)
 8006ce8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	22ff      	movs	r2, #255	; 0xff
 8006cf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d00:	78fb      	ldrb	r3, [r7, #3]
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	4b31      	ldr	r3, [pc, #196]	; (8006dd0 <xPortStartScheduler+0x130>)
 8006d0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d0e:	4b31      	ldr	r3, [pc, #196]	; (8006dd4 <xPortStartScheduler+0x134>)
 8006d10:	2207      	movs	r2, #7
 8006d12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d14:	e009      	b.n	8006d2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006d16:	4b2f      	ldr	r3, [pc, #188]	; (8006dd4 <xPortStartScheduler+0x134>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3b01      	subs	r3, #1
 8006d1c:	4a2d      	ldr	r2, [pc, #180]	; (8006dd4 <xPortStartScheduler+0x134>)
 8006d1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	005b      	lsls	r3, r3, #1
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d2a:	78fb      	ldrb	r3, [r7, #3]
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d32:	2b80      	cmp	r3, #128	; 0x80
 8006d34:	d0ef      	beq.n	8006d16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d36:	4b27      	ldr	r3, [pc, #156]	; (8006dd4 <xPortStartScheduler+0x134>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f1c3 0307 	rsb	r3, r3, #7
 8006d3e:	2b04      	cmp	r3, #4
 8006d40:	d00a      	beq.n	8006d58 <xPortStartScheduler+0xb8>
	__asm volatile
 8006d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d46:	f383 8811 	msr	BASEPRI, r3
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	60bb      	str	r3, [r7, #8]
}
 8006d54:	bf00      	nop
 8006d56:	e7fe      	b.n	8006d56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d58:	4b1e      	ldr	r3, [pc, #120]	; (8006dd4 <xPortStartScheduler+0x134>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	021b      	lsls	r3, r3, #8
 8006d5e:	4a1d      	ldr	r2, [pc, #116]	; (8006dd4 <xPortStartScheduler+0x134>)
 8006d60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d62:	4b1c      	ldr	r3, [pc, #112]	; (8006dd4 <xPortStartScheduler+0x134>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d6a:	4a1a      	ldr	r2, [pc, #104]	; (8006dd4 <xPortStartScheduler+0x134>)
 8006d6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d76:	4b18      	ldr	r3, [pc, #96]	; (8006dd8 <xPortStartScheduler+0x138>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a17      	ldr	r2, [pc, #92]	; (8006dd8 <xPortStartScheduler+0x138>)
 8006d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d82:	4b15      	ldr	r3, [pc, #84]	; (8006dd8 <xPortStartScheduler+0x138>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a14      	ldr	r2, [pc, #80]	; (8006dd8 <xPortStartScheduler+0x138>)
 8006d88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d8e:	f000 f8dd 	bl	8006f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d92:	4b12      	ldr	r3, [pc, #72]	; (8006ddc <xPortStartScheduler+0x13c>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d98:	f000 f8fc 	bl	8006f94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d9c:	4b10      	ldr	r3, [pc, #64]	; (8006de0 <xPortStartScheduler+0x140>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a0f      	ldr	r2, [pc, #60]	; (8006de0 <xPortStartScheduler+0x140>)
 8006da2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006da6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006da8:	f7ff ff66 	bl	8006c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006dac:	f7ff f836 	bl	8005e1c <vTaskSwitchContext>
	prvTaskExitError();
 8006db0:	f7ff ff1c 	bl	8006bec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	e000ed00 	.word	0xe000ed00
 8006dc4:	410fc271 	.word	0x410fc271
 8006dc8:	410fc270 	.word	0x410fc270
 8006dcc:	e000e400 	.word	0xe000e400
 8006dd0:	20000f54 	.word	0x20000f54
 8006dd4:	20000f58 	.word	0x20000f58
 8006dd8:	e000ed20 	.word	0xe000ed20
 8006ddc:	20000010 	.word	0x20000010
 8006de0:	e000ef34 	.word	0xe000ef34

08006de4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
	__asm volatile
 8006dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	607b      	str	r3, [r7, #4]
}
 8006dfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006dfe:	4b0f      	ldr	r3, [pc, #60]	; (8006e3c <vPortEnterCritical+0x58>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3301      	adds	r3, #1
 8006e04:	4a0d      	ldr	r2, [pc, #52]	; (8006e3c <vPortEnterCritical+0x58>)
 8006e06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e08:	4b0c      	ldr	r3, [pc, #48]	; (8006e3c <vPortEnterCritical+0x58>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d10f      	bne.n	8006e30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e10:	4b0b      	ldr	r3, [pc, #44]	; (8006e40 <vPortEnterCritical+0x5c>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00a      	beq.n	8006e30 <vPortEnterCritical+0x4c>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	603b      	str	r3, [r7, #0]
}
 8006e2c:	bf00      	nop
 8006e2e:	e7fe      	b.n	8006e2e <vPortEnterCritical+0x4a>
	}
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	20000010 	.word	0x20000010
 8006e40:	e000ed04 	.word	0xe000ed04

08006e44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e4a:	4b12      	ldr	r3, [pc, #72]	; (8006e94 <vPortExitCritical+0x50>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10a      	bne.n	8006e68 <vPortExitCritical+0x24>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	607b      	str	r3, [r7, #4]
}
 8006e64:	bf00      	nop
 8006e66:	e7fe      	b.n	8006e66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e68:	4b0a      	ldr	r3, [pc, #40]	; (8006e94 <vPortExitCritical+0x50>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	4a09      	ldr	r2, [pc, #36]	; (8006e94 <vPortExitCritical+0x50>)
 8006e70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e72:	4b08      	ldr	r3, [pc, #32]	; (8006e94 <vPortExitCritical+0x50>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d105      	bne.n	8006e86 <vPortExitCritical+0x42>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	f383 8811 	msr	BASEPRI, r3
}
 8006e84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e86:	bf00      	nop
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	20000010 	.word	0x20000010
	...

08006ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ea0:	f3ef 8009 	mrs	r0, PSP
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	4b15      	ldr	r3, [pc, #84]	; (8006f00 <pxCurrentTCBConst>)
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	f01e 0f10 	tst.w	lr, #16
 8006eb0:	bf08      	it	eq
 8006eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eba:	6010      	str	r0, [r2, #0]
 8006ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ec0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006ec4:	f380 8811 	msr	BASEPRI, r0
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f7fe ffa4 	bl	8005e1c <vTaskSwitchContext>
 8006ed4:	f04f 0000 	mov.w	r0, #0
 8006ed8:	f380 8811 	msr	BASEPRI, r0
 8006edc:	bc09      	pop	{r0, r3}
 8006ede:	6819      	ldr	r1, [r3, #0]
 8006ee0:	6808      	ldr	r0, [r1, #0]
 8006ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee6:	f01e 0f10 	tst.w	lr, #16
 8006eea:	bf08      	it	eq
 8006eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ef0:	f380 8809 	msr	PSP, r0
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	f3af 8000 	nop.w

08006f00 <pxCurrentTCBConst>:
 8006f00:	20000928 	.word	0x20000928
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f04:	bf00      	nop
 8006f06:	bf00      	nop

08006f08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	607b      	str	r3, [r7, #4]
}
 8006f20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f22:	f7fe fec1 	bl	8005ca8 <xTaskIncrementTick>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d003      	beq.n	8006f34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f2c:	4b06      	ldr	r3, [pc, #24]	; (8006f48 <xPortSysTickHandler+0x40>)
 8006f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	2300      	movs	r3, #0
 8006f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	f383 8811 	msr	BASEPRI, r3
}
 8006f3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f40:	bf00      	nop
 8006f42:	3708      	adds	r7, #8
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	e000ed04 	.word	0xe000ed04

08006f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f50:	4b0b      	ldr	r3, [pc, #44]	; (8006f80 <vPortSetupTimerInterrupt+0x34>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f56:	4b0b      	ldr	r3, [pc, #44]	; (8006f84 <vPortSetupTimerInterrupt+0x38>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f5c:	4b0a      	ldr	r3, [pc, #40]	; (8006f88 <vPortSetupTimerInterrupt+0x3c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a0a      	ldr	r2, [pc, #40]	; (8006f8c <vPortSetupTimerInterrupt+0x40>)
 8006f62:	fba2 2303 	umull	r2, r3, r2, r3
 8006f66:	099b      	lsrs	r3, r3, #6
 8006f68:	4a09      	ldr	r2, [pc, #36]	; (8006f90 <vPortSetupTimerInterrupt+0x44>)
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f6e:	4b04      	ldr	r3, [pc, #16]	; (8006f80 <vPortSetupTimerInterrupt+0x34>)
 8006f70:	2207      	movs	r2, #7
 8006f72:	601a      	str	r2, [r3, #0]
}
 8006f74:	bf00      	nop
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	e000e010 	.word	0xe000e010
 8006f84:	e000e018 	.word	0xe000e018
 8006f88:	20000004 	.word	0x20000004
 8006f8c:	10624dd3 	.word	0x10624dd3
 8006f90:	e000e014 	.word	0xe000e014

08006f94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006fa4 <vPortEnableVFP+0x10>
 8006f98:	6801      	ldr	r1, [r0, #0]
 8006f9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f9e:	6001      	str	r1, [r0, #0]
 8006fa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006fa2:	bf00      	nop
 8006fa4:	e000ed88 	.word	0xe000ed88

08006fa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006fae:	f3ef 8305 	mrs	r3, IPSR
 8006fb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2b0f      	cmp	r3, #15
 8006fb8:	d914      	bls.n	8006fe4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006fba:	4a17      	ldr	r2, [pc, #92]	; (8007018 <vPortValidateInterruptPriority+0x70>)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006fc4:	4b15      	ldr	r3, [pc, #84]	; (800701c <vPortValidateInterruptPriority+0x74>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	7afa      	ldrb	r2, [r7, #11]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d20a      	bcs.n	8006fe4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	607b      	str	r3, [r7, #4]
}
 8006fe0:	bf00      	nop
 8006fe2:	e7fe      	b.n	8006fe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006fe4:	4b0e      	ldr	r3, [pc, #56]	; (8007020 <vPortValidateInterruptPriority+0x78>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006fec:	4b0d      	ldr	r3, [pc, #52]	; (8007024 <vPortValidateInterruptPriority+0x7c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d90a      	bls.n	800700a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	603b      	str	r3, [r7, #0]
}
 8007006:	bf00      	nop
 8007008:	e7fe      	b.n	8007008 <vPortValidateInterruptPriority+0x60>
	}
 800700a:	bf00      	nop
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	e000e3f0 	.word	0xe000e3f0
 800701c:	20000f54 	.word	0x20000f54
 8007020:	e000ed0c 	.word	0xe000ed0c
 8007024:	20000f58 	.word	0x20000f58

08007028 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08a      	sub	sp, #40	; 0x28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007030:	2300      	movs	r3, #0
 8007032:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007034:	f7fe fd7c 	bl	8005b30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007038:	4b5b      	ldr	r3, [pc, #364]	; (80071a8 <pvPortMalloc+0x180>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d101      	bne.n	8007044 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007040:	f000 f920 	bl	8007284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007044:	4b59      	ldr	r3, [pc, #356]	; (80071ac <pvPortMalloc+0x184>)
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4013      	ands	r3, r2
 800704c:	2b00      	cmp	r3, #0
 800704e:	f040 8093 	bne.w	8007178 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d01d      	beq.n	8007094 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007058:	2208      	movs	r2, #8
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4413      	add	r3, r2
 800705e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f003 0307 	and.w	r3, r3, #7
 8007066:	2b00      	cmp	r3, #0
 8007068:	d014      	beq.n	8007094 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f023 0307 	bic.w	r3, r3, #7
 8007070:	3308      	adds	r3, #8
 8007072:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f003 0307 	and.w	r3, r3, #7
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <pvPortMalloc+0x6c>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	617b      	str	r3, [r7, #20]
}
 8007090:	bf00      	nop
 8007092:	e7fe      	b.n	8007092 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d06e      	beq.n	8007178 <pvPortMalloc+0x150>
 800709a:	4b45      	ldr	r3, [pc, #276]	; (80071b0 <pvPortMalloc+0x188>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d869      	bhi.n	8007178 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80070a4:	4b43      	ldr	r3, [pc, #268]	; (80071b4 <pvPortMalloc+0x18c>)
 80070a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80070a8:	4b42      	ldr	r3, [pc, #264]	; (80071b4 <pvPortMalloc+0x18c>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070ae:	e004      	b.n	80070ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d903      	bls.n	80070cc <pvPortMalloc+0xa4>
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1f1      	bne.n	80070b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80070cc:	4b36      	ldr	r3, [pc, #216]	; (80071a8 <pvPortMalloc+0x180>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d050      	beq.n	8007178 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070d6:	6a3b      	ldr	r3, [r7, #32]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2208      	movs	r2, #8
 80070dc:	4413      	add	r3, r2
 80070de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	6a3b      	ldr	r3, [r7, #32]
 80070e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	1ad2      	subs	r2, r2, r3
 80070f0:	2308      	movs	r3, #8
 80070f2:	005b      	lsls	r3, r3, #1
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d91f      	bls.n	8007138 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4413      	add	r3, r2
 80070fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	f003 0307 	and.w	r3, r3, #7
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00a      	beq.n	8007120 <pvPortMalloc+0xf8>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	613b      	str	r3, [r7, #16]
}
 800711c:	bf00      	nop
 800711e:	e7fe      	b.n	800711e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	1ad2      	subs	r2, r2, r3
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007132:	69b8      	ldr	r0, [r7, #24]
 8007134:	f000 f908 	bl	8007348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007138:	4b1d      	ldr	r3, [pc, #116]	; (80071b0 <pvPortMalloc+0x188>)
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	4a1b      	ldr	r2, [pc, #108]	; (80071b0 <pvPortMalloc+0x188>)
 8007144:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007146:	4b1a      	ldr	r3, [pc, #104]	; (80071b0 <pvPortMalloc+0x188>)
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	4b1b      	ldr	r3, [pc, #108]	; (80071b8 <pvPortMalloc+0x190>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	429a      	cmp	r2, r3
 8007150:	d203      	bcs.n	800715a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007152:	4b17      	ldr	r3, [pc, #92]	; (80071b0 <pvPortMalloc+0x188>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a18      	ldr	r2, [pc, #96]	; (80071b8 <pvPortMalloc+0x190>)
 8007158:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	4b13      	ldr	r3, [pc, #76]	; (80071ac <pvPortMalloc+0x184>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	431a      	orrs	r2, r3
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	2200      	movs	r2, #0
 800716c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800716e:	4b13      	ldr	r3, [pc, #76]	; (80071bc <pvPortMalloc+0x194>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3301      	adds	r3, #1
 8007174:	4a11      	ldr	r2, [pc, #68]	; (80071bc <pvPortMalloc+0x194>)
 8007176:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007178:	f7fe fce8 	bl	8005b4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	f003 0307 	and.w	r3, r3, #7
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00a      	beq.n	800719c <pvPortMalloc+0x174>
	__asm volatile
 8007186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718a:	f383 8811 	msr	BASEPRI, r3
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	60fb      	str	r3, [r7, #12]
}
 8007198:	bf00      	nop
 800719a:	e7fe      	b.n	800719a <pvPortMalloc+0x172>
	return pvReturn;
 800719c:	69fb      	ldr	r3, [r7, #28]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3728      	adds	r7, #40	; 0x28
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	20008494 	.word	0x20008494
 80071ac:	200084a8 	.word	0x200084a8
 80071b0:	20008498 	.word	0x20008498
 80071b4:	2000848c 	.word	0x2000848c
 80071b8:	2000849c 	.word	0x2000849c
 80071bc:	200084a0 	.word	0x200084a0

080071c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d04d      	beq.n	800726e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071d2:	2308      	movs	r3, #8
 80071d4:	425b      	negs	r3, r3
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	4413      	add	r3, r2
 80071da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	4b24      	ldr	r3, [pc, #144]	; (8007278 <vPortFree+0xb8>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4013      	ands	r3, r2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10a      	bne.n	8007204 <vPortFree+0x44>
	__asm volatile
 80071ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f2:	f383 8811 	msr	BASEPRI, r3
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	60fb      	str	r3, [r7, #12]
}
 8007200:	bf00      	nop
 8007202:	e7fe      	b.n	8007202 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00a      	beq.n	8007222 <vPortFree+0x62>
	__asm volatile
 800720c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	60bb      	str	r3, [r7, #8]
}
 800721e:	bf00      	nop
 8007220:	e7fe      	b.n	8007220 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	4b14      	ldr	r3, [pc, #80]	; (8007278 <vPortFree+0xb8>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4013      	ands	r3, r2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d01e      	beq.n	800726e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d11a      	bne.n	800726e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	4b0e      	ldr	r3, [pc, #56]	; (8007278 <vPortFree+0xb8>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	43db      	mvns	r3, r3
 8007242:	401a      	ands	r2, r3
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007248:	f7fe fc72 	bl	8005b30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	4b0a      	ldr	r3, [pc, #40]	; (800727c <vPortFree+0xbc>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4413      	add	r3, r2
 8007256:	4a09      	ldr	r2, [pc, #36]	; (800727c <vPortFree+0xbc>)
 8007258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800725a:	6938      	ldr	r0, [r7, #16]
 800725c:	f000 f874 	bl	8007348 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007260:	4b07      	ldr	r3, [pc, #28]	; (8007280 <vPortFree+0xc0>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3301      	adds	r3, #1
 8007266:	4a06      	ldr	r2, [pc, #24]	; (8007280 <vPortFree+0xc0>)
 8007268:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800726a:	f7fe fc6f 	bl	8005b4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800726e:	bf00      	nop
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	200084a8 	.word	0x200084a8
 800727c:	20008498 	.word	0x20008498
 8007280:	200084a4 	.word	0x200084a4

08007284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800728a:	f247 5330 	movw	r3, #30000	; 0x7530
 800728e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007290:	4b27      	ldr	r3, [pc, #156]	; (8007330 <prvHeapInit+0xac>)
 8007292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f003 0307 	and.w	r3, r3, #7
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00c      	beq.n	80072b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	3307      	adds	r3, #7
 80072a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f023 0307 	bic.w	r3, r3, #7
 80072aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	4a1f      	ldr	r2, [pc, #124]	; (8007330 <prvHeapInit+0xac>)
 80072b4:	4413      	add	r3, r2
 80072b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072bc:	4a1d      	ldr	r2, [pc, #116]	; (8007334 <prvHeapInit+0xb0>)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072c2:	4b1c      	ldr	r3, [pc, #112]	; (8007334 <prvHeapInit+0xb0>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	4413      	add	r3, r2
 80072ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072d0:	2208      	movs	r2, #8
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	1a9b      	subs	r3, r3, r2
 80072d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 0307 	bic.w	r3, r3, #7
 80072de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4a15      	ldr	r2, [pc, #84]	; (8007338 <prvHeapInit+0xb4>)
 80072e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80072e6:	4b14      	ldr	r3, [pc, #80]	; (8007338 <prvHeapInit+0xb4>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2200      	movs	r2, #0
 80072ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072ee:	4b12      	ldr	r3, [pc, #72]	; (8007338 <prvHeapInit+0xb4>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2200      	movs	r2, #0
 80072f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	1ad2      	subs	r2, r2, r3
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007304:	4b0c      	ldr	r3, [pc, #48]	; (8007338 <prvHeapInit+0xb4>)
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	4a0a      	ldr	r2, [pc, #40]	; (800733c <prvHeapInit+0xb8>)
 8007312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	4a09      	ldr	r2, [pc, #36]	; (8007340 <prvHeapInit+0xbc>)
 800731a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800731c:	4b09      	ldr	r3, [pc, #36]	; (8007344 <prvHeapInit+0xc0>)
 800731e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007322:	601a      	str	r2, [r3, #0]
}
 8007324:	bf00      	nop
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	20000f5c 	.word	0x20000f5c
 8007334:	2000848c 	.word	0x2000848c
 8007338:	20008494 	.word	0x20008494
 800733c:	2000849c 	.word	0x2000849c
 8007340:	20008498 	.word	0x20008498
 8007344:	200084a8 	.word	0x200084a8

08007348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007350:	4b28      	ldr	r3, [pc, #160]	; (80073f4 <prvInsertBlockIntoFreeList+0xac>)
 8007352:	60fb      	str	r3, [r7, #12]
 8007354:	e002      	b.n	800735c <prvInsertBlockIntoFreeList+0x14>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	429a      	cmp	r2, r3
 8007364:	d8f7      	bhi.n	8007356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	4413      	add	r3, r2
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	429a      	cmp	r2, r3
 8007376:	d108      	bne.n	800738a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	441a      	add	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	441a      	add	r2, r3
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	429a      	cmp	r2, r3
 800739c:	d118      	bne.n	80073d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	4b15      	ldr	r3, [pc, #84]	; (80073f8 <prvInsertBlockIntoFreeList+0xb0>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d00d      	beq.n	80073c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	441a      	add	r2, r3
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	e008      	b.n	80073d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80073c6:	4b0c      	ldr	r3, [pc, #48]	; (80073f8 <prvInsertBlockIntoFreeList+0xb0>)
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	601a      	str	r2, [r3, #0]
 80073ce:	e003      	b.n	80073d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d002      	beq.n	80073e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073e6:	bf00      	nop
 80073e8:	3714      	adds	r7, #20
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	2000848c 	.word	0x2000848c
 80073f8:	20008494 	.word	0x20008494

080073fc <std>:
 80073fc:	2300      	movs	r3, #0
 80073fe:	b510      	push	{r4, lr}
 8007400:	4604      	mov	r4, r0
 8007402:	e9c0 3300 	strd	r3, r3, [r0]
 8007406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800740a:	6083      	str	r3, [r0, #8]
 800740c:	8181      	strh	r1, [r0, #12]
 800740e:	6643      	str	r3, [r0, #100]	; 0x64
 8007410:	81c2      	strh	r2, [r0, #14]
 8007412:	6183      	str	r3, [r0, #24]
 8007414:	4619      	mov	r1, r3
 8007416:	2208      	movs	r2, #8
 8007418:	305c      	adds	r0, #92	; 0x5c
 800741a:	f000 f9e5 	bl	80077e8 <memset>
 800741e:	4b05      	ldr	r3, [pc, #20]	; (8007434 <std+0x38>)
 8007420:	6263      	str	r3, [r4, #36]	; 0x24
 8007422:	4b05      	ldr	r3, [pc, #20]	; (8007438 <std+0x3c>)
 8007424:	62a3      	str	r3, [r4, #40]	; 0x28
 8007426:	4b05      	ldr	r3, [pc, #20]	; (800743c <std+0x40>)
 8007428:	62e3      	str	r3, [r4, #44]	; 0x2c
 800742a:	4b05      	ldr	r3, [pc, #20]	; (8007440 <std+0x44>)
 800742c:	6224      	str	r4, [r4, #32]
 800742e:	6323      	str	r3, [r4, #48]	; 0x30
 8007430:	bd10      	pop	{r4, pc}
 8007432:	bf00      	nop
 8007434:	08007639 	.word	0x08007639
 8007438:	0800765b 	.word	0x0800765b
 800743c:	08007693 	.word	0x08007693
 8007440:	080076b7 	.word	0x080076b7

08007444 <stdio_exit_handler>:
 8007444:	4a02      	ldr	r2, [pc, #8]	; (8007450 <stdio_exit_handler+0xc>)
 8007446:	4903      	ldr	r1, [pc, #12]	; (8007454 <stdio_exit_handler+0x10>)
 8007448:	4803      	ldr	r0, [pc, #12]	; (8007458 <stdio_exit_handler+0x14>)
 800744a:	f000 b869 	b.w	8007520 <_fwalk_sglue>
 800744e:	bf00      	nop
 8007450:	20000014 	.word	0x20000014
 8007454:	08008249 	.word	0x08008249
 8007458:	20000020 	.word	0x20000020

0800745c <cleanup_stdio>:
 800745c:	6841      	ldr	r1, [r0, #4]
 800745e:	4b0c      	ldr	r3, [pc, #48]	; (8007490 <cleanup_stdio+0x34>)
 8007460:	4299      	cmp	r1, r3
 8007462:	b510      	push	{r4, lr}
 8007464:	4604      	mov	r4, r0
 8007466:	d001      	beq.n	800746c <cleanup_stdio+0x10>
 8007468:	f000 feee 	bl	8008248 <_fflush_r>
 800746c:	68a1      	ldr	r1, [r4, #8]
 800746e:	4b09      	ldr	r3, [pc, #36]	; (8007494 <cleanup_stdio+0x38>)
 8007470:	4299      	cmp	r1, r3
 8007472:	d002      	beq.n	800747a <cleanup_stdio+0x1e>
 8007474:	4620      	mov	r0, r4
 8007476:	f000 fee7 	bl	8008248 <_fflush_r>
 800747a:	68e1      	ldr	r1, [r4, #12]
 800747c:	4b06      	ldr	r3, [pc, #24]	; (8007498 <cleanup_stdio+0x3c>)
 800747e:	4299      	cmp	r1, r3
 8007480:	d004      	beq.n	800748c <cleanup_stdio+0x30>
 8007482:	4620      	mov	r0, r4
 8007484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007488:	f000 bede 	b.w	8008248 <_fflush_r>
 800748c:	bd10      	pop	{r4, pc}
 800748e:	bf00      	nop
 8007490:	200084ac 	.word	0x200084ac
 8007494:	20008514 	.word	0x20008514
 8007498:	2000857c 	.word	0x2000857c

0800749c <global_stdio_init.part.0>:
 800749c:	b510      	push	{r4, lr}
 800749e:	4b0b      	ldr	r3, [pc, #44]	; (80074cc <global_stdio_init.part.0+0x30>)
 80074a0:	4c0b      	ldr	r4, [pc, #44]	; (80074d0 <global_stdio_init.part.0+0x34>)
 80074a2:	4a0c      	ldr	r2, [pc, #48]	; (80074d4 <global_stdio_init.part.0+0x38>)
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	4620      	mov	r0, r4
 80074a8:	2200      	movs	r2, #0
 80074aa:	2104      	movs	r1, #4
 80074ac:	f7ff ffa6 	bl	80073fc <std>
 80074b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80074b4:	2201      	movs	r2, #1
 80074b6:	2109      	movs	r1, #9
 80074b8:	f7ff ffa0 	bl	80073fc <std>
 80074bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80074c0:	2202      	movs	r2, #2
 80074c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074c6:	2112      	movs	r1, #18
 80074c8:	f7ff bf98 	b.w	80073fc <std>
 80074cc:	200085e4 	.word	0x200085e4
 80074d0:	200084ac 	.word	0x200084ac
 80074d4:	08007445 	.word	0x08007445

080074d8 <__sfp_lock_acquire>:
 80074d8:	4801      	ldr	r0, [pc, #4]	; (80074e0 <__sfp_lock_acquire+0x8>)
 80074da:	f000 ba53 	b.w	8007984 <__retarget_lock_acquire_recursive>
 80074de:	bf00      	nop
 80074e0:	200085ed 	.word	0x200085ed

080074e4 <__sfp_lock_release>:
 80074e4:	4801      	ldr	r0, [pc, #4]	; (80074ec <__sfp_lock_release+0x8>)
 80074e6:	f000 ba4e 	b.w	8007986 <__retarget_lock_release_recursive>
 80074ea:	bf00      	nop
 80074ec:	200085ed 	.word	0x200085ed

080074f0 <__sinit>:
 80074f0:	b510      	push	{r4, lr}
 80074f2:	4604      	mov	r4, r0
 80074f4:	f7ff fff0 	bl	80074d8 <__sfp_lock_acquire>
 80074f8:	6a23      	ldr	r3, [r4, #32]
 80074fa:	b11b      	cbz	r3, 8007504 <__sinit+0x14>
 80074fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007500:	f7ff bff0 	b.w	80074e4 <__sfp_lock_release>
 8007504:	4b04      	ldr	r3, [pc, #16]	; (8007518 <__sinit+0x28>)
 8007506:	6223      	str	r3, [r4, #32]
 8007508:	4b04      	ldr	r3, [pc, #16]	; (800751c <__sinit+0x2c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1f5      	bne.n	80074fc <__sinit+0xc>
 8007510:	f7ff ffc4 	bl	800749c <global_stdio_init.part.0>
 8007514:	e7f2      	b.n	80074fc <__sinit+0xc>
 8007516:	bf00      	nop
 8007518:	0800745d 	.word	0x0800745d
 800751c:	200085e4 	.word	0x200085e4

08007520 <_fwalk_sglue>:
 8007520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007524:	4607      	mov	r7, r0
 8007526:	4688      	mov	r8, r1
 8007528:	4614      	mov	r4, r2
 800752a:	2600      	movs	r6, #0
 800752c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007530:	f1b9 0901 	subs.w	r9, r9, #1
 8007534:	d505      	bpl.n	8007542 <_fwalk_sglue+0x22>
 8007536:	6824      	ldr	r4, [r4, #0]
 8007538:	2c00      	cmp	r4, #0
 800753a:	d1f7      	bne.n	800752c <_fwalk_sglue+0xc>
 800753c:	4630      	mov	r0, r6
 800753e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007542:	89ab      	ldrh	r3, [r5, #12]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d907      	bls.n	8007558 <_fwalk_sglue+0x38>
 8007548:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800754c:	3301      	adds	r3, #1
 800754e:	d003      	beq.n	8007558 <_fwalk_sglue+0x38>
 8007550:	4629      	mov	r1, r5
 8007552:	4638      	mov	r0, r7
 8007554:	47c0      	blx	r8
 8007556:	4306      	orrs	r6, r0
 8007558:	3568      	adds	r5, #104	; 0x68
 800755a:	e7e9      	b.n	8007530 <_fwalk_sglue+0x10>

0800755c <iprintf>:
 800755c:	b40f      	push	{r0, r1, r2, r3}
 800755e:	b507      	push	{r0, r1, r2, lr}
 8007560:	4906      	ldr	r1, [pc, #24]	; (800757c <iprintf+0x20>)
 8007562:	ab04      	add	r3, sp, #16
 8007564:	6808      	ldr	r0, [r1, #0]
 8007566:	f853 2b04 	ldr.w	r2, [r3], #4
 800756a:	6881      	ldr	r1, [r0, #8]
 800756c:	9301      	str	r3, [sp, #4]
 800756e:	f000 fb3b 	bl	8007be8 <_vfiprintf_r>
 8007572:	b003      	add	sp, #12
 8007574:	f85d eb04 	ldr.w	lr, [sp], #4
 8007578:	b004      	add	sp, #16
 800757a:	4770      	bx	lr
 800757c:	2000006c 	.word	0x2000006c

08007580 <_puts_r>:
 8007580:	6a03      	ldr	r3, [r0, #32]
 8007582:	b570      	push	{r4, r5, r6, lr}
 8007584:	6884      	ldr	r4, [r0, #8]
 8007586:	4605      	mov	r5, r0
 8007588:	460e      	mov	r6, r1
 800758a:	b90b      	cbnz	r3, 8007590 <_puts_r+0x10>
 800758c:	f7ff ffb0 	bl	80074f0 <__sinit>
 8007590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007592:	07db      	lsls	r3, r3, #31
 8007594:	d405      	bmi.n	80075a2 <_puts_r+0x22>
 8007596:	89a3      	ldrh	r3, [r4, #12]
 8007598:	0598      	lsls	r0, r3, #22
 800759a:	d402      	bmi.n	80075a2 <_puts_r+0x22>
 800759c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800759e:	f000 f9f1 	bl	8007984 <__retarget_lock_acquire_recursive>
 80075a2:	89a3      	ldrh	r3, [r4, #12]
 80075a4:	0719      	lsls	r1, r3, #28
 80075a6:	d513      	bpl.n	80075d0 <_puts_r+0x50>
 80075a8:	6923      	ldr	r3, [r4, #16]
 80075aa:	b18b      	cbz	r3, 80075d0 <_puts_r+0x50>
 80075ac:	3e01      	subs	r6, #1
 80075ae:	68a3      	ldr	r3, [r4, #8]
 80075b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80075b4:	3b01      	subs	r3, #1
 80075b6:	60a3      	str	r3, [r4, #8]
 80075b8:	b9e9      	cbnz	r1, 80075f6 <_puts_r+0x76>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	da2e      	bge.n	800761c <_puts_r+0x9c>
 80075be:	4622      	mov	r2, r4
 80075c0:	210a      	movs	r1, #10
 80075c2:	4628      	mov	r0, r5
 80075c4:	f000 f87b 	bl	80076be <__swbuf_r>
 80075c8:	3001      	adds	r0, #1
 80075ca:	d007      	beq.n	80075dc <_puts_r+0x5c>
 80075cc:	250a      	movs	r5, #10
 80075ce:	e007      	b.n	80075e0 <_puts_r+0x60>
 80075d0:	4621      	mov	r1, r4
 80075d2:	4628      	mov	r0, r5
 80075d4:	f000 f8b0 	bl	8007738 <__swsetup_r>
 80075d8:	2800      	cmp	r0, #0
 80075da:	d0e7      	beq.n	80075ac <_puts_r+0x2c>
 80075dc:	f04f 35ff 	mov.w	r5, #4294967295
 80075e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075e2:	07da      	lsls	r2, r3, #31
 80075e4:	d405      	bmi.n	80075f2 <_puts_r+0x72>
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	059b      	lsls	r3, r3, #22
 80075ea:	d402      	bmi.n	80075f2 <_puts_r+0x72>
 80075ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ee:	f000 f9ca 	bl	8007986 <__retarget_lock_release_recursive>
 80075f2:	4628      	mov	r0, r5
 80075f4:	bd70      	pop	{r4, r5, r6, pc}
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	da04      	bge.n	8007604 <_puts_r+0x84>
 80075fa:	69a2      	ldr	r2, [r4, #24]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	dc06      	bgt.n	800760e <_puts_r+0x8e>
 8007600:	290a      	cmp	r1, #10
 8007602:	d004      	beq.n	800760e <_puts_r+0x8e>
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	6022      	str	r2, [r4, #0]
 800760a:	7019      	strb	r1, [r3, #0]
 800760c:	e7cf      	b.n	80075ae <_puts_r+0x2e>
 800760e:	4622      	mov	r2, r4
 8007610:	4628      	mov	r0, r5
 8007612:	f000 f854 	bl	80076be <__swbuf_r>
 8007616:	3001      	adds	r0, #1
 8007618:	d1c9      	bne.n	80075ae <_puts_r+0x2e>
 800761a:	e7df      	b.n	80075dc <_puts_r+0x5c>
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	250a      	movs	r5, #10
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	6022      	str	r2, [r4, #0]
 8007624:	701d      	strb	r5, [r3, #0]
 8007626:	e7db      	b.n	80075e0 <_puts_r+0x60>

08007628 <puts>:
 8007628:	4b02      	ldr	r3, [pc, #8]	; (8007634 <puts+0xc>)
 800762a:	4601      	mov	r1, r0
 800762c:	6818      	ldr	r0, [r3, #0]
 800762e:	f7ff bfa7 	b.w	8007580 <_puts_r>
 8007632:	bf00      	nop
 8007634:	2000006c 	.word	0x2000006c

08007638 <__sread>:
 8007638:	b510      	push	{r4, lr}
 800763a:	460c      	mov	r4, r1
 800763c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007640:	f000 f952 	bl	80078e8 <_read_r>
 8007644:	2800      	cmp	r0, #0
 8007646:	bfab      	itete	ge
 8007648:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800764a:	89a3      	ldrhlt	r3, [r4, #12]
 800764c:	181b      	addge	r3, r3, r0
 800764e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007652:	bfac      	ite	ge
 8007654:	6563      	strge	r3, [r4, #84]	; 0x54
 8007656:	81a3      	strhlt	r3, [r4, #12]
 8007658:	bd10      	pop	{r4, pc}

0800765a <__swrite>:
 800765a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800765e:	461f      	mov	r7, r3
 8007660:	898b      	ldrh	r3, [r1, #12]
 8007662:	05db      	lsls	r3, r3, #23
 8007664:	4605      	mov	r5, r0
 8007666:	460c      	mov	r4, r1
 8007668:	4616      	mov	r6, r2
 800766a:	d505      	bpl.n	8007678 <__swrite+0x1e>
 800766c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007670:	2302      	movs	r3, #2
 8007672:	2200      	movs	r2, #0
 8007674:	f000 f926 	bl	80078c4 <_lseek_r>
 8007678:	89a3      	ldrh	r3, [r4, #12]
 800767a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800767e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007682:	81a3      	strh	r3, [r4, #12]
 8007684:	4632      	mov	r2, r6
 8007686:	463b      	mov	r3, r7
 8007688:	4628      	mov	r0, r5
 800768a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800768e:	f000 b93d 	b.w	800790c <_write_r>

08007692 <__sseek>:
 8007692:	b510      	push	{r4, lr}
 8007694:	460c      	mov	r4, r1
 8007696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800769a:	f000 f913 	bl	80078c4 <_lseek_r>
 800769e:	1c43      	adds	r3, r0, #1
 80076a0:	89a3      	ldrh	r3, [r4, #12]
 80076a2:	bf15      	itete	ne
 80076a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80076a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076ae:	81a3      	strheq	r3, [r4, #12]
 80076b0:	bf18      	it	ne
 80076b2:	81a3      	strhne	r3, [r4, #12]
 80076b4:	bd10      	pop	{r4, pc}

080076b6 <__sclose>:
 80076b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076ba:	f000 b89d 	b.w	80077f8 <_close_r>

080076be <__swbuf_r>:
 80076be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c0:	460e      	mov	r6, r1
 80076c2:	4614      	mov	r4, r2
 80076c4:	4605      	mov	r5, r0
 80076c6:	b118      	cbz	r0, 80076d0 <__swbuf_r+0x12>
 80076c8:	6a03      	ldr	r3, [r0, #32]
 80076ca:	b90b      	cbnz	r3, 80076d0 <__swbuf_r+0x12>
 80076cc:	f7ff ff10 	bl	80074f0 <__sinit>
 80076d0:	69a3      	ldr	r3, [r4, #24]
 80076d2:	60a3      	str	r3, [r4, #8]
 80076d4:	89a3      	ldrh	r3, [r4, #12]
 80076d6:	071a      	lsls	r2, r3, #28
 80076d8:	d525      	bpl.n	8007726 <__swbuf_r+0x68>
 80076da:	6923      	ldr	r3, [r4, #16]
 80076dc:	b31b      	cbz	r3, 8007726 <__swbuf_r+0x68>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	6922      	ldr	r2, [r4, #16]
 80076e2:	1a98      	subs	r0, r3, r2
 80076e4:	6963      	ldr	r3, [r4, #20]
 80076e6:	b2f6      	uxtb	r6, r6
 80076e8:	4283      	cmp	r3, r0
 80076ea:	4637      	mov	r7, r6
 80076ec:	dc04      	bgt.n	80076f8 <__swbuf_r+0x3a>
 80076ee:	4621      	mov	r1, r4
 80076f0:	4628      	mov	r0, r5
 80076f2:	f000 fda9 	bl	8008248 <_fflush_r>
 80076f6:	b9e0      	cbnz	r0, 8007732 <__swbuf_r+0x74>
 80076f8:	68a3      	ldr	r3, [r4, #8]
 80076fa:	3b01      	subs	r3, #1
 80076fc:	60a3      	str	r3, [r4, #8]
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	6022      	str	r2, [r4, #0]
 8007704:	701e      	strb	r6, [r3, #0]
 8007706:	6962      	ldr	r2, [r4, #20]
 8007708:	1c43      	adds	r3, r0, #1
 800770a:	429a      	cmp	r2, r3
 800770c:	d004      	beq.n	8007718 <__swbuf_r+0x5a>
 800770e:	89a3      	ldrh	r3, [r4, #12]
 8007710:	07db      	lsls	r3, r3, #31
 8007712:	d506      	bpl.n	8007722 <__swbuf_r+0x64>
 8007714:	2e0a      	cmp	r6, #10
 8007716:	d104      	bne.n	8007722 <__swbuf_r+0x64>
 8007718:	4621      	mov	r1, r4
 800771a:	4628      	mov	r0, r5
 800771c:	f000 fd94 	bl	8008248 <_fflush_r>
 8007720:	b938      	cbnz	r0, 8007732 <__swbuf_r+0x74>
 8007722:	4638      	mov	r0, r7
 8007724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007726:	4621      	mov	r1, r4
 8007728:	4628      	mov	r0, r5
 800772a:	f000 f805 	bl	8007738 <__swsetup_r>
 800772e:	2800      	cmp	r0, #0
 8007730:	d0d5      	beq.n	80076de <__swbuf_r+0x20>
 8007732:	f04f 37ff 	mov.w	r7, #4294967295
 8007736:	e7f4      	b.n	8007722 <__swbuf_r+0x64>

08007738 <__swsetup_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	4b2a      	ldr	r3, [pc, #168]	; (80077e4 <__swsetup_r+0xac>)
 800773c:	4605      	mov	r5, r0
 800773e:	6818      	ldr	r0, [r3, #0]
 8007740:	460c      	mov	r4, r1
 8007742:	b118      	cbz	r0, 800774c <__swsetup_r+0x14>
 8007744:	6a03      	ldr	r3, [r0, #32]
 8007746:	b90b      	cbnz	r3, 800774c <__swsetup_r+0x14>
 8007748:	f7ff fed2 	bl	80074f0 <__sinit>
 800774c:	89a3      	ldrh	r3, [r4, #12]
 800774e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007752:	0718      	lsls	r0, r3, #28
 8007754:	d422      	bmi.n	800779c <__swsetup_r+0x64>
 8007756:	06d9      	lsls	r1, r3, #27
 8007758:	d407      	bmi.n	800776a <__swsetup_r+0x32>
 800775a:	2309      	movs	r3, #9
 800775c:	602b      	str	r3, [r5, #0]
 800775e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007762:	81a3      	strh	r3, [r4, #12]
 8007764:	f04f 30ff 	mov.w	r0, #4294967295
 8007768:	e034      	b.n	80077d4 <__swsetup_r+0x9c>
 800776a:	0758      	lsls	r0, r3, #29
 800776c:	d512      	bpl.n	8007794 <__swsetup_r+0x5c>
 800776e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007770:	b141      	cbz	r1, 8007784 <__swsetup_r+0x4c>
 8007772:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007776:	4299      	cmp	r1, r3
 8007778:	d002      	beq.n	8007780 <__swsetup_r+0x48>
 800777a:	4628      	mov	r0, r5
 800777c:	f000 f912 	bl	80079a4 <_free_r>
 8007780:	2300      	movs	r3, #0
 8007782:	6363      	str	r3, [r4, #52]	; 0x34
 8007784:	89a3      	ldrh	r3, [r4, #12]
 8007786:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800778a:	81a3      	strh	r3, [r4, #12]
 800778c:	2300      	movs	r3, #0
 800778e:	6063      	str	r3, [r4, #4]
 8007790:	6923      	ldr	r3, [r4, #16]
 8007792:	6023      	str	r3, [r4, #0]
 8007794:	89a3      	ldrh	r3, [r4, #12]
 8007796:	f043 0308 	orr.w	r3, r3, #8
 800779a:	81a3      	strh	r3, [r4, #12]
 800779c:	6923      	ldr	r3, [r4, #16]
 800779e:	b94b      	cbnz	r3, 80077b4 <__swsetup_r+0x7c>
 80077a0:	89a3      	ldrh	r3, [r4, #12]
 80077a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077aa:	d003      	beq.n	80077b4 <__swsetup_r+0x7c>
 80077ac:	4621      	mov	r1, r4
 80077ae:	4628      	mov	r0, r5
 80077b0:	f000 fd98 	bl	80082e4 <__smakebuf_r>
 80077b4:	89a0      	ldrh	r0, [r4, #12]
 80077b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077ba:	f010 0301 	ands.w	r3, r0, #1
 80077be:	d00a      	beq.n	80077d6 <__swsetup_r+0x9e>
 80077c0:	2300      	movs	r3, #0
 80077c2:	60a3      	str	r3, [r4, #8]
 80077c4:	6963      	ldr	r3, [r4, #20]
 80077c6:	425b      	negs	r3, r3
 80077c8:	61a3      	str	r3, [r4, #24]
 80077ca:	6923      	ldr	r3, [r4, #16]
 80077cc:	b943      	cbnz	r3, 80077e0 <__swsetup_r+0xa8>
 80077ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077d2:	d1c4      	bne.n	800775e <__swsetup_r+0x26>
 80077d4:	bd38      	pop	{r3, r4, r5, pc}
 80077d6:	0781      	lsls	r1, r0, #30
 80077d8:	bf58      	it	pl
 80077da:	6963      	ldrpl	r3, [r4, #20]
 80077dc:	60a3      	str	r3, [r4, #8]
 80077de:	e7f4      	b.n	80077ca <__swsetup_r+0x92>
 80077e0:	2000      	movs	r0, #0
 80077e2:	e7f7      	b.n	80077d4 <__swsetup_r+0x9c>
 80077e4:	2000006c 	.word	0x2000006c

080077e8 <memset>:
 80077e8:	4402      	add	r2, r0
 80077ea:	4603      	mov	r3, r0
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d100      	bne.n	80077f2 <memset+0xa>
 80077f0:	4770      	bx	lr
 80077f2:	f803 1b01 	strb.w	r1, [r3], #1
 80077f6:	e7f9      	b.n	80077ec <memset+0x4>

080077f8 <_close_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	4d06      	ldr	r5, [pc, #24]	; (8007814 <_close_r+0x1c>)
 80077fc:	2300      	movs	r3, #0
 80077fe:	4604      	mov	r4, r0
 8007800:	4608      	mov	r0, r1
 8007802:	602b      	str	r3, [r5, #0]
 8007804:	f7f9 faf3 	bl	8000dee <_close>
 8007808:	1c43      	adds	r3, r0, #1
 800780a:	d102      	bne.n	8007812 <_close_r+0x1a>
 800780c:	682b      	ldr	r3, [r5, #0]
 800780e:	b103      	cbz	r3, 8007812 <_close_r+0x1a>
 8007810:	6023      	str	r3, [r4, #0]
 8007812:	bd38      	pop	{r3, r4, r5, pc}
 8007814:	200085e8 	.word	0x200085e8

08007818 <_reclaim_reent>:
 8007818:	4b29      	ldr	r3, [pc, #164]	; (80078c0 <_reclaim_reent+0xa8>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4283      	cmp	r3, r0
 800781e:	b570      	push	{r4, r5, r6, lr}
 8007820:	4604      	mov	r4, r0
 8007822:	d04b      	beq.n	80078bc <_reclaim_reent+0xa4>
 8007824:	69c3      	ldr	r3, [r0, #28]
 8007826:	b143      	cbz	r3, 800783a <_reclaim_reent+0x22>
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d144      	bne.n	80078b8 <_reclaim_reent+0xa0>
 800782e:	69e3      	ldr	r3, [r4, #28]
 8007830:	6819      	ldr	r1, [r3, #0]
 8007832:	b111      	cbz	r1, 800783a <_reclaim_reent+0x22>
 8007834:	4620      	mov	r0, r4
 8007836:	f000 f8b5 	bl	80079a4 <_free_r>
 800783a:	6961      	ldr	r1, [r4, #20]
 800783c:	b111      	cbz	r1, 8007844 <_reclaim_reent+0x2c>
 800783e:	4620      	mov	r0, r4
 8007840:	f000 f8b0 	bl	80079a4 <_free_r>
 8007844:	69e1      	ldr	r1, [r4, #28]
 8007846:	b111      	cbz	r1, 800784e <_reclaim_reent+0x36>
 8007848:	4620      	mov	r0, r4
 800784a:	f000 f8ab 	bl	80079a4 <_free_r>
 800784e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007850:	b111      	cbz	r1, 8007858 <_reclaim_reent+0x40>
 8007852:	4620      	mov	r0, r4
 8007854:	f000 f8a6 	bl	80079a4 <_free_r>
 8007858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800785a:	b111      	cbz	r1, 8007862 <_reclaim_reent+0x4a>
 800785c:	4620      	mov	r0, r4
 800785e:	f000 f8a1 	bl	80079a4 <_free_r>
 8007862:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007864:	b111      	cbz	r1, 800786c <_reclaim_reent+0x54>
 8007866:	4620      	mov	r0, r4
 8007868:	f000 f89c 	bl	80079a4 <_free_r>
 800786c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800786e:	b111      	cbz	r1, 8007876 <_reclaim_reent+0x5e>
 8007870:	4620      	mov	r0, r4
 8007872:	f000 f897 	bl	80079a4 <_free_r>
 8007876:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007878:	b111      	cbz	r1, 8007880 <_reclaim_reent+0x68>
 800787a:	4620      	mov	r0, r4
 800787c:	f000 f892 	bl	80079a4 <_free_r>
 8007880:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007882:	b111      	cbz	r1, 800788a <_reclaim_reent+0x72>
 8007884:	4620      	mov	r0, r4
 8007886:	f000 f88d 	bl	80079a4 <_free_r>
 800788a:	6a23      	ldr	r3, [r4, #32]
 800788c:	b1b3      	cbz	r3, 80078bc <_reclaim_reent+0xa4>
 800788e:	4620      	mov	r0, r4
 8007890:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007894:	4718      	bx	r3
 8007896:	5949      	ldr	r1, [r1, r5]
 8007898:	b941      	cbnz	r1, 80078ac <_reclaim_reent+0x94>
 800789a:	3504      	adds	r5, #4
 800789c:	69e3      	ldr	r3, [r4, #28]
 800789e:	2d80      	cmp	r5, #128	; 0x80
 80078a0:	68d9      	ldr	r1, [r3, #12]
 80078a2:	d1f8      	bne.n	8007896 <_reclaim_reent+0x7e>
 80078a4:	4620      	mov	r0, r4
 80078a6:	f000 f87d 	bl	80079a4 <_free_r>
 80078aa:	e7c0      	b.n	800782e <_reclaim_reent+0x16>
 80078ac:	680e      	ldr	r6, [r1, #0]
 80078ae:	4620      	mov	r0, r4
 80078b0:	f000 f878 	bl	80079a4 <_free_r>
 80078b4:	4631      	mov	r1, r6
 80078b6:	e7ef      	b.n	8007898 <_reclaim_reent+0x80>
 80078b8:	2500      	movs	r5, #0
 80078ba:	e7ef      	b.n	800789c <_reclaim_reent+0x84>
 80078bc:	bd70      	pop	{r4, r5, r6, pc}
 80078be:	bf00      	nop
 80078c0:	2000006c 	.word	0x2000006c

080078c4 <_lseek_r>:
 80078c4:	b538      	push	{r3, r4, r5, lr}
 80078c6:	4d07      	ldr	r5, [pc, #28]	; (80078e4 <_lseek_r+0x20>)
 80078c8:	4604      	mov	r4, r0
 80078ca:	4608      	mov	r0, r1
 80078cc:	4611      	mov	r1, r2
 80078ce:	2200      	movs	r2, #0
 80078d0:	602a      	str	r2, [r5, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	f7f9 fab2 	bl	8000e3c <_lseek>
 80078d8:	1c43      	adds	r3, r0, #1
 80078da:	d102      	bne.n	80078e2 <_lseek_r+0x1e>
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	b103      	cbz	r3, 80078e2 <_lseek_r+0x1e>
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	bd38      	pop	{r3, r4, r5, pc}
 80078e4:	200085e8 	.word	0x200085e8

080078e8 <_read_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4d07      	ldr	r5, [pc, #28]	; (8007908 <_read_r+0x20>)
 80078ec:	4604      	mov	r4, r0
 80078ee:	4608      	mov	r0, r1
 80078f0:	4611      	mov	r1, r2
 80078f2:	2200      	movs	r2, #0
 80078f4:	602a      	str	r2, [r5, #0]
 80078f6:	461a      	mov	r2, r3
 80078f8:	f7f9 fa5c 	bl	8000db4 <_read>
 80078fc:	1c43      	adds	r3, r0, #1
 80078fe:	d102      	bne.n	8007906 <_read_r+0x1e>
 8007900:	682b      	ldr	r3, [r5, #0]
 8007902:	b103      	cbz	r3, 8007906 <_read_r+0x1e>
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	bd38      	pop	{r3, r4, r5, pc}
 8007908:	200085e8 	.word	0x200085e8

0800790c <_write_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	4d07      	ldr	r5, [pc, #28]	; (800792c <_write_r+0x20>)
 8007910:	4604      	mov	r4, r0
 8007912:	4608      	mov	r0, r1
 8007914:	4611      	mov	r1, r2
 8007916:	2200      	movs	r2, #0
 8007918:	602a      	str	r2, [r5, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	f7f8 fe60 	bl	80005e0 <_write>
 8007920:	1c43      	adds	r3, r0, #1
 8007922:	d102      	bne.n	800792a <_write_r+0x1e>
 8007924:	682b      	ldr	r3, [r5, #0]
 8007926:	b103      	cbz	r3, 800792a <_write_r+0x1e>
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	bd38      	pop	{r3, r4, r5, pc}
 800792c:	200085e8 	.word	0x200085e8

08007930 <__errno>:
 8007930:	4b01      	ldr	r3, [pc, #4]	; (8007938 <__errno+0x8>)
 8007932:	6818      	ldr	r0, [r3, #0]
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	2000006c 	.word	0x2000006c

0800793c <__libc_init_array>:
 800793c:	b570      	push	{r4, r5, r6, lr}
 800793e:	4d0d      	ldr	r5, [pc, #52]	; (8007974 <__libc_init_array+0x38>)
 8007940:	4c0d      	ldr	r4, [pc, #52]	; (8007978 <__libc_init_array+0x3c>)
 8007942:	1b64      	subs	r4, r4, r5
 8007944:	10a4      	asrs	r4, r4, #2
 8007946:	2600      	movs	r6, #0
 8007948:	42a6      	cmp	r6, r4
 800794a:	d109      	bne.n	8007960 <__libc_init_array+0x24>
 800794c:	4d0b      	ldr	r5, [pc, #44]	; (800797c <__libc_init_array+0x40>)
 800794e:	4c0c      	ldr	r4, [pc, #48]	; (8007980 <__libc_init_array+0x44>)
 8007950:	f000 fd36 	bl	80083c0 <_init>
 8007954:	1b64      	subs	r4, r4, r5
 8007956:	10a4      	asrs	r4, r4, #2
 8007958:	2600      	movs	r6, #0
 800795a:	42a6      	cmp	r6, r4
 800795c:	d105      	bne.n	800796a <__libc_init_array+0x2e>
 800795e:	bd70      	pop	{r4, r5, r6, pc}
 8007960:	f855 3b04 	ldr.w	r3, [r5], #4
 8007964:	4798      	blx	r3
 8007966:	3601      	adds	r6, #1
 8007968:	e7ee      	b.n	8007948 <__libc_init_array+0xc>
 800796a:	f855 3b04 	ldr.w	r3, [r5], #4
 800796e:	4798      	blx	r3
 8007970:	3601      	adds	r6, #1
 8007972:	e7f2      	b.n	800795a <__libc_init_array+0x1e>
 8007974:	080085dc 	.word	0x080085dc
 8007978:	080085dc 	.word	0x080085dc
 800797c:	080085dc 	.word	0x080085dc
 8007980:	080085e0 	.word	0x080085e0

08007984 <__retarget_lock_acquire_recursive>:
 8007984:	4770      	bx	lr

08007986 <__retarget_lock_release_recursive>:
 8007986:	4770      	bx	lr

08007988 <memcpy>:
 8007988:	440a      	add	r2, r1
 800798a:	4291      	cmp	r1, r2
 800798c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007990:	d100      	bne.n	8007994 <memcpy+0xc>
 8007992:	4770      	bx	lr
 8007994:	b510      	push	{r4, lr}
 8007996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800799a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800799e:	4291      	cmp	r1, r2
 80079a0:	d1f9      	bne.n	8007996 <memcpy+0xe>
 80079a2:	bd10      	pop	{r4, pc}

080079a4 <_free_r>:
 80079a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079a6:	2900      	cmp	r1, #0
 80079a8:	d044      	beq.n	8007a34 <_free_r+0x90>
 80079aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079ae:	9001      	str	r0, [sp, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f1a1 0404 	sub.w	r4, r1, #4
 80079b6:	bfb8      	it	lt
 80079b8:	18e4      	addlt	r4, r4, r3
 80079ba:	f000 f8df 	bl	8007b7c <__malloc_lock>
 80079be:	4a1e      	ldr	r2, [pc, #120]	; (8007a38 <_free_r+0x94>)
 80079c0:	9801      	ldr	r0, [sp, #4]
 80079c2:	6813      	ldr	r3, [r2, #0]
 80079c4:	b933      	cbnz	r3, 80079d4 <_free_r+0x30>
 80079c6:	6063      	str	r3, [r4, #4]
 80079c8:	6014      	str	r4, [r2, #0]
 80079ca:	b003      	add	sp, #12
 80079cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079d0:	f000 b8da 	b.w	8007b88 <__malloc_unlock>
 80079d4:	42a3      	cmp	r3, r4
 80079d6:	d908      	bls.n	80079ea <_free_r+0x46>
 80079d8:	6825      	ldr	r5, [r4, #0]
 80079da:	1961      	adds	r1, r4, r5
 80079dc:	428b      	cmp	r3, r1
 80079de:	bf01      	itttt	eq
 80079e0:	6819      	ldreq	r1, [r3, #0]
 80079e2:	685b      	ldreq	r3, [r3, #4]
 80079e4:	1949      	addeq	r1, r1, r5
 80079e6:	6021      	streq	r1, [r4, #0]
 80079e8:	e7ed      	b.n	80079c6 <_free_r+0x22>
 80079ea:	461a      	mov	r2, r3
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	b10b      	cbz	r3, 80079f4 <_free_r+0x50>
 80079f0:	42a3      	cmp	r3, r4
 80079f2:	d9fa      	bls.n	80079ea <_free_r+0x46>
 80079f4:	6811      	ldr	r1, [r2, #0]
 80079f6:	1855      	adds	r5, r2, r1
 80079f8:	42a5      	cmp	r5, r4
 80079fa:	d10b      	bne.n	8007a14 <_free_r+0x70>
 80079fc:	6824      	ldr	r4, [r4, #0]
 80079fe:	4421      	add	r1, r4
 8007a00:	1854      	adds	r4, r2, r1
 8007a02:	42a3      	cmp	r3, r4
 8007a04:	6011      	str	r1, [r2, #0]
 8007a06:	d1e0      	bne.n	80079ca <_free_r+0x26>
 8007a08:	681c      	ldr	r4, [r3, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	6053      	str	r3, [r2, #4]
 8007a0e:	440c      	add	r4, r1
 8007a10:	6014      	str	r4, [r2, #0]
 8007a12:	e7da      	b.n	80079ca <_free_r+0x26>
 8007a14:	d902      	bls.n	8007a1c <_free_r+0x78>
 8007a16:	230c      	movs	r3, #12
 8007a18:	6003      	str	r3, [r0, #0]
 8007a1a:	e7d6      	b.n	80079ca <_free_r+0x26>
 8007a1c:	6825      	ldr	r5, [r4, #0]
 8007a1e:	1961      	adds	r1, r4, r5
 8007a20:	428b      	cmp	r3, r1
 8007a22:	bf04      	itt	eq
 8007a24:	6819      	ldreq	r1, [r3, #0]
 8007a26:	685b      	ldreq	r3, [r3, #4]
 8007a28:	6063      	str	r3, [r4, #4]
 8007a2a:	bf04      	itt	eq
 8007a2c:	1949      	addeq	r1, r1, r5
 8007a2e:	6021      	streq	r1, [r4, #0]
 8007a30:	6054      	str	r4, [r2, #4]
 8007a32:	e7ca      	b.n	80079ca <_free_r+0x26>
 8007a34:	b003      	add	sp, #12
 8007a36:	bd30      	pop	{r4, r5, pc}
 8007a38:	200085f0 	.word	0x200085f0

08007a3c <sbrk_aligned>:
 8007a3c:	b570      	push	{r4, r5, r6, lr}
 8007a3e:	4e0e      	ldr	r6, [pc, #56]	; (8007a78 <sbrk_aligned+0x3c>)
 8007a40:	460c      	mov	r4, r1
 8007a42:	6831      	ldr	r1, [r6, #0]
 8007a44:	4605      	mov	r5, r0
 8007a46:	b911      	cbnz	r1, 8007a4e <sbrk_aligned+0x12>
 8007a48:	f000 fcaa 	bl	80083a0 <_sbrk_r>
 8007a4c:	6030      	str	r0, [r6, #0]
 8007a4e:	4621      	mov	r1, r4
 8007a50:	4628      	mov	r0, r5
 8007a52:	f000 fca5 	bl	80083a0 <_sbrk_r>
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	d00a      	beq.n	8007a70 <sbrk_aligned+0x34>
 8007a5a:	1cc4      	adds	r4, r0, #3
 8007a5c:	f024 0403 	bic.w	r4, r4, #3
 8007a60:	42a0      	cmp	r0, r4
 8007a62:	d007      	beq.n	8007a74 <sbrk_aligned+0x38>
 8007a64:	1a21      	subs	r1, r4, r0
 8007a66:	4628      	mov	r0, r5
 8007a68:	f000 fc9a 	bl	80083a0 <_sbrk_r>
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	d101      	bne.n	8007a74 <sbrk_aligned+0x38>
 8007a70:	f04f 34ff 	mov.w	r4, #4294967295
 8007a74:	4620      	mov	r0, r4
 8007a76:	bd70      	pop	{r4, r5, r6, pc}
 8007a78:	200085f4 	.word	0x200085f4

08007a7c <_malloc_r>:
 8007a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a80:	1ccd      	adds	r5, r1, #3
 8007a82:	f025 0503 	bic.w	r5, r5, #3
 8007a86:	3508      	adds	r5, #8
 8007a88:	2d0c      	cmp	r5, #12
 8007a8a:	bf38      	it	cc
 8007a8c:	250c      	movcc	r5, #12
 8007a8e:	2d00      	cmp	r5, #0
 8007a90:	4607      	mov	r7, r0
 8007a92:	db01      	blt.n	8007a98 <_malloc_r+0x1c>
 8007a94:	42a9      	cmp	r1, r5
 8007a96:	d905      	bls.n	8007aa4 <_malloc_r+0x28>
 8007a98:	230c      	movs	r3, #12
 8007a9a:	603b      	str	r3, [r7, #0]
 8007a9c:	2600      	movs	r6, #0
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aa4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b78 <_malloc_r+0xfc>
 8007aa8:	f000 f868 	bl	8007b7c <__malloc_lock>
 8007aac:	f8d8 3000 	ldr.w	r3, [r8]
 8007ab0:	461c      	mov	r4, r3
 8007ab2:	bb5c      	cbnz	r4, 8007b0c <_malloc_r+0x90>
 8007ab4:	4629      	mov	r1, r5
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	f7ff ffc0 	bl	8007a3c <sbrk_aligned>
 8007abc:	1c43      	adds	r3, r0, #1
 8007abe:	4604      	mov	r4, r0
 8007ac0:	d155      	bne.n	8007b6e <_malloc_r+0xf2>
 8007ac2:	f8d8 4000 	ldr.w	r4, [r8]
 8007ac6:	4626      	mov	r6, r4
 8007ac8:	2e00      	cmp	r6, #0
 8007aca:	d145      	bne.n	8007b58 <_malloc_r+0xdc>
 8007acc:	2c00      	cmp	r4, #0
 8007ace:	d048      	beq.n	8007b62 <_malloc_r+0xe6>
 8007ad0:	6823      	ldr	r3, [r4, #0]
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	4638      	mov	r0, r7
 8007ad6:	eb04 0903 	add.w	r9, r4, r3
 8007ada:	f000 fc61 	bl	80083a0 <_sbrk_r>
 8007ade:	4581      	cmp	r9, r0
 8007ae0:	d13f      	bne.n	8007b62 <_malloc_r+0xe6>
 8007ae2:	6821      	ldr	r1, [r4, #0]
 8007ae4:	1a6d      	subs	r5, r5, r1
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	4638      	mov	r0, r7
 8007aea:	f7ff ffa7 	bl	8007a3c <sbrk_aligned>
 8007aee:	3001      	adds	r0, #1
 8007af0:	d037      	beq.n	8007b62 <_malloc_r+0xe6>
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	442b      	add	r3, r5
 8007af6:	6023      	str	r3, [r4, #0]
 8007af8:	f8d8 3000 	ldr.w	r3, [r8]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d038      	beq.n	8007b72 <_malloc_r+0xf6>
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	42a2      	cmp	r2, r4
 8007b04:	d12b      	bne.n	8007b5e <_malloc_r+0xe2>
 8007b06:	2200      	movs	r2, #0
 8007b08:	605a      	str	r2, [r3, #4]
 8007b0a:	e00f      	b.n	8007b2c <_malloc_r+0xb0>
 8007b0c:	6822      	ldr	r2, [r4, #0]
 8007b0e:	1b52      	subs	r2, r2, r5
 8007b10:	d41f      	bmi.n	8007b52 <_malloc_r+0xd6>
 8007b12:	2a0b      	cmp	r2, #11
 8007b14:	d917      	bls.n	8007b46 <_malloc_r+0xca>
 8007b16:	1961      	adds	r1, r4, r5
 8007b18:	42a3      	cmp	r3, r4
 8007b1a:	6025      	str	r5, [r4, #0]
 8007b1c:	bf18      	it	ne
 8007b1e:	6059      	strne	r1, [r3, #4]
 8007b20:	6863      	ldr	r3, [r4, #4]
 8007b22:	bf08      	it	eq
 8007b24:	f8c8 1000 	streq.w	r1, [r8]
 8007b28:	5162      	str	r2, [r4, r5]
 8007b2a:	604b      	str	r3, [r1, #4]
 8007b2c:	4638      	mov	r0, r7
 8007b2e:	f104 060b 	add.w	r6, r4, #11
 8007b32:	f000 f829 	bl	8007b88 <__malloc_unlock>
 8007b36:	f026 0607 	bic.w	r6, r6, #7
 8007b3a:	1d23      	adds	r3, r4, #4
 8007b3c:	1af2      	subs	r2, r6, r3
 8007b3e:	d0ae      	beq.n	8007a9e <_malloc_r+0x22>
 8007b40:	1b9b      	subs	r3, r3, r6
 8007b42:	50a3      	str	r3, [r4, r2]
 8007b44:	e7ab      	b.n	8007a9e <_malloc_r+0x22>
 8007b46:	42a3      	cmp	r3, r4
 8007b48:	6862      	ldr	r2, [r4, #4]
 8007b4a:	d1dd      	bne.n	8007b08 <_malloc_r+0x8c>
 8007b4c:	f8c8 2000 	str.w	r2, [r8]
 8007b50:	e7ec      	b.n	8007b2c <_malloc_r+0xb0>
 8007b52:	4623      	mov	r3, r4
 8007b54:	6864      	ldr	r4, [r4, #4]
 8007b56:	e7ac      	b.n	8007ab2 <_malloc_r+0x36>
 8007b58:	4634      	mov	r4, r6
 8007b5a:	6876      	ldr	r6, [r6, #4]
 8007b5c:	e7b4      	b.n	8007ac8 <_malloc_r+0x4c>
 8007b5e:	4613      	mov	r3, r2
 8007b60:	e7cc      	b.n	8007afc <_malloc_r+0x80>
 8007b62:	230c      	movs	r3, #12
 8007b64:	603b      	str	r3, [r7, #0]
 8007b66:	4638      	mov	r0, r7
 8007b68:	f000 f80e 	bl	8007b88 <__malloc_unlock>
 8007b6c:	e797      	b.n	8007a9e <_malloc_r+0x22>
 8007b6e:	6025      	str	r5, [r4, #0]
 8007b70:	e7dc      	b.n	8007b2c <_malloc_r+0xb0>
 8007b72:	605b      	str	r3, [r3, #4]
 8007b74:	deff      	udf	#255	; 0xff
 8007b76:	bf00      	nop
 8007b78:	200085f0 	.word	0x200085f0

08007b7c <__malloc_lock>:
 8007b7c:	4801      	ldr	r0, [pc, #4]	; (8007b84 <__malloc_lock+0x8>)
 8007b7e:	f7ff bf01 	b.w	8007984 <__retarget_lock_acquire_recursive>
 8007b82:	bf00      	nop
 8007b84:	200085ec 	.word	0x200085ec

08007b88 <__malloc_unlock>:
 8007b88:	4801      	ldr	r0, [pc, #4]	; (8007b90 <__malloc_unlock+0x8>)
 8007b8a:	f7ff befc 	b.w	8007986 <__retarget_lock_release_recursive>
 8007b8e:	bf00      	nop
 8007b90:	200085ec 	.word	0x200085ec

08007b94 <__sfputc_r>:
 8007b94:	6893      	ldr	r3, [r2, #8]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	b410      	push	{r4}
 8007b9c:	6093      	str	r3, [r2, #8]
 8007b9e:	da08      	bge.n	8007bb2 <__sfputc_r+0x1e>
 8007ba0:	6994      	ldr	r4, [r2, #24]
 8007ba2:	42a3      	cmp	r3, r4
 8007ba4:	db01      	blt.n	8007baa <__sfputc_r+0x16>
 8007ba6:	290a      	cmp	r1, #10
 8007ba8:	d103      	bne.n	8007bb2 <__sfputc_r+0x1e>
 8007baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bae:	f7ff bd86 	b.w	80076be <__swbuf_r>
 8007bb2:	6813      	ldr	r3, [r2, #0]
 8007bb4:	1c58      	adds	r0, r3, #1
 8007bb6:	6010      	str	r0, [r2, #0]
 8007bb8:	7019      	strb	r1, [r3, #0]
 8007bba:	4608      	mov	r0, r1
 8007bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <__sfputs_r>:
 8007bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc4:	4606      	mov	r6, r0
 8007bc6:	460f      	mov	r7, r1
 8007bc8:	4614      	mov	r4, r2
 8007bca:	18d5      	adds	r5, r2, r3
 8007bcc:	42ac      	cmp	r4, r5
 8007bce:	d101      	bne.n	8007bd4 <__sfputs_r+0x12>
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	e007      	b.n	8007be4 <__sfputs_r+0x22>
 8007bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd8:	463a      	mov	r2, r7
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f7ff ffda 	bl	8007b94 <__sfputc_r>
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	d1f3      	bne.n	8007bcc <__sfputs_r+0xa>
 8007be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007be8 <_vfiprintf_r>:
 8007be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bec:	460d      	mov	r5, r1
 8007bee:	b09d      	sub	sp, #116	; 0x74
 8007bf0:	4614      	mov	r4, r2
 8007bf2:	4698      	mov	r8, r3
 8007bf4:	4606      	mov	r6, r0
 8007bf6:	b118      	cbz	r0, 8007c00 <_vfiprintf_r+0x18>
 8007bf8:	6a03      	ldr	r3, [r0, #32]
 8007bfa:	b90b      	cbnz	r3, 8007c00 <_vfiprintf_r+0x18>
 8007bfc:	f7ff fc78 	bl	80074f0 <__sinit>
 8007c00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c02:	07d9      	lsls	r1, r3, #31
 8007c04:	d405      	bmi.n	8007c12 <_vfiprintf_r+0x2a>
 8007c06:	89ab      	ldrh	r3, [r5, #12]
 8007c08:	059a      	lsls	r2, r3, #22
 8007c0a:	d402      	bmi.n	8007c12 <_vfiprintf_r+0x2a>
 8007c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c0e:	f7ff feb9 	bl	8007984 <__retarget_lock_acquire_recursive>
 8007c12:	89ab      	ldrh	r3, [r5, #12]
 8007c14:	071b      	lsls	r3, r3, #28
 8007c16:	d501      	bpl.n	8007c1c <_vfiprintf_r+0x34>
 8007c18:	692b      	ldr	r3, [r5, #16]
 8007c1a:	b99b      	cbnz	r3, 8007c44 <_vfiprintf_r+0x5c>
 8007c1c:	4629      	mov	r1, r5
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f7ff fd8a 	bl	8007738 <__swsetup_r>
 8007c24:	b170      	cbz	r0, 8007c44 <_vfiprintf_r+0x5c>
 8007c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c28:	07dc      	lsls	r4, r3, #31
 8007c2a:	d504      	bpl.n	8007c36 <_vfiprintf_r+0x4e>
 8007c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c30:	b01d      	add	sp, #116	; 0x74
 8007c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c36:	89ab      	ldrh	r3, [r5, #12]
 8007c38:	0598      	lsls	r0, r3, #22
 8007c3a:	d4f7      	bmi.n	8007c2c <_vfiprintf_r+0x44>
 8007c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c3e:	f7ff fea2 	bl	8007986 <__retarget_lock_release_recursive>
 8007c42:	e7f3      	b.n	8007c2c <_vfiprintf_r+0x44>
 8007c44:	2300      	movs	r3, #0
 8007c46:	9309      	str	r3, [sp, #36]	; 0x24
 8007c48:	2320      	movs	r3, #32
 8007c4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c52:	2330      	movs	r3, #48	; 0x30
 8007c54:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007e08 <_vfiprintf_r+0x220>
 8007c58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c5c:	f04f 0901 	mov.w	r9, #1
 8007c60:	4623      	mov	r3, r4
 8007c62:	469a      	mov	sl, r3
 8007c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c68:	b10a      	cbz	r2, 8007c6e <_vfiprintf_r+0x86>
 8007c6a:	2a25      	cmp	r2, #37	; 0x25
 8007c6c:	d1f9      	bne.n	8007c62 <_vfiprintf_r+0x7a>
 8007c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8007c72:	d00b      	beq.n	8007c8c <_vfiprintf_r+0xa4>
 8007c74:	465b      	mov	r3, fp
 8007c76:	4622      	mov	r2, r4
 8007c78:	4629      	mov	r1, r5
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	f7ff ffa1 	bl	8007bc2 <__sfputs_r>
 8007c80:	3001      	adds	r0, #1
 8007c82:	f000 80a9 	beq.w	8007dd8 <_vfiprintf_r+0x1f0>
 8007c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c88:	445a      	add	r2, fp
 8007c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8007c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f000 80a1 	beq.w	8007dd8 <_vfiprintf_r+0x1f0>
 8007c96:	2300      	movs	r3, #0
 8007c98:	f04f 32ff 	mov.w	r2, #4294967295
 8007c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ca0:	f10a 0a01 	add.w	sl, sl, #1
 8007ca4:	9304      	str	r3, [sp, #16]
 8007ca6:	9307      	str	r3, [sp, #28]
 8007ca8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cac:	931a      	str	r3, [sp, #104]	; 0x68
 8007cae:	4654      	mov	r4, sl
 8007cb0:	2205      	movs	r2, #5
 8007cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb6:	4854      	ldr	r0, [pc, #336]	; (8007e08 <_vfiprintf_r+0x220>)
 8007cb8:	f7f8 fa8a 	bl	80001d0 <memchr>
 8007cbc:	9a04      	ldr	r2, [sp, #16]
 8007cbe:	b9d8      	cbnz	r0, 8007cf8 <_vfiprintf_r+0x110>
 8007cc0:	06d1      	lsls	r1, r2, #27
 8007cc2:	bf44      	itt	mi
 8007cc4:	2320      	movmi	r3, #32
 8007cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cca:	0713      	lsls	r3, r2, #28
 8007ccc:	bf44      	itt	mi
 8007cce:	232b      	movmi	r3, #43	; 0x2b
 8007cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8007cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8007cda:	d015      	beq.n	8007d08 <_vfiprintf_r+0x120>
 8007cdc:	9a07      	ldr	r2, [sp, #28]
 8007cde:	4654      	mov	r4, sl
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	f04f 0c0a 	mov.w	ip, #10
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cec:	3b30      	subs	r3, #48	; 0x30
 8007cee:	2b09      	cmp	r3, #9
 8007cf0:	d94d      	bls.n	8007d8e <_vfiprintf_r+0x1a6>
 8007cf2:	b1b0      	cbz	r0, 8007d22 <_vfiprintf_r+0x13a>
 8007cf4:	9207      	str	r2, [sp, #28]
 8007cf6:	e014      	b.n	8007d22 <_vfiprintf_r+0x13a>
 8007cf8:	eba0 0308 	sub.w	r3, r0, r8
 8007cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8007d00:	4313      	orrs	r3, r2
 8007d02:	9304      	str	r3, [sp, #16]
 8007d04:	46a2      	mov	sl, r4
 8007d06:	e7d2      	b.n	8007cae <_vfiprintf_r+0xc6>
 8007d08:	9b03      	ldr	r3, [sp, #12]
 8007d0a:	1d19      	adds	r1, r3, #4
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	9103      	str	r1, [sp, #12]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	bfbb      	ittet	lt
 8007d14:	425b      	neglt	r3, r3
 8007d16:	f042 0202 	orrlt.w	r2, r2, #2
 8007d1a:	9307      	strge	r3, [sp, #28]
 8007d1c:	9307      	strlt	r3, [sp, #28]
 8007d1e:	bfb8      	it	lt
 8007d20:	9204      	strlt	r2, [sp, #16]
 8007d22:	7823      	ldrb	r3, [r4, #0]
 8007d24:	2b2e      	cmp	r3, #46	; 0x2e
 8007d26:	d10c      	bne.n	8007d42 <_vfiprintf_r+0x15a>
 8007d28:	7863      	ldrb	r3, [r4, #1]
 8007d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d2c:	d134      	bne.n	8007d98 <_vfiprintf_r+0x1b0>
 8007d2e:	9b03      	ldr	r3, [sp, #12]
 8007d30:	1d1a      	adds	r2, r3, #4
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	9203      	str	r2, [sp, #12]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	bfb8      	it	lt
 8007d3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d3e:	3402      	adds	r4, #2
 8007d40:	9305      	str	r3, [sp, #20]
 8007d42:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007e18 <_vfiprintf_r+0x230>
 8007d46:	7821      	ldrb	r1, [r4, #0]
 8007d48:	2203      	movs	r2, #3
 8007d4a:	4650      	mov	r0, sl
 8007d4c:	f7f8 fa40 	bl	80001d0 <memchr>
 8007d50:	b138      	cbz	r0, 8007d62 <_vfiprintf_r+0x17a>
 8007d52:	9b04      	ldr	r3, [sp, #16]
 8007d54:	eba0 000a 	sub.w	r0, r0, sl
 8007d58:	2240      	movs	r2, #64	; 0x40
 8007d5a:	4082      	lsls	r2, r0
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	3401      	adds	r4, #1
 8007d60:	9304      	str	r3, [sp, #16]
 8007d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d66:	4829      	ldr	r0, [pc, #164]	; (8007e0c <_vfiprintf_r+0x224>)
 8007d68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d6c:	2206      	movs	r2, #6
 8007d6e:	f7f8 fa2f 	bl	80001d0 <memchr>
 8007d72:	2800      	cmp	r0, #0
 8007d74:	d03f      	beq.n	8007df6 <_vfiprintf_r+0x20e>
 8007d76:	4b26      	ldr	r3, [pc, #152]	; (8007e10 <_vfiprintf_r+0x228>)
 8007d78:	bb1b      	cbnz	r3, 8007dc2 <_vfiprintf_r+0x1da>
 8007d7a:	9b03      	ldr	r3, [sp, #12]
 8007d7c:	3307      	adds	r3, #7
 8007d7e:	f023 0307 	bic.w	r3, r3, #7
 8007d82:	3308      	adds	r3, #8
 8007d84:	9303      	str	r3, [sp, #12]
 8007d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d88:	443b      	add	r3, r7
 8007d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d8c:	e768      	b.n	8007c60 <_vfiprintf_r+0x78>
 8007d8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d92:	460c      	mov	r4, r1
 8007d94:	2001      	movs	r0, #1
 8007d96:	e7a6      	b.n	8007ce6 <_vfiprintf_r+0xfe>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	3401      	adds	r4, #1
 8007d9c:	9305      	str	r3, [sp, #20]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	f04f 0c0a 	mov.w	ip, #10
 8007da4:	4620      	mov	r0, r4
 8007da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007daa:	3a30      	subs	r2, #48	; 0x30
 8007dac:	2a09      	cmp	r2, #9
 8007dae:	d903      	bls.n	8007db8 <_vfiprintf_r+0x1d0>
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0c6      	beq.n	8007d42 <_vfiprintf_r+0x15a>
 8007db4:	9105      	str	r1, [sp, #20]
 8007db6:	e7c4      	b.n	8007d42 <_vfiprintf_r+0x15a>
 8007db8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e7f0      	b.n	8007da4 <_vfiprintf_r+0x1bc>
 8007dc2:	ab03      	add	r3, sp, #12
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	462a      	mov	r2, r5
 8007dc8:	4b12      	ldr	r3, [pc, #72]	; (8007e14 <_vfiprintf_r+0x22c>)
 8007dca:	a904      	add	r1, sp, #16
 8007dcc:	4630      	mov	r0, r6
 8007dce:	f3af 8000 	nop.w
 8007dd2:	4607      	mov	r7, r0
 8007dd4:	1c78      	adds	r0, r7, #1
 8007dd6:	d1d6      	bne.n	8007d86 <_vfiprintf_r+0x19e>
 8007dd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dda:	07d9      	lsls	r1, r3, #31
 8007ddc:	d405      	bmi.n	8007dea <_vfiprintf_r+0x202>
 8007dde:	89ab      	ldrh	r3, [r5, #12]
 8007de0:	059a      	lsls	r2, r3, #22
 8007de2:	d402      	bmi.n	8007dea <_vfiprintf_r+0x202>
 8007de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007de6:	f7ff fdce 	bl	8007986 <__retarget_lock_release_recursive>
 8007dea:	89ab      	ldrh	r3, [r5, #12]
 8007dec:	065b      	lsls	r3, r3, #25
 8007dee:	f53f af1d 	bmi.w	8007c2c <_vfiprintf_r+0x44>
 8007df2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007df4:	e71c      	b.n	8007c30 <_vfiprintf_r+0x48>
 8007df6:	ab03      	add	r3, sp, #12
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	462a      	mov	r2, r5
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <_vfiprintf_r+0x22c>)
 8007dfe:	a904      	add	r1, sp, #16
 8007e00:	4630      	mov	r0, r6
 8007e02:	f000 f879 	bl	8007ef8 <_printf_i>
 8007e06:	e7e4      	b.n	8007dd2 <_vfiprintf_r+0x1ea>
 8007e08:	080085a0 	.word	0x080085a0
 8007e0c:	080085aa 	.word	0x080085aa
 8007e10:	00000000 	.word	0x00000000
 8007e14:	08007bc3 	.word	0x08007bc3
 8007e18:	080085a6 	.word	0x080085a6

08007e1c <_printf_common>:
 8007e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e20:	4616      	mov	r6, r2
 8007e22:	4699      	mov	r9, r3
 8007e24:	688a      	ldr	r2, [r1, #8]
 8007e26:	690b      	ldr	r3, [r1, #16]
 8007e28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	bfb8      	it	lt
 8007e30:	4613      	movlt	r3, r2
 8007e32:	6033      	str	r3, [r6, #0]
 8007e34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e38:	4607      	mov	r7, r0
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	b10a      	cbz	r2, 8007e42 <_printf_common+0x26>
 8007e3e:	3301      	adds	r3, #1
 8007e40:	6033      	str	r3, [r6, #0]
 8007e42:	6823      	ldr	r3, [r4, #0]
 8007e44:	0699      	lsls	r1, r3, #26
 8007e46:	bf42      	ittt	mi
 8007e48:	6833      	ldrmi	r3, [r6, #0]
 8007e4a:	3302      	addmi	r3, #2
 8007e4c:	6033      	strmi	r3, [r6, #0]
 8007e4e:	6825      	ldr	r5, [r4, #0]
 8007e50:	f015 0506 	ands.w	r5, r5, #6
 8007e54:	d106      	bne.n	8007e64 <_printf_common+0x48>
 8007e56:	f104 0a19 	add.w	sl, r4, #25
 8007e5a:	68e3      	ldr	r3, [r4, #12]
 8007e5c:	6832      	ldr	r2, [r6, #0]
 8007e5e:	1a9b      	subs	r3, r3, r2
 8007e60:	42ab      	cmp	r3, r5
 8007e62:	dc26      	bgt.n	8007eb2 <_printf_common+0x96>
 8007e64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e68:	1e13      	subs	r3, r2, #0
 8007e6a:	6822      	ldr	r2, [r4, #0]
 8007e6c:	bf18      	it	ne
 8007e6e:	2301      	movne	r3, #1
 8007e70:	0692      	lsls	r2, r2, #26
 8007e72:	d42b      	bmi.n	8007ecc <_printf_common+0xb0>
 8007e74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e78:	4649      	mov	r1, r9
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	47c0      	blx	r8
 8007e7e:	3001      	adds	r0, #1
 8007e80:	d01e      	beq.n	8007ec0 <_printf_common+0xa4>
 8007e82:	6823      	ldr	r3, [r4, #0]
 8007e84:	6922      	ldr	r2, [r4, #16]
 8007e86:	f003 0306 	and.w	r3, r3, #6
 8007e8a:	2b04      	cmp	r3, #4
 8007e8c:	bf02      	ittt	eq
 8007e8e:	68e5      	ldreq	r5, [r4, #12]
 8007e90:	6833      	ldreq	r3, [r6, #0]
 8007e92:	1aed      	subeq	r5, r5, r3
 8007e94:	68a3      	ldr	r3, [r4, #8]
 8007e96:	bf0c      	ite	eq
 8007e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e9c:	2500      	movne	r5, #0
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	bfc4      	itt	gt
 8007ea2:	1a9b      	subgt	r3, r3, r2
 8007ea4:	18ed      	addgt	r5, r5, r3
 8007ea6:	2600      	movs	r6, #0
 8007ea8:	341a      	adds	r4, #26
 8007eaa:	42b5      	cmp	r5, r6
 8007eac:	d11a      	bne.n	8007ee4 <_printf_common+0xc8>
 8007eae:	2000      	movs	r0, #0
 8007eb0:	e008      	b.n	8007ec4 <_printf_common+0xa8>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	4652      	mov	r2, sl
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	4638      	mov	r0, r7
 8007eba:	47c0      	blx	r8
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d103      	bne.n	8007ec8 <_printf_common+0xac>
 8007ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec8:	3501      	adds	r5, #1
 8007eca:	e7c6      	b.n	8007e5a <_printf_common+0x3e>
 8007ecc:	18e1      	adds	r1, r4, r3
 8007ece:	1c5a      	adds	r2, r3, #1
 8007ed0:	2030      	movs	r0, #48	; 0x30
 8007ed2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ed6:	4422      	add	r2, r4
 8007ed8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007edc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ee0:	3302      	adds	r3, #2
 8007ee2:	e7c7      	b.n	8007e74 <_printf_common+0x58>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	4622      	mov	r2, r4
 8007ee8:	4649      	mov	r1, r9
 8007eea:	4638      	mov	r0, r7
 8007eec:	47c0      	blx	r8
 8007eee:	3001      	adds	r0, #1
 8007ef0:	d0e6      	beq.n	8007ec0 <_printf_common+0xa4>
 8007ef2:	3601      	adds	r6, #1
 8007ef4:	e7d9      	b.n	8007eaa <_printf_common+0x8e>
	...

08007ef8 <_printf_i>:
 8007ef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007efc:	7e0f      	ldrb	r7, [r1, #24]
 8007efe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f00:	2f78      	cmp	r7, #120	; 0x78
 8007f02:	4691      	mov	r9, r2
 8007f04:	4680      	mov	r8, r0
 8007f06:	460c      	mov	r4, r1
 8007f08:	469a      	mov	sl, r3
 8007f0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f0e:	d807      	bhi.n	8007f20 <_printf_i+0x28>
 8007f10:	2f62      	cmp	r7, #98	; 0x62
 8007f12:	d80a      	bhi.n	8007f2a <_printf_i+0x32>
 8007f14:	2f00      	cmp	r7, #0
 8007f16:	f000 80d4 	beq.w	80080c2 <_printf_i+0x1ca>
 8007f1a:	2f58      	cmp	r7, #88	; 0x58
 8007f1c:	f000 80c0 	beq.w	80080a0 <_printf_i+0x1a8>
 8007f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f28:	e03a      	b.n	8007fa0 <_printf_i+0xa8>
 8007f2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f2e:	2b15      	cmp	r3, #21
 8007f30:	d8f6      	bhi.n	8007f20 <_printf_i+0x28>
 8007f32:	a101      	add	r1, pc, #4	; (adr r1, 8007f38 <_printf_i+0x40>)
 8007f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f38:	08007f91 	.word	0x08007f91
 8007f3c:	08007fa5 	.word	0x08007fa5
 8007f40:	08007f21 	.word	0x08007f21
 8007f44:	08007f21 	.word	0x08007f21
 8007f48:	08007f21 	.word	0x08007f21
 8007f4c:	08007f21 	.word	0x08007f21
 8007f50:	08007fa5 	.word	0x08007fa5
 8007f54:	08007f21 	.word	0x08007f21
 8007f58:	08007f21 	.word	0x08007f21
 8007f5c:	08007f21 	.word	0x08007f21
 8007f60:	08007f21 	.word	0x08007f21
 8007f64:	080080a9 	.word	0x080080a9
 8007f68:	08007fd1 	.word	0x08007fd1
 8007f6c:	08008063 	.word	0x08008063
 8007f70:	08007f21 	.word	0x08007f21
 8007f74:	08007f21 	.word	0x08007f21
 8007f78:	080080cb 	.word	0x080080cb
 8007f7c:	08007f21 	.word	0x08007f21
 8007f80:	08007fd1 	.word	0x08007fd1
 8007f84:	08007f21 	.word	0x08007f21
 8007f88:	08007f21 	.word	0x08007f21
 8007f8c:	0800806b 	.word	0x0800806b
 8007f90:	682b      	ldr	r3, [r5, #0]
 8007f92:	1d1a      	adds	r2, r3, #4
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	602a      	str	r2, [r5, #0]
 8007f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e09f      	b.n	80080e4 <_printf_i+0x1ec>
 8007fa4:	6820      	ldr	r0, [r4, #0]
 8007fa6:	682b      	ldr	r3, [r5, #0]
 8007fa8:	0607      	lsls	r7, r0, #24
 8007faa:	f103 0104 	add.w	r1, r3, #4
 8007fae:	6029      	str	r1, [r5, #0]
 8007fb0:	d501      	bpl.n	8007fb6 <_printf_i+0xbe>
 8007fb2:	681e      	ldr	r6, [r3, #0]
 8007fb4:	e003      	b.n	8007fbe <_printf_i+0xc6>
 8007fb6:	0646      	lsls	r6, r0, #25
 8007fb8:	d5fb      	bpl.n	8007fb2 <_printf_i+0xba>
 8007fba:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007fbe:	2e00      	cmp	r6, #0
 8007fc0:	da03      	bge.n	8007fca <_printf_i+0xd2>
 8007fc2:	232d      	movs	r3, #45	; 0x2d
 8007fc4:	4276      	negs	r6, r6
 8007fc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fca:	485a      	ldr	r0, [pc, #360]	; (8008134 <_printf_i+0x23c>)
 8007fcc:	230a      	movs	r3, #10
 8007fce:	e012      	b.n	8007ff6 <_printf_i+0xfe>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	6820      	ldr	r0, [r4, #0]
 8007fd4:	1d19      	adds	r1, r3, #4
 8007fd6:	6029      	str	r1, [r5, #0]
 8007fd8:	0605      	lsls	r5, r0, #24
 8007fda:	d501      	bpl.n	8007fe0 <_printf_i+0xe8>
 8007fdc:	681e      	ldr	r6, [r3, #0]
 8007fde:	e002      	b.n	8007fe6 <_printf_i+0xee>
 8007fe0:	0641      	lsls	r1, r0, #25
 8007fe2:	d5fb      	bpl.n	8007fdc <_printf_i+0xe4>
 8007fe4:	881e      	ldrh	r6, [r3, #0]
 8007fe6:	4853      	ldr	r0, [pc, #332]	; (8008134 <_printf_i+0x23c>)
 8007fe8:	2f6f      	cmp	r7, #111	; 0x6f
 8007fea:	bf0c      	ite	eq
 8007fec:	2308      	moveq	r3, #8
 8007fee:	230a      	movne	r3, #10
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ff6:	6865      	ldr	r5, [r4, #4]
 8007ff8:	60a5      	str	r5, [r4, #8]
 8007ffa:	2d00      	cmp	r5, #0
 8007ffc:	bfa2      	ittt	ge
 8007ffe:	6821      	ldrge	r1, [r4, #0]
 8008000:	f021 0104 	bicge.w	r1, r1, #4
 8008004:	6021      	strge	r1, [r4, #0]
 8008006:	b90e      	cbnz	r6, 800800c <_printf_i+0x114>
 8008008:	2d00      	cmp	r5, #0
 800800a:	d04b      	beq.n	80080a4 <_printf_i+0x1ac>
 800800c:	4615      	mov	r5, r2
 800800e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008012:	fb03 6711 	mls	r7, r3, r1, r6
 8008016:	5dc7      	ldrb	r7, [r0, r7]
 8008018:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800801c:	4637      	mov	r7, r6
 800801e:	42bb      	cmp	r3, r7
 8008020:	460e      	mov	r6, r1
 8008022:	d9f4      	bls.n	800800e <_printf_i+0x116>
 8008024:	2b08      	cmp	r3, #8
 8008026:	d10b      	bne.n	8008040 <_printf_i+0x148>
 8008028:	6823      	ldr	r3, [r4, #0]
 800802a:	07de      	lsls	r6, r3, #31
 800802c:	d508      	bpl.n	8008040 <_printf_i+0x148>
 800802e:	6923      	ldr	r3, [r4, #16]
 8008030:	6861      	ldr	r1, [r4, #4]
 8008032:	4299      	cmp	r1, r3
 8008034:	bfde      	ittt	le
 8008036:	2330      	movle	r3, #48	; 0x30
 8008038:	f805 3c01 	strble.w	r3, [r5, #-1]
 800803c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008040:	1b52      	subs	r2, r2, r5
 8008042:	6122      	str	r2, [r4, #16]
 8008044:	f8cd a000 	str.w	sl, [sp]
 8008048:	464b      	mov	r3, r9
 800804a:	aa03      	add	r2, sp, #12
 800804c:	4621      	mov	r1, r4
 800804e:	4640      	mov	r0, r8
 8008050:	f7ff fee4 	bl	8007e1c <_printf_common>
 8008054:	3001      	adds	r0, #1
 8008056:	d14a      	bne.n	80080ee <_printf_i+0x1f6>
 8008058:	f04f 30ff 	mov.w	r0, #4294967295
 800805c:	b004      	add	sp, #16
 800805e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008062:	6823      	ldr	r3, [r4, #0]
 8008064:	f043 0320 	orr.w	r3, r3, #32
 8008068:	6023      	str	r3, [r4, #0]
 800806a:	4833      	ldr	r0, [pc, #204]	; (8008138 <_printf_i+0x240>)
 800806c:	2778      	movs	r7, #120	; 0x78
 800806e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	6829      	ldr	r1, [r5, #0]
 8008076:	061f      	lsls	r7, r3, #24
 8008078:	f851 6b04 	ldr.w	r6, [r1], #4
 800807c:	d402      	bmi.n	8008084 <_printf_i+0x18c>
 800807e:	065f      	lsls	r7, r3, #25
 8008080:	bf48      	it	mi
 8008082:	b2b6      	uxthmi	r6, r6
 8008084:	07df      	lsls	r7, r3, #31
 8008086:	bf48      	it	mi
 8008088:	f043 0320 	orrmi.w	r3, r3, #32
 800808c:	6029      	str	r1, [r5, #0]
 800808e:	bf48      	it	mi
 8008090:	6023      	strmi	r3, [r4, #0]
 8008092:	b91e      	cbnz	r6, 800809c <_printf_i+0x1a4>
 8008094:	6823      	ldr	r3, [r4, #0]
 8008096:	f023 0320 	bic.w	r3, r3, #32
 800809a:	6023      	str	r3, [r4, #0]
 800809c:	2310      	movs	r3, #16
 800809e:	e7a7      	b.n	8007ff0 <_printf_i+0xf8>
 80080a0:	4824      	ldr	r0, [pc, #144]	; (8008134 <_printf_i+0x23c>)
 80080a2:	e7e4      	b.n	800806e <_printf_i+0x176>
 80080a4:	4615      	mov	r5, r2
 80080a6:	e7bd      	b.n	8008024 <_printf_i+0x12c>
 80080a8:	682b      	ldr	r3, [r5, #0]
 80080aa:	6826      	ldr	r6, [r4, #0]
 80080ac:	6961      	ldr	r1, [r4, #20]
 80080ae:	1d18      	adds	r0, r3, #4
 80080b0:	6028      	str	r0, [r5, #0]
 80080b2:	0635      	lsls	r5, r6, #24
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	d501      	bpl.n	80080bc <_printf_i+0x1c4>
 80080b8:	6019      	str	r1, [r3, #0]
 80080ba:	e002      	b.n	80080c2 <_printf_i+0x1ca>
 80080bc:	0670      	lsls	r0, r6, #25
 80080be:	d5fb      	bpl.n	80080b8 <_printf_i+0x1c0>
 80080c0:	8019      	strh	r1, [r3, #0]
 80080c2:	2300      	movs	r3, #0
 80080c4:	6123      	str	r3, [r4, #16]
 80080c6:	4615      	mov	r5, r2
 80080c8:	e7bc      	b.n	8008044 <_printf_i+0x14c>
 80080ca:	682b      	ldr	r3, [r5, #0]
 80080cc:	1d1a      	adds	r2, r3, #4
 80080ce:	602a      	str	r2, [r5, #0]
 80080d0:	681d      	ldr	r5, [r3, #0]
 80080d2:	6862      	ldr	r2, [r4, #4]
 80080d4:	2100      	movs	r1, #0
 80080d6:	4628      	mov	r0, r5
 80080d8:	f7f8 f87a 	bl	80001d0 <memchr>
 80080dc:	b108      	cbz	r0, 80080e2 <_printf_i+0x1ea>
 80080de:	1b40      	subs	r0, r0, r5
 80080e0:	6060      	str	r0, [r4, #4]
 80080e2:	6863      	ldr	r3, [r4, #4]
 80080e4:	6123      	str	r3, [r4, #16]
 80080e6:	2300      	movs	r3, #0
 80080e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080ec:	e7aa      	b.n	8008044 <_printf_i+0x14c>
 80080ee:	6923      	ldr	r3, [r4, #16]
 80080f0:	462a      	mov	r2, r5
 80080f2:	4649      	mov	r1, r9
 80080f4:	4640      	mov	r0, r8
 80080f6:	47d0      	blx	sl
 80080f8:	3001      	adds	r0, #1
 80080fa:	d0ad      	beq.n	8008058 <_printf_i+0x160>
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	079b      	lsls	r3, r3, #30
 8008100:	d413      	bmi.n	800812a <_printf_i+0x232>
 8008102:	68e0      	ldr	r0, [r4, #12]
 8008104:	9b03      	ldr	r3, [sp, #12]
 8008106:	4298      	cmp	r0, r3
 8008108:	bfb8      	it	lt
 800810a:	4618      	movlt	r0, r3
 800810c:	e7a6      	b.n	800805c <_printf_i+0x164>
 800810e:	2301      	movs	r3, #1
 8008110:	4632      	mov	r2, r6
 8008112:	4649      	mov	r1, r9
 8008114:	4640      	mov	r0, r8
 8008116:	47d0      	blx	sl
 8008118:	3001      	adds	r0, #1
 800811a:	d09d      	beq.n	8008058 <_printf_i+0x160>
 800811c:	3501      	adds	r5, #1
 800811e:	68e3      	ldr	r3, [r4, #12]
 8008120:	9903      	ldr	r1, [sp, #12]
 8008122:	1a5b      	subs	r3, r3, r1
 8008124:	42ab      	cmp	r3, r5
 8008126:	dcf2      	bgt.n	800810e <_printf_i+0x216>
 8008128:	e7eb      	b.n	8008102 <_printf_i+0x20a>
 800812a:	2500      	movs	r5, #0
 800812c:	f104 0619 	add.w	r6, r4, #25
 8008130:	e7f5      	b.n	800811e <_printf_i+0x226>
 8008132:	bf00      	nop
 8008134:	080085b1 	.word	0x080085b1
 8008138:	080085c2 	.word	0x080085c2

0800813c <__sflush_r>:
 800813c:	898a      	ldrh	r2, [r1, #12]
 800813e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008142:	4605      	mov	r5, r0
 8008144:	0710      	lsls	r0, r2, #28
 8008146:	460c      	mov	r4, r1
 8008148:	d458      	bmi.n	80081fc <__sflush_r+0xc0>
 800814a:	684b      	ldr	r3, [r1, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	dc05      	bgt.n	800815c <__sflush_r+0x20>
 8008150:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008152:	2b00      	cmp	r3, #0
 8008154:	dc02      	bgt.n	800815c <__sflush_r+0x20>
 8008156:	2000      	movs	r0, #0
 8008158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800815c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800815e:	2e00      	cmp	r6, #0
 8008160:	d0f9      	beq.n	8008156 <__sflush_r+0x1a>
 8008162:	2300      	movs	r3, #0
 8008164:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008168:	682f      	ldr	r7, [r5, #0]
 800816a:	6a21      	ldr	r1, [r4, #32]
 800816c:	602b      	str	r3, [r5, #0]
 800816e:	d032      	beq.n	80081d6 <__sflush_r+0x9a>
 8008170:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008172:	89a3      	ldrh	r3, [r4, #12]
 8008174:	075a      	lsls	r2, r3, #29
 8008176:	d505      	bpl.n	8008184 <__sflush_r+0x48>
 8008178:	6863      	ldr	r3, [r4, #4]
 800817a:	1ac0      	subs	r0, r0, r3
 800817c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800817e:	b10b      	cbz	r3, 8008184 <__sflush_r+0x48>
 8008180:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008182:	1ac0      	subs	r0, r0, r3
 8008184:	2300      	movs	r3, #0
 8008186:	4602      	mov	r2, r0
 8008188:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800818a:	6a21      	ldr	r1, [r4, #32]
 800818c:	4628      	mov	r0, r5
 800818e:	47b0      	blx	r6
 8008190:	1c43      	adds	r3, r0, #1
 8008192:	89a3      	ldrh	r3, [r4, #12]
 8008194:	d106      	bne.n	80081a4 <__sflush_r+0x68>
 8008196:	6829      	ldr	r1, [r5, #0]
 8008198:	291d      	cmp	r1, #29
 800819a:	d82b      	bhi.n	80081f4 <__sflush_r+0xb8>
 800819c:	4a29      	ldr	r2, [pc, #164]	; (8008244 <__sflush_r+0x108>)
 800819e:	410a      	asrs	r2, r1
 80081a0:	07d6      	lsls	r6, r2, #31
 80081a2:	d427      	bmi.n	80081f4 <__sflush_r+0xb8>
 80081a4:	2200      	movs	r2, #0
 80081a6:	6062      	str	r2, [r4, #4]
 80081a8:	04d9      	lsls	r1, r3, #19
 80081aa:	6922      	ldr	r2, [r4, #16]
 80081ac:	6022      	str	r2, [r4, #0]
 80081ae:	d504      	bpl.n	80081ba <__sflush_r+0x7e>
 80081b0:	1c42      	adds	r2, r0, #1
 80081b2:	d101      	bne.n	80081b8 <__sflush_r+0x7c>
 80081b4:	682b      	ldr	r3, [r5, #0]
 80081b6:	b903      	cbnz	r3, 80081ba <__sflush_r+0x7e>
 80081b8:	6560      	str	r0, [r4, #84]	; 0x54
 80081ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081bc:	602f      	str	r7, [r5, #0]
 80081be:	2900      	cmp	r1, #0
 80081c0:	d0c9      	beq.n	8008156 <__sflush_r+0x1a>
 80081c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081c6:	4299      	cmp	r1, r3
 80081c8:	d002      	beq.n	80081d0 <__sflush_r+0x94>
 80081ca:	4628      	mov	r0, r5
 80081cc:	f7ff fbea 	bl	80079a4 <_free_r>
 80081d0:	2000      	movs	r0, #0
 80081d2:	6360      	str	r0, [r4, #52]	; 0x34
 80081d4:	e7c0      	b.n	8008158 <__sflush_r+0x1c>
 80081d6:	2301      	movs	r3, #1
 80081d8:	4628      	mov	r0, r5
 80081da:	47b0      	blx	r6
 80081dc:	1c41      	adds	r1, r0, #1
 80081de:	d1c8      	bne.n	8008172 <__sflush_r+0x36>
 80081e0:	682b      	ldr	r3, [r5, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0c5      	beq.n	8008172 <__sflush_r+0x36>
 80081e6:	2b1d      	cmp	r3, #29
 80081e8:	d001      	beq.n	80081ee <__sflush_r+0xb2>
 80081ea:	2b16      	cmp	r3, #22
 80081ec:	d101      	bne.n	80081f2 <__sflush_r+0xb6>
 80081ee:	602f      	str	r7, [r5, #0]
 80081f0:	e7b1      	b.n	8008156 <__sflush_r+0x1a>
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081f8:	81a3      	strh	r3, [r4, #12]
 80081fa:	e7ad      	b.n	8008158 <__sflush_r+0x1c>
 80081fc:	690f      	ldr	r7, [r1, #16]
 80081fe:	2f00      	cmp	r7, #0
 8008200:	d0a9      	beq.n	8008156 <__sflush_r+0x1a>
 8008202:	0793      	lsls	r3, r2, #30
 8008204:	680e      	ldr	r6, [r1, #0]
 8008206:	bf08      	it	eq
 8008208:	694b      	ldreq	r3, [r1, #20]
 800820a:	600f      	str	r7, [r1, #0]
 800820c:	bf18      	it	ne
 800820e:	2300      	movne	r3, #0
 8008210:	eba6 0807 	sub.w	r8, r6, r7
 8008214:	608b      	str	r3, [r1, #8]
 8008216:	f1b8 0f00 	cmp.w	r8, #0
 800821a:	dd9c      	ble.n	8008156 <__sflush_r+0x1a>
 800821c:	6a21      	ldr	r1, [r4, #32]
 800821e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008220:	4643      	mov	r3, r8
 8008222:	463a      	mov	r2, r7
 8008224:	4628      	mov	r0, r5
 8008226:	47b0      	blx	r6
 8008228:	2800      	cmp	r0, #0
 800822a:	dc06      	bgt.n	800823a <__sflush_r+0xfe>
 800822c:	89a3      	ldrh	r3, [r4, #12]
 800822e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008232:	81a3      	strh	r3, [r4, #12]
 8008234:	f04f 30ff 	mov.w	r0, #4294967295
 8008238:	e78e      	b.n	8008158 <__sflush_r+0x1c>
 800823a:	4407      	add	r7, r0
 800823c:	eba8 0800 	sub.w	r8, r8, r0
 8008240:	e7e9      	b.n	8008216 <__sflush_r+0xda>
 8008242:	bf00      	nop
 8008244:	dfbffffe 	.word	0xdfbffffe

08008248 <_fflush_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	690b      	ldr	r3, [r1, #16]
 800824c:	4605      	mov	r5, r0
 800824e:	460c      	mov	r4, r1
 8008250:	b913      	cbnz	r3, 8008258 <_fflush_r+0x10>
 8008252:	2500      	movs	r5, #0
 8008254:	4628      	mov	r0, r5
 8008256:	bd38      	pop	{r3, r4, r5, pc}
 8008258:	b118      	cbz	r0, 8008262 <_fflush_r+0x1a>
 800825a:	6a03      	ldr	r3, [r0, #32]
 800825c:	b90b      	cbnz	r3, 8008262 <_fflush_r+0x1a>
 800825e:	f7ff f947 	bl	80074f0 <__sinit>
 8008262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0f3      	beq.n	8008252 <_fflush_r+0xa>
 800826a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800826c:	07d0      	lsls	r0, r2, #31
 800826e:	d404      	bmi.n	800827a <_fflush_r+0x32>
 8008270:	0599      	lsls	r1, r3, #22
 8008272:	d402      	bmi.n	800827a <_fflush_r+0x32>
 8008274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008276:	f7ff fb85 	bl	8007984 <__retarget_lock_acquire_recursive>
 800827a:	4628      	mov	r0, r5
 800827c:	4621      	mov	r1, r4
 800827e:	f7ff ff5d 	bl	800813c <__sflush_r>
 8008282:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008284:	07da      	lsls	r2, r3, #31
 8008286:	4605      	mov	r5, r0
 8008288:	d4e4      	bmi.n	8008254 <_fflush_r+0xc>
 800828a:	89a3      	ldrh	r3, [r4, #12]
 800828c:	059b      	lsls	r3, r3, #22
 800828e:	d4e1      	bmi.n	8008254 <_fflush_r+0xc>
 8008290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008292:	f7ff fb78 	bl	8007986 <__retarget_lock_release_recursive>
 8008296:	e7dd      	b.n	8008254 <_fflush_r+0xc>

08008298 <__swhatbuf_r>:
 8008298:	b570      	push	{r4, r5, r6, lr}
 800829a:	460c      	mov	r4, r1
 800829c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a0:	2900      	cmp	r1, #0
 80082a2:	b096      	sub	sp, #88	; 0x58
 80082a4:	4615      	mov	r5, r2
 80082a6:	461e      	mov	r6, r3
 80082a8:	da0d      	bge.n	80082c6 <__swhatbuf_r+0x2e>
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80082b0:	f04f 0100 	mov.w	r1, #0
 80082b4:	bf0c      	ite	eq
 80082b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80082ba:	2340      	movne	r3, #64	; 0x40
 80082bc:	2000      	movs	r0, #0
 80082be:	6031      	str	r1, [r6, #0]
 80082c0:	602b      	str	r3, [r5, #0]
 80082c2:	b016      	add	sp, #88	; 0x58
 80082c4:	bd70      	pop	{r4, r5, r6, pc}
 80082c6:	466a      	mov	r2, sp
 80082c8:	f000 f848 	bl	800835c <_fstat_r>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	dbec      	blt.n	80082aa <__swhatbuf_r+0x12>
 80082d0:	9901      	ldr	r1, [sp, #4]
 80082d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80082d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80082da:	4259      	negs	r1, r3
 80082dc:	4159      	adcs	r1, r3
 80082de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082e2:	e7eb      	b.n	80082bc <__swhatbuf_r+0x24>

080082e4 <__smakebuf_r>:
 80082e4:	898b      	ldrh	r3, [r1, #12]
 80082e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80082e8:	079d      	lsls	r5, r3, #30
 80082ea:	4606      	mov	r6, r0
 80082ec:	460c      	mov	r4, r1
 80082ee:	d507      	bpl.n	8008300 <__smakebuf_r+0x1c>
 80082f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80082f4:	6023      	str	r3, [r4, #0]
 80082f6:	6123      	str	r3, [r4, #16]
 80082f8:	2301      	movs	r3, #1
 80082fa:	6163      	str	r3, [r4, #20]
 80082fc:	b002      	add	sp, #8
 80082fe:	bd70      	pop	{r4, r5, r6, pc}
 8008300:	ab01      	add	r3, sp, #4
 8008302:	466a      	mov	r2, sp
 8008304:	f7ff ffc8 	bl	8008298 <__swhatbuf_r>
 8008308:	9900      	ldr	r1, [sp, #0]
 800830a:	4605      	mov	r5, r0
 800830c:	4630      	mov	r0, r6
 800830e:	f7ff fbb5 	bl	8007a7c <_malloc_r>
 8008312:	b948      	cbnz	r0, 8008328 <__smakebuf_r+0x44>
 8008314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008318:	059a      	lsls	r2, r3, #22
 800831a:	d4ef      	bmi.n	80082fc <__smakebuf_r+0x18>
 800831c:	f023 0303 	bic.w	r3, r3, #3
 8008320:	f043 0302 	orr.w	r3, r3, #2
 8008324:	81a3      	strh	r3, [r4, #12]
 8008326:	e7e3      	b.n	80082f0 <__smakebuf_r+0xc>
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	6020      	str	r0, [r4, #0]
 800832c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008330:	81a3      	strh	r3, [r4, #12]
 8008332:	9b00      	ldr	r3, [sp, #0]
 8008334:	6163      	str	r3, [r4, #20]
 8008336:	9b01      	ldr	r3, [sp, #4]
 8008338:	6120      	str	r0, [r4, #16]
 800833a:	b15b      	cbz	r3, 8008354 <__smakebuf_r+0x70>
 800833c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008340:	4630      	mov	r0, r6
 8008342:	f000 f81d 	bl	8008380 <_isatty_r>
 8008346:	b128      	cbz	r0, 8008354 <__smakebuf_r+0x70>
 8008348:	89a3      	ldrh	r3, [r4, #12]
 800834a:	f023 0303 	bic.w	r3, r3, #3
 800834e:	f043 0301 	orr.w	r3, r3, #1
 8008352:	81a3      	strh	r3, [r4, #12]
 8008354:	89a3      	ldrh	r3, [r4, #12]
 8008356:	431d      	orrs	r5, r3
 8008358:	81a5      	strh	r5, [r4, #12]
 800835a:	e7cf      	b.n	80082fc <__smakebuf_r+0x18>

0800835c <_fstat_r>:
 800835c:	b538      	push	{r3, r4, r5, lr}
 800835e:	4d07      	ldr	r5, [pc, #28]	; (800837c <_fstat_r+0x20>)
 8008360:	2300      	movs	r3, #0
 8008362:	4604      	mov	r4, r0
 8008364:	4608      	mov	r0, r1
 8008366:	4611      	mov	r1, r2
 8008368:	602b      	str	r3, [r5, #0]
 800836a:	f7f8 fd4c 	bl	8000e06 <_fstat>
 800836e:	1c43      	adds	r3, r0, #1
 8008370:	d102      	bne.n	8008378 <_fstat_r+0x1c>
 8008372:	682b      	ldr	r3, [r5, #0]
 8008374:	b103      	cbz	r3, 8008378 <_fstat_r+0x1c>
 8008376:	6023      	str	r3, [r4, #0]
 8008378:	bd38      	pop	{r3, r4, r5, pc}
 800837a:	bf00      	nop
 800837c:	200085e8 	.word	0x200085e8

08008380 <_isatty_r>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	4d06      	ldr	r5, [pc, #24]	; (800839c <_isatty_r+0x1c>)
 8008384:	2300      	movs	r3, #0
 8008386:	4604      	mov	r4, r0
 8008388:	4608      	mov	r0, r1
 800838a:	602b      	str	r3, [r5, #0]
 800838c:	f7f8 fd4b 	bl	8000e26 <_isatty>
 8008390:	1c43      	adds	r3, r0, #1
 8008392:	d102      	bne.n	800839a <_isatty_r+0x1a>
 8008394:	682b      	ldr	r3, [r5, #0]
 8008396:	b103      	cbz	r3, 800839a <_isatty_r+0x1a>
 8008398:	6023      	str	r3, [r4, #0]
 800839a:	bd38      	pop	{r3, r4, r5, pc}
 800839c:	200085e8 	.word	0x200085e8

080083a0 <_sbrk_r>:
 80083a0:	b538      	push	{r3, r4, r5, lr}
 80083a2:	4d06      	ldr	r5, [pc, #24]	; (80083bc <_sbrk_r+0x1c>)
 80083a4:	2300      	movs	r3, #0
 80083a6:	4604      	mov	r4, r0
 80083a8:	4608      	mov	r0, r1
 80083aa:	602b      	str	r3, [r5, #0]
 80083ac:	f7f8 fd54 	bl	8000e58 <_sbrk>
 80083b0:	1c43      	adds	r3, r0, #1
 80083b2:	d102      	bne.n	80083ba <_sbrk_r+0x1a>
 80083b4:	682b      	ldr	r3, [r5, #0]
 80083b6:	b103      	cbz	r3, 80083ba <_sbrk_r+0x1a>
 80083b8:	6023      	str	r3, [r4, #0]
 80083ba:	bd38      	pop	{r3, r4, r5, pc}
 80083bc:	200085e8 	.word	0x200085e8

080083c0 <_init>:
 80083c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c2:	bf00      	nop
 80083c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083c6:	bc08      	pop	{r3}
 80083c8:	469e      	mov	lr, r3
 80083ca:	4770      	bx	lr

080083cc <_fini>:
 80083cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ce:	bf00      	nop
 80083d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083d2:	bc08      	pop	{r3}
 80083d4:	469e      	mov	lr, r3
 80083d6:	4770      	bx	lr
